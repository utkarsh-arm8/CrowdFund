import { trackConnect } from "../../../../analytics/track/connect.js";
import { getCachedChainIfExists } from "../../../../chains/utils.js";
import { stringify } from "../../../../utils/json.js";
import { getEcosystemInfo } from "../../../ecosystem/get-ecosystem-wallet-auth-options.js";
import { createWalletEmitter } from "../../../wallet-emitter.js";
const connectorCache = new Map();
/**
 * @internal
 */
export async function getOrCreateInAppWalletConnector(client, connectorFactory, ecosystem) {
    const key = stringify({ clientId: client.clientId, ecosystem });
    if (connectorCache.has(key)) {
        return connectorCache.get(key);
    }
    const connector = await connectorFactory(client);
    connectorCache.set(key, connector);
    return connector;
}
/**
 * @internal
 */
export function createInAppWallet(args) {
    const { createOptions: _createOptions, connectorFactory, ecosystem } = args;
    const walletId = ecosystem ? ecosystem.id : "inApp";
    const emitter = createWalletEmitter();
    let createOptions = _createOptions;
    let account = undefined;
    let chain = undefined;
    let client;
    return {
        id: walletId,
        subscribe: emitter.subscribe,
        getChain() {
            if (!chain) {
                return undefined;
            }
            chain = getCachedChainIfExists(chain.id) || chain;
            return chain;
        },
        getConfig: () => createOptions,
        getAccount: () => account,
        autoConnect: async (options) => {
            const { autoConnectInAppWallet } = await import("./index.js");
            const connector = await getOrCreateInAppWalletConnector(options.client, connectorFactory, ecosystem);
            if (ecosystem) {
                const ecosystemOptions = await getEcosystemInfo(ecosystem.id);
                const smartAccountOptions = ecosystemOptions?.smartAccountOptions;
                if (smartAccountOptions) {
                    const preferredChain = options.chain;
                    if (!preferredChain) {
                        throw new Error("Chain is required for ecosystem smart accounts, pass it via connect() or via UI components");
                    }
                    createOptions = {
                        ...createOptions,
                        smartAccount: {
                            chain: preferredChain,
                            sponsorGas: smartAccountOptions.sponsorGas,
                            factoryAddress: smartAccountOptions.accountFactoryAddress,
                        },
                    };
                }
            }
            const [connectedAccount, connectedChain] = await autoConnectInAppWallet(options, createOptions, connector);
            // set the states
            client = options.client;
            account = connectedAccount;
            chain = connectedChain;
            trackConnect({
                client: options.client,
                ecosystem,
                walletType: walletId,
                walletAddress: account.address,
                chainId: chain.id,
            });
            // return only the account
            return account;
        },
        connect: async (options) => {
            const { connectInAppWallet } = await import("./index.js");
            const connector = await getOrCreateInAppWalletConnector(options.client, connectorFactory, ecosystem);
            if (ecosystem) {
                const ecosystemOptions = await getEcosystemInfo(ecosystem.id);
                const smartAccountOptions = ecosystemOptions?.smartAccountOptions;
                if (smartAccountOptions) {
                    const preferredChain = options.chain;
                    if (!preferredChain) {
                        throw new Error("Chain is required for ecosystem smart accounts, pass it via connect() or via UI components");
                    }
                    createOptions = {
                        ...createOptions,
                        smartAccount: {
                            chain: preferredChain,
                            sponsorGas: smartAccountOptions.sponsorGas,
                            factoryAddress: smartAccountOptions.accountFactoryAddress,
                        },
                    };
                }
            }
            const [connectedAccount, connectedChain] = await connectInAppWallet(options, createOptions, connector);
            // set the states
            client = options.client;
            account = connectedAccount;
            chain = connectedChain;
            trackConnect({
                client: options.client,
                ecosystem,
                walletType: walletId,
                walletAddress: account.address,
                chainId: chain.id,
            });
            // return only the account
            return account;
        },
        disconnect: async () => {
            // If no client is assigned, we should be fine just unsetting the states
            if (client) {
                const connector = await getOrCreateInAppWalletConnector(client, connectorFactory, ecosystem);
                const result = await connector.logout();
                if (!result.success) {
                    throw new Error("Failed to logout");
                }
            }
            account = undefined;
            chain = undefined;
            emitter.emit("disconnect", undefined);
        },
        switchChain: async (newChain) => {
            if (createOptions?.smartAccount && client && account) {
                // if account abstraction is enabled, reconnect to smart account on the new chain
                const { autoConnectInAppWallet } = await import("./index.js");
                const connector = await getOrCreateInAppWalletConnector(client, connectorFactory, ecosystem);
                if (ecosystem) {
                    const ecosystemOptions = await getEcosystemInfo(ecosystem.id);
                    const smartAccountOptions = ecosystemOptions?.smartAccountOptions;
                    if (smartAccountOptions) {
                        createOptions = {
                            ...createOptions,
                            smartAccount: {
                                chain: newChain,
                                sponsorGas: smartAccountOptions.sponsorGas,
                                factoryAddress: smartAccountOptions.accountFactoryAddress,
                            },
                        };
                    }
                }
                const [connectedAccount, connectedChain] = await autoConnectInAppWallet({
                    chain: newChain,
                    client,
                }, createOptions, connector);
                account = connectedAccount;
                chain = connectedChain;
            }
            else {
                // if not, simply set the new chain
                chain = newChain;
            }
            emitter.emit("chainChanged", newChain);
        },
    };
}
//# sourceMappingURL=in-app-core.js.map