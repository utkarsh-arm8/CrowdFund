import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  getRpcClient
} from "./chunk-U6IJB3QF.js";
import {
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-IIQ5PWPH.js";
import {
  __toESM
} from "./chunk-ZDA3XXE2.js";

// node_modules/@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/rpc/actions/eth_getCode.js
var import_dist = __toESM(require_dist(), 1);
var import_dist2 = __toESM(require_dist2(), 1);
var import_dist3 = __toESM(require_dist3(), 1);
async function eth_getCode(request, params) {
  return request({
    method: "eth_getCode",
    params: [params.address, params.blockTag || "latest"]
  });
}

// node_modules/@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/utils/bytecode/detectExtension.js
var import_dist7 = __toESM(require_dist(), 1);
var import_dist8 = __toESM(require_dist2(), 1);
var import_dist9 = __toESM(require_dist3(), 1);

// node_modules/@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/contract/actions/get-bytecode.js
var import_dist4 = __toESM(require_dist(), 1);
var import_dist5 = __toESM(require_dist2(), 1);
var import_dist6 = __toESM(require_dist3(), 1);
var BYTECODE_CACHE = /* @__PURE__ */ new WeakMap();
function getBytecode(contract) {
  if (BYTECODE_CACHE.has(contract)) {
    return BYTECODE_CACHE.get(contract);
  }
  const prom = (async () => {
    const rpcRequest = getRpcClient(contract);
    const result = await eth_getCode(rpcRequest, {
      address: contract.address,
      blockTag: "latest"
    });
    if (result === "0x") {
      BYTECODE_CACHE.delete(contract);
    }
    return result;
  })();
  BYTECODE_CACHE.set(contract, prom);
  return prom;
}

export {
  getBytecode
};
//# sourceMappingURL=chunk-U4XESRYZ.js.map
