import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  Connector
} from "./chunk-BJ3Q2M2N.js";
import {
  normalizeChainId
} from "./chunk-HWRFKVPJ.js";
import {
  _defineProperty
} from "./chunk-7YQW7K4V.js";
import "./chunk-QU2H4SD2.js";
import "./chunk-5Y4RQ6D5.js";
import "./chunk-GUSRGUBP.js";
import "./chunk-LNZJK5RN.js";
import "./chunk-XN7Z4YSU.js";
import "./chunk-XMSXM2E4.js";
import "./chunk-U4XESRYZ.js";
import "./chunk-CAWHCWPV.js";
import "./chunk-BL4VSW2C.js";
import "./chunk-7QDYPHE5.js";
import "./chunk-T7SU3EOS.js";
import "./chunk-RHGXPIYU.js";
import "./chunk-HYWBSNOJ.js";
import "./chunk-4ZVJN6FY.js";
import "./chunk-AW5SWZJE.js";
import "./chunk-RYFD5FY6.js";
import "./chunk-STA435HD.js";
import "./chunk-DFC6BI5N.js";
import "./chunk-3376PJ73.js";
import "./chunk-YPYICWYD.js";
import "./chunk-U6IJB3QF.js";
import "./chunk-LMJC2RD2.js";
import "./chunk-4K65M2LO.js";
import "./chunk-IMPEKHNI.js";
import "./chunk-YRREQA3W.js";
import "./chunk-ZZ56NLTE.js";
import "./chunk-CG33N7WG.js";
import "./chunk-ENLC2GGB.js";
import "./chunk-AO5YUUGU.js";
import "./chunk-GXMHMEEO.js";
import "./chunk-4WUEILHN.js";
import "./chunk-ZSYQ5PGN.js";
import "./chunk-D6ZRKGHM.js";
import "./chunk-XDXECFPF.js";
import "./chunk-YOGJGII4.js";
import "./chunk-7PBDWUZZ.js";
import "./chunk-KQT2DMC7.js";
import "./chunk-VSMNETTA.js";
import "./chunk-IAOBFAKY.js";
import "./chunk-YTCBHIZC.js";
import "./chunk-H6LS4AKV.js";
import "./chunk-ZEON4SY2.js";
import "./chunk-5TF2ZDVM.js";
import "./chunk-COLQIUNX.js";
import "./chunk-2PW66HIP.js";
import {
  getChainProvider
} from "./chunk-YPNI3TBW.js";
import "./chunk-43DMFY6L.js";
import "./chunk-2GDUVVK5.js";
import "./chunk-C347233M.js";
import "./chunk-VE5YG2UP.js";
import "./chunk-57UGKABR.js";
import "./chunk-ECNDAD33.js";
import "./chunk-VA6DT6HZ.js";
import "./chunk-GYWPTUR7.js";
import "./chunk-UPLMOH3U.js";
import "./chunk-WY46RIEA.js";
import "./chunk-FUT2NW4P.js";
import "./chunk-43OABXJU.js";
import "./chunk-4357AYQK.js";
import "./chunk-5UPRJSZY.js";
import "./chunk-ZKAAZOGS.js";
import "./chunk-OKK22FPZ.js";
import "./chunk-4K5QQUIR.js";
import "./chunk-OWJUH5G2.js";
import "./chunk-46FQ3G72.js";
import {
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-IIQ5PWPH.js";
import {
  __toESM
} from "./chunk-ZDA3XXE2.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var SignerConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = !this.options.chains.find((c) => c.chainId === id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.options = options;
  }
  async connect(args) {
    if (args.chainId) {
      this.switchChain(args.chainId);
    }
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async disconnect() {
    this._provider = void 0;
    this._signer = void 0;
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getProvider() {
    if (!this._provider) {
      this._provider = getChainProvider(this.options.chain, {
        clientId: this.options.clientId,
        secretKey: this.options.secretKey
      });
    }
    return this._provider;
  }
  async getSigner() {
    if (!this._signer) {
      const provider = await this.getProvider();
      this._signer = getUpdatedSigner(this.options.signer, provider);
    }
    return this._signer;
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);
    }
    this._provider = getChainProvider(chain, {
      clientId: this.options.clientId,
      secretKey: this.options.secretKey
    });
    this._signer = getUpdatedSigner(this.options.signer, this._provider);
    this.onChainChanged(chainId);
  }
  async setupListeners() {
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
};
function getUpdatedSigner(signer, provider) {
  if (provider) {
    return signer.connect(provider);
  }
  return signer;
}
export {
  SignerConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-signer.browser.esm-AIKZ7PNG.js.map
