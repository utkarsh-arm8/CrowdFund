{
  "version": 3,
  "sources": ["../../@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js"],
  "sourcesContent": ["import { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { h as hexlifyUserOp, D as DEBUG, r as randomNonce, H as HttpRpcClient, g as getUserOpHashV06 } from '../../../../dist/http-rpc-client-0a079e80.browser.esm.js';\nimport { i as isTwUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { s as setAnalyticsHeaders } from '../../../../dist/headers-733a8199.browser.esm.js';\nimport { EntryPoint__factory } from '@account-abstraction/contracts';\nimport { utils, Signer, ethers, providers, Contract, BigNumber, constants } from 'ethers';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { signTypedDataInternal, getDynamicFeeData, ThirdwebSDK, LOCAL_NODE_PKEY, getChainProvider, getGasPrice } from '@thirdweb-dev/sdk';\nimport { chainIdToThirdwebRpc } from '../../../wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport { c as checkContractWalletSignature, A as ACCOUNT_CORE_ABI, f as ENTRYPOINT_ADDRESS, D as DEFAULT_FACTORY_ADDRESS } from '../../../../dist/utils-f58e7acc.browser.esm.js';\nimport { Celo, CeloAlfajoresTestnet, CeloBaklavaTestnet } from '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * an API to external a UserOperation with paymaster info\n */\nclass PaymasterAPI {}\n\nclass VerifyingPaymasterAPI extends PaymasterAPI {\n  constructor(paymasterUrl, entryPoint, clientId, secretKey) {\n    super();\n    this.paymasterUrl = paymasterUrl;\n    this.entryPoint = entryPoint;\n    this.clientId = clientId;\n    this.secretKey = secretKey;\n  }\n  async getPaymasterAndData(userOp) {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (isTwUrl(this.paymasterUrl)) {\n      if (this.secretKey && this.clientId) {\n        throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\n      }\n      if (this.secretKey) {\n        headers[\"x-secret-key\"] = this.secretKey;\n      } else if (this.clientId) {\n        headers[\"x-client-id\"] = this.clientId;\n        const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token.\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token.\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n\n    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n    const response = await fetch(this.paymasterUrl, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: 1,\n        method: \"pm_sponsorUserOperation\",\n        params: [await hexlifyUserOp(userOp), this.entryPoint]\n      })\n    });\n    const res = await response.json();\n    if (!response.ok) {\n      const error = res.error || response.statusText;\n      const code = res.code || \"UNKNOWN\";\n      throw new Error(`Paymaster error: ${error}\nStatus: ${response.status}\nCode: ${code}`);\n    }\n    if (DEBUG) {\n      console.debug(\"Paymaster result:\", res);\n    }\n    if (res.result) {\n      // some paymasters return a string, some return an object with more data\n      if (typeof res.result === \"string\") {\n        return {\n          paymasterAndData: res.result\n        };\n      } else {\n        return res.result;\n      }\n    } else {\n      const error = res.error?.message || res.error || response.statusText || \"unknown error\";\n      throw new Error(`Paymaster error from ${this.paymasterUrl}: ${error}`);\n    }\n  }\n}\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\n\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n *\n * TODO refactor this to a simple event listener on the entry point\n */\nclass UserOperationEventListener {\n  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\n    this.resolve = resolve;\n    this.reject = reject;\n    this.entryPoint = entryPoint;\n    this.sender = sender;\n    this.userOpHash = userOpHash;\n    this.nonce = nonce;\n    this.timeout = timeout;\n    _defineProperty(this, \"resolved\", false);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.boundLisener = this.listenerCallback.bind(this);\n  }\n  start() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n    // listener takes time... first query directly:\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      const res = await this.entryPoint.queryFilter(filter, -10); // look at last 10 blocks\n      if (res.length > 0) {\n        void this.listenerCallback(res[0]);\n      } else {\n        this.entryPoint.once(filter, this.boundLisener);\n      }\n    }, 100);\n  }\n  stop() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async listenerCallback() {\n    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {\n      param[_key] = arguments[_key];\n    }\n    // TODO clean this up..\n    // eslint-disable-next-line prefer-rest-params\n    const event = arguments[arguments.length - 1];\n    if (!event.args) {\n      console.error(\"got event without args\", event);\n      return;\n    }\n    // TODO: can this happen? we register to event by userOpHash..\n    if (event.args.userOpHash !== this.userOpHash) {\n      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);\n      return;\n    }\n    const transactionReceipt = await event.getTransactionReceipt();\n\n    // before returning the receipt, update the status from the event.\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!event.args.success) {\n      await this.extractFailureReason(transactionReceipt);\n    }\n    this.stop();\n    this.resolve(transactionReceipt);\n    this.resolved = true;\n  }\n  async extractFailureReason(receipt) {\n    receipt.status = 0;\n    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n    if (revertReasonEvents[0]) {\n      let message = revertReasonEvents[0].args.revertReason;\n      if (message.startsWith(\"0x08c379a0\")) {\n        // Error(string)\n        message = utils.defaultAbiCoder.decode([\"string\"], \"0x\" + message.substring(10)).toString();\n      }\n      this.reject(new Error(`UserOp failed with reason: ${message}`));\n    }\n  }\n}\n\nclass ERC4337EthersSigner extends Signer {\n  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\n    super();\n    utils.defineReadOnly(this, \"provider\", erc4337provider);\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.erc4337provider = erc4337provider;\n    this.httpRpcClient = httpRpcClient;\n    this.smartAccountAPI = smartAccountAPI;\n    this.approving = false;\n  }\n  // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n  async sendTransaction(transaction, options) {\n    if (!this.approving) {\n      this.approving = true;\n      const tx = await this.smartAccountAPI.createApproveTx();\n      if (tx) {\n        await (await this.sendTransaction(tx)).wait();\n      }\n      this.approving = false;\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n    try {\n      await this.httpRpcClient.sendUserOpToBundler(userOperation);\n    } catch (error) {\n      throw this.unwrapError(error);\n    }\n    // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n    return transactionResponse;\n  }\n  unwrapError(errorIn) {\n    try {\n      let errorMsg = \"Unknown Error\";\n      if (errorIn.error) {\n        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;\n      } else if (errorIn.body && typeof errorIn.body === \"string\") {\n        const errorBody = JSON.parse(errorIn.body);\n        const errorStatus = errorIn.status || \"UNKNOWN\";\n        const errorCode = errorBody?.code || \"UNKNOWN\";\n        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;\n        if (failedOpMessage?.includes(\"FailedOp\")) {\n          let paymasterInfo = \"\";\n          // TODO: better error extraction methods will be needed\n          const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n          if (matched) {\n            const split = matched[1].split(\",\");\n            paymasterInfo = `(paymaster address: ${split[1]})`;\n            failedOpMessage = split[2];\n          }\n          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;\n        } else {\n          errorMsg = `RPC error: ${failedOpMessage}\nStatus: ${errorStatus}\nCode: ${errorCode}`;\n        }\n      }\n      const error = new Error(errorMsg);\n      error.stack = errorIn.stack;\n      return error;\n    } catch (error) {}\n    return errorIn;\n  }\n  async verifyAllNecessaryFields(transactionRequest) {\n    if (!transactionRequest.to) {\n      throw new Error(\"Missing call target\");\n    }\n    if (!transactionRequest.data && !transactionRequest.value) {\n      // TBD: banning no-op UserOps seems to make sense on provider level\n      throw new Error(\"Missing call data or value\");\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connect(provider) {\n    throw new Error(\"changing providers is not supported\");\n  }\n  async getAddress() {\n    if (!this.address) {\n      this.address = await this.erc4337provider.getSenderAccountAddress();\n    }\n    return this.address;\n  }\n\n  /**\n   * Sign a message and return the signature\n   */\n  async signMessage(message) {\n    // Deploy smart wallet if needed\n    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\n    if (isNotDeployed) {\n      console.log(\"Account contract not deployed yet. Deploying account before signing message\");\n      const tx = await this.sendTransaction({\n        to: await this.getAddress(),\n        data: \"0x\"\n      });\n      await tx.wait();\n    }\n    const [chainId, address] = await Promise.all([this.getChainId(), this.getAddress()]);\n    const originalMsgHash = utils.hashMessage(message);\n    let factorySupports712;\n    let signature;\n    const rpcUrl = chainIdToThirdwebRpc(chainId, this.config.clientId);\n    const headers = {};\n    if (isTwUrl(rpcUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (this.config.secretKey) {\n        headers[\"x-secret-key\"] = this.config.secretKey;\n      } else if (this.config.clientId) {\n        headers[\"x-client-id\"] = this.config.clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    try {\n      const provider = new providers.StaticJsonRpcProvider({\n        url: rpcUrl,\n        headers\n      }, chainId);\n      const walletContract = new Contract(address, [\"function getMessageHash(bytes32 _hash) public view returns (bytes32)\"], provider);\n      // if this fails it's a pre 712 factory\n      await walletContract.getMessageHash(originalMsgHash);\n      factorySupports712 = true;\n    } catch {\n      factorySupports712 = false;\n    }\n    if (factorySupports712) {\n      const result = await signTypedDataInternal(this, {\n        name: \"Account\",\n        version: \"1\",\n        chainId,\n        verifyingContract: address\n      }, {\n        AccountMessage: [{\n          name: \"message\",\n          type: \"bytes\"\n        }]\n      }, {\n        message: utils.defaultAbiCoder.encode([\"bytes32\"], [originalMsgHash])\n      });\n      signature = result.signature;\n    } else {\n      signature = await this.originalSigner.signMessage(message);\n    }\n    const isValid = await checkContractWalletSignature(message, signature, address, chainId, this.config.clientId, this.config.secretKey);\n    if (isValid) {\n      return signature;\n    } else {\n      throw new Error(\"Unable to verify signature on smart account, please make sure the smart account is deployed and the signature is valid.\");\n    }\n  }\n  async signTransaction(transaction, options) {\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const userOpString = JSON.stringify(await hexlifyUserOp(userOperation));\n    return userOpString;\n  }\n}\n\nclass ERC4337EthersProvider extends providers.BaseProvider {\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n    super({\n      name: \"ERC-4337 Custom Network\",\n      chainId\n    });\n    this.chainId = chainId;\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.originalProvider = originalProvider;\n    this.httpRpcClient = httpRpcClient;\n    this.entryPoint = entryPoint;\n    this.smartAccountAPI = smartAccountAPI;\n    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n  }\n  getSigner() {\n    return this.signer;\n  }\n  async perform(method, params) {\n    if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\n      // TODO: do we need 'perform' method to be available at all?\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n      throw new Error(\"Should not get here. Investigate.\");\n    }\n    if (method === \"estimateGas\") {\n      // gas estimation does nothing at this layer, sendTransaction will do the gas estimation for the userOp\n      return BigNumber.from(500000);\n    }\n    return await this.originalProvider.perform(method, params);\n  }\n  async getTransaction(transactionHash) {\n    // TODO\n    return await super.getTransaction(transactionHash);\n  }\n  async getTransactionReceipt(transactionHash) {\n    const userOpHash = await transactionHash;\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n    });\n  }\n  async getSenderAccountAddress() {\n    return await this.smartAccountAPI.getAccountAddress();\n  }\n  async waitForTransaction(transactionHash, confirmations, timeout) {\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n      listener.start();\n    });\n  }\n\n  // fabricate a response in a format usable by ethers users...\n  async constructUserOpTransactionResponse(userOp1) {\n    const userOp = await utils.resolveProperties(userOp1);\n    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\n    return {\n      hash: userOpHash,\n      confirmations: 0,\n      from: userOp.sender,\n      nonce: 0,\n      // not the real nonce, but good enough for this purpose\n      gasLimit: BigNumber.from(userOp.callGasLimit),\n      // ??\n      value: BigNumber.from(0),\n      data: utils.hexValue(userOp.callData),\n      // should extract the actual called method from this \"execFromEntryPoint()\" call\n      chainId: this.chainId,\n      wait: async confirmations => {\n        const transactionReceipt = await this.smartAccountAPI.getUserOpReceipt(this.httpRpcClient, userOpHash);\n        if (userOp.initCode.length !== 0) {\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\n          await this.smartAccountAPI.checkAccountPhantom();\n        }\n        return transactionReceipt;\n      }\n    };\n  }\n  async detectNetwork() {\n    return this.originalProvider.detectNetwork();\n  }\n}\n\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider - The normal provider\n * @param config - see {@link ClientConfig} for more info\n * @param originalSigner - use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nfunction create4337Provider(config, accountApi, originalProvider, chainId) {\n  const entryPoint = EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\n  return new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi);\n}\n\nconst DUMMY_SIGNATURE = \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */\nclass BaseAccountAPI {\n  // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\n\n  /**\n   * base constructor.\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\n   */\n  constructor(params) {\n    _defineProperty(this, \"isPhantom\", true);\n    this.provider = params.provider;\n    this.entryPointAddress = params.entryPointAddress;\n    this.accountAddress = params.accountAddress;\n    this.paymasterAPI = params.paymasterAPI;\n    this.gasless = params.gasless;\n    this.erc20PaymasterAddress = params.erc20PaymasterAddress;\n    this.erc20TokenAddress = params.erc20TokenAddress;\n\n    // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n    this.entryPointView = EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers.constants.AddressZero);\n  }\n\n  /**\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */\n\n  /**\n   * return current account's nonce.\n   */\n\n  /**\n   * encode the call from entryPoint through our account to the target contract.\n   * @param target - The target contract address\n   * @param value - The value to send to the target contract\n   * @param data - The calldata to send to the target contract\n   */\n\n  /**\n   * sign a userOp's hash (userOpHash).\n   * @param userOpHash - The hash to sign\n   */\n\n  /**\n   * calculate the account address even before it is deployed\n   */\n\n  /**\n   * check if the contract is already deployed.\n   */\n  async checkAccountPhantom() {\n    if (!this.isPhantom) {\n      // already deployed. no need to check anymore.\n      return this.isPhantom;\n    }\n    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n    if (senderAddressCode.length > 2) {\n      this.isPhantom = false;\n    }\n    return this.isPhantom;\n  }\n  /**\n   * return initCode value to into the UserOp.\n   * (either deployment code, or empty hex if contract already deployed)\n   */\n  async getInitCode() {\n    if (await this.checkAccountPhantom()) {\n      return await this.getAccountInitCode();\n    }\n    return \"0x\";\n  }\n\n  /**\n   * return maximum gas used for verification.\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n   */\n  async getVerificationGasLimit() {\n    return 100000;\n  }\n\n  /**\n   * return userOpHash for signing.\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n   * @param userOp - userOperation, (signature field ignored)\n   */\n  async getUserOpHash(userOp) {\n    const chainId = await this.provider.getNetwork().then(net => net.chainId);\n    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\n  }\n\n  /**\n   * return the account's address.\n   * this value is valid even before deploying the contract.\n   */\n  async getAccountAddress() {\n    if (!this.senderAddress) {\n      if (this.accountAddress) {\n        this.senderAddress = this.accountAddress;\n      } else {\n        this.senderAddress = await this.getCounterFactualAddress();\n      }\n    }\n    return this.senderAddress;\n  }\n  async estimateCreationGas(initCode) {\n    if (!initCode || initCode === \"0x\") {\n      return 0;\n    }\n    const deployerAddress = initCode.substring(0, 42);\n    const deployerCallData = \"0x\" + initCode.substring(42);\n    return await this.provider.estimateGas({\n      to: deployerAddress,\n      data: deployerCallData\n    });\n  }\n  async createUnsignedUserOp(httpRpcClient, info, options) {\n    let {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = info;\n    // get fees from bundler if available\n    if (isTwUrl(httpRpcClient.bundlerUrl)) {\n      const bundlerFeeData = await httpRpcClient.getUserOperationGasPrice();\n      maxFeePerGas = BigNumber.from(bundlerFeeData.maxFeePerGas);\n      maxPriorityFeePerGas = BigNumber.from(bundlerFeeData.maxPriorityFeePerGas);\n    } else {\n      // if bundler is not available, try to get fees from the network if not passed explicitly\n      if (!maxFeePerGas || !maxPriorityFeePerGas) {\n        const feeData = await getDynamicFeeData(this.provider);\n        if (!maxPriorityFeePerGas) {\n          maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\n        }\n        if (!maxFeePerGas) {\n          maxFeePerGas = feeData.maxFeePerGas ?? undefined;\n          const network = await this.provider.getNetwork();\n          const chainId = network.chainId;\n          if (chainId === Celo.chainId || chainId === CeloAlfajoresTestnet.chainId || chainId === CeloBaklavaTestnet.chainId) {\n            maxPriorityFeePerGas = maxFeePerGas;\n          }\n        }\n      }\n    }\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      throw new Error(\"maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely\");\n    }\n    const [sender, nonce] = await Promise.all([this.getAccountAddress(), info.nonce ? Promise.resolve(info.nonce) : this.getNonce()]);\n    const initCode = await this.getInitCode();\n    const value = parseNumber(info.value) ?? BigNumber.from(0);\n    const callData = options?.batchData ? info.data : await this.prepareExecute(info.target, value, info.data).then(async tx => {\n      if (!info.gasLimit) {\n        // estimate gas on the inner transactions to simulate\n        // bundler would not revert otherwise\n        await this.provider.estimateGas({\n          from: sender,\n          to: info.target,\n          data: info.data,\n          value: value\n        });\n      }\n      return tx.encode();\n    });\n    const partialOp = {\n      sender,\n      nonce,\n      initCode,\n      callData,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      callGasLimit: BigNumber.from(1000000),\n      verificationGasLimit: BigNumber.from(1000000),\n      preVerificationGas: BigNumber.from(1000000),\n      paymasterAndData: \"0x\",\n      signature: DUMMY_SIGNATURE\n    };\n\n    // paymaster data + maybe used for estimation as well\n    const gasless = options?.gasless !== undefined ? options.gasless : this.gasless;\n    const useErc20Paymaster = this.erc20PaymasterAddress && this.erc20TokenAddress && (await this.isAccountApproved());\n    if (useErc20Paymaster) {\n      partialOp.paymasterAndData = this.erc20PaymasterAddress;\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = estimates.callGasLimit;\n      partialOp.verificationGasLimit = estimates.verificationGasLimit;\n      partialOp.preVerificationGas = estimates.preVerificationGas;\n    } else if (gasless) {\n      const paymasterResult = await this.paymasterAPI.getPaymasterAndData(partialOp);\n      const paymasterAndData = paymasterResult.paymasterAndData;\n      if (paymasterAndData && paymasterAndData !== \"0x\") {\n        partialOp.paymasterAndData = paymasterAndData;\n      }\n      // paymaster can have the gas limits in the response\n      if (paymasterResult.callGasLimit && paymasterResult.verificationGasLimit && paymasterResult.preVerificationGas) {\n        partialOp.callGasLimit = BigNumber.from(paymasterResult.callGasLimit);\n        partialOp.verificationGasLimit = BigNumber.from(paymasterResult.verificationGasLimit);\n        partialOp.preVerificationGas = BigNumber.from(paymasterResult.preVerificationGas);\n      } else {\n        // otherwise fallback to bundler for gas limits\n        let estimates;\n        try {\n          estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n        } catch (error) {\n          throw this.unwrapBundlerError(error);\n        }\n        partialOp.callGasLimit = estimates.callGasLimit;\n        partialOp.verificationGasLimit = estimates.verificationGasLimit;\n        partialOp.preVerificationGas = estimates.preVerificationGas;\n        // need paymaster to re-sign after estimates\n        if (paymasterAndData && paymasterAndData !== \"0x\") {\n          const paymasterResult2 = await this.paymasterAPI.getPaymasterAndData(partialOp);\n          if (paymasterResult2.paymasterAndData && paymasterResult2.paymasterAndData !== \"0x\") {\n            partialOp.paymasterAndData = paymasterResult2.paymasterAndData;\n          }\n        }\n      }\n    } else {\n      // query bundler for gas limits\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = estimates.callGasLimit;\n      partialOp.verificationGasLimit = estimates.verificationGasLimit;\n      partialOp.preVerificationGas = estimates.preVerificationGas;\n    }\n    return {\n      ...partialOp,\n      signature: \"\"\n    };\n  }\n\n  /**\n   * Sign the filled userOp.\n   * @param userOp - The UserOperation to sign (with signature field ignored)\n   */\n  async signUserOp(userOp) {\n    const userOpHash = await this.getUserOpHash(userOp);\n    const signature = await this.signUserOpHash(userOpHash);\n    return {\n      ...userOp,\n      signature\n    };\n  }\n\n  /**\n   * get the transaction that has this userOpHash mined, or throws if not found\n   * @param userOpHash - returned by sendUserOpToBundler (or by getUserOpHash..)\n   * @param timeout - stop waiting after this timeout\n   * @param interval - time to wait between polls.\n   * @returns The transaction receipt, or an error if timed out.\n   */\n  async getUserOpReceipt(httpRpcClient, userOpHash) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 120000;\n    let interval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n    const endtime = Date.now() + timeout;\n    while (Date.now() < endtime) {\n      const userOpReceipt = await httpRpcClient.getUserOperationReceipt(userOpHash);\n      if (userOpReceipt) {\n        // avoid desync with current provider state\n        return await this.provider.waitForTransaction(userOpReceipt.receipt.transactionHash);\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    throw new Error(\"Timeout waiting for userOp to be mined\");\n  }\n  unwrapBundlerError(error) {\n    const message = error?.error?.message || error.error || error.message || error;\n    return new Error(message);\n  }\n}\nfunction parseNumber(a) {\n  if (!a || a === \"\") {\n    return null;\n  }\n  return BigNumber.from(a.toString());\n}\n\nclass AccountAPI extends BaseAccountAPI {\n  constructor(params, originalProvider) {\n    super({\n      ...params,\n      provider: originalProvider\n    });\n    this.params = params;\n    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\n    // We don't want to use the localSigner directly since it might be connected to another chain\n    // so we just use the public hardhat pkey instead\n    this.sdk = ThirdwebSDK.fromPrivateKey(LOCAL_NODE_PKEY, params.chain, {\n      clientId: params.clientId,\n      secretKey: params.secretKey,\n      // @ts-expect-error expected chain type error\n      supportedChains: typeof params.chain === \"object\" ? [params.chain] : undefined\n    });\n  }\n  async getChainId() {\n    return await this.provider.getNetwork().then(n => n.chainId);\n  }\n  async getAccountContract() {\n    if (!this.accountContract) {\n      if (this.params.accountInfo?.abi) {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\n      } else {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), ACCOUNT_CORE_ABI);\n      }\n    }\n    return this.accountContract;\n  }\n  async getAccountInitCode() {\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\n    return utils.hexConcat([factory.getAddress(), tx.encode()]);\n  }\n  async getFactoryContract() {\n    if (this.factoryContract) {\n      return this.factoryContract;\n    }\n    if (this.params.factoryInfo?.abi) {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\n    } else {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\n    }\n    return this.factoryContract;\n  }\n  async getCounterFactualAddress() {\n    if (this.params.accountAddress) {\n      return this.params.accountAddress;\n    }\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    return this.params.factoryInfo.getAccountAddress(factory, localSigner);\n  }\n  async getNonce() {\n    if (await this.checkAccountPhantom()) {\n      return BigNumber.from(0);\n    }\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.getNonce(accountContract);\n  }\n  async prepareExecute(target, value, data) {\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.execute(accountContract, target, value, data);\n  }\n  async prepareExecuteBatch(targets, values, datas) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.prepare(\"executeBatch\", [targets, values, datas]);\n  }\n  async signUserOpHash(userOpHash) {\n    return await this.params.localSigner.signMessage(utils.arrayify(userOpHash));\n  }\n  async isAcountDeployed() {\n    return !(await this.checkAccountPhantom());\n  }\n  async isAccountApproved() {\n    if (!this.params.erc20PaymasterAddress || !this.params.erc20TokenAddress) {\n      return true;\n    }\n    const swAddress = await this.getCounterFactualAddress();\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20Token = await this.sdk.getContract(this.params.erc20TokenAddress, ERC20Abi);\n    const allowance = await erc20Token.call(\"allowance\", [swAddress, this.params.erc20PaymasterAddress]);\n    return allowance.gte(BigNumber.from(2).pow(96).sub(1));\n  }\n  async createApproveTx() {\n    if (await this.isAccountApproved()) {\n      return undefined;\n    }\n    const amountToApprove = BigNumber.from(2).pow(96).sub(1);\n    const ethersSigner = new ethers.Wallet(LOCAL_NODE_PKEY, this.provider);\n    const erc20Contract = new Contract(this.params.erc20TokenAddress, [\"function approve(address spender, uint256 amount) public returns (bool)\"], ethersSigner);\n    const tx = {\n      to: this.params.erc20TokenAddress,\n      from: await this.getAccountAddress(),\n      value: 0,\n      data: erc20Contract.interface.encodeFunctionData(\"approve\", [this.params.erc20PaymasterAddress, amountToApprove])\n    };\n    return tx;\n  }\n}\n\nclass SmartWalletConnector extends Connector {\n  constructor(config) {\n    super();\n    this.config = config;\n  }\n  async initialize(params) {\n    const config = this.config;\n    const originalProvider = getChainProvider(config.chain, {\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    });\n    this.chainId = (await originalProvider.getNetwork()).chainId;\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    const localSigner = await params.personalWallet.getSigner();\n    const providerConfig = {\n      chain: config.chain,\n      localSigner,\n      entryPointAddress,\n      bundlerUrl,\n      paymasterAPI: this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey),\n      gasless: config.gasless,\n      factoryAddress: config.factoryAddress || DEFAULT_FACTORY_ADDRESS,\n      accountAddress: params.accountAddress,\n      factoryInfo: {\n        createAccount: config.factoryInfo?.createAccount || this.defaultFactoryInfo().createAccount,\n        getAccountAddress: config.factoryInfo?.getAccountAddress || this.defaultFactoryInfo().getAccountAddress,\n        abi: config.factoryInfo?.abi\n      },\n      accountInfo: {\n        execute: config.accountInfo?.execute || this.defaultAccountInfo().execute,\n        getNonce: config.accountInfo?.getNonce || this.defaultAccountInfo().getNonce,\n        abi: config.accountInfo?.abi\n      },\n      clientId: config.clientId,\n      secretKey: config.secretKey,\n      erc20PaymasterAddress: config.erc20PaymasterAddress,\n      erc20TokenAddress: config.erc20TokenAddress\n    };\n    this.personalWallet = params.personalWallet;\n    const accountApi = new AccountAPI(providerConfig, originalProvider);\n    this.aaProvider = create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\n    this.accountApi = accountApi;\n  }\n  async connect(connectionArgs) {\n    await this.initialize(connectionArgs);\n    return await this.getAddress();\n  }\n  getProvider() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider);\n  }\n  async getSigner() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider.getSigner());\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const address = await this.getAddress();\n      return !!address;\n    } catch (e) {\n      return false;\n    }\n  }\n  async disconnect() {\n    this.personalWallet = undefined;\n    this.aaProvider = undefined;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const currentChainId = (await provider.getNetwork()).chainId;\n    if (currentChainId !== chainId) {\n      // only throw if actually trying to switch chains\n      throw new Error(\"Not supported.\");\n    }\n  }\n  setupListeners() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {}\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction - The transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const accountContract = await this.getAccountContract();\n    const signer = await this.getSigner();\n    const signerAddress = await signer.getAddress();\n    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers.utils.getAddress(item.signer) === ethers.utils.getAddress(signerAddress))[0]?.permissions;\n    if (!restrictions) {\n      return false;\n    }\n    return restrictions.approvedCallTargets.includes(transaction.getTarget());\n  }\n\n  /// PREPARED TRANSACTIONS\n\n  /**\n   * Send a single transaction without waiting for confirmations\n   * @param transaction - the transaction to send\n   * @param config - optional the transaction configuration\n   * @returns The awaitable transaction\n   */\n  async send(transaction, options) {\n    const signer = await this.getSigner();\n    return signer.sendTransaction({\n      to: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    }, options);\n  }\n\n  /**\n   * Execute a single transaction (waiting for confirmations)\n   * @param transaction - The transaction to execute\n   * @returns The transaction receipt\n   */\n  async execute(transaction, options) {\n    const tx = await this.send(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions - The transactions to execute\n   * @returns The transaction receipt\n   */\n  async executeBatch(transactions, options) {\n    const tx = await this.sendBatch(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// RAW TRANSACTIONS\n\n  async sendRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    return signer.sendTransaction(transaction, options);\n  }\n  async executeRaw(transaction, options) {\n    const tx = await this.sendRaw(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const batch = await this.prepareBatchRaw(transactions);\n    return signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: batch.tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData: batch.batchData // batched tx flag\n    });\n  }\n  async executeBatchRaw(transactions, options) {\n    const tx = await this.sendBatchRaw(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// ESTIMATION\n\n  async estimate(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return this.estimateTx({\n      target: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue(),\n      gasLimit: await transaction.getOverrides().gasLimit,\n      maxFeePerGas: await transaction.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await transaction.getOverrides().maxPriorityFeePerGas,\n      nonce: await transaction.getOverrides().nonce\n    }, options);\n  }\n  async estimateRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    return this.estimateTx({\n      target: tx.to || constants.AddressZero,\n      data: tx.data?.toString() || \"\",\n      value: tx.value || BigNumber.from(0),\n      gasLimit: tx.gasLimit,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas,\n      nonce: tx.nonce\n    }, options);\n  }\n  async estimateBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n  async estimateBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchRaw(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  //// DEPLOYMENT\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns The transaction receipt\n   */\n  async deploy(options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const tx = await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: \"0x\"\n    }, {\n      ...options,\n      batchData: {\n        targets: [],\n        data: [],\n        values: []\n      } // batched tx flag to avoid hitting the Router fallback method\n    });\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return await this.accountApi.isAcountDeployed();\n  }\n  async deployIfNeeded(options) {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      await this.deploy(options);\n    }\n  }\n\n  //// PERMISSIONS\n\n  async grantPermissions(target, permissions) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantPermissions(target, permissions);\n  }\n  async revokePermissions(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAccess(target);\n  }\n  async addAdmin(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantAdminPermissions(target);\n  }\n  async removeAdmin(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAdminPermissions(target);\n  }\n  async getAllActiveSigners() {\n    const isDeployed = await this.isDeployed();\n    if (isDeployed) {\n      const accountContract = await this.getAccountContract();\n      return accountContract.account.getAllAdminsAndSigners();\n    } else {\n      const personalWallet = await this.personalWallet?.getSigner();\n      if (!personalWallet) {\n        throw new Error(\"Personal wallet not connected\");\n      }\n      return [{\n        isAdmin: true,\n        signer: await personalWallet.getAddress(),\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      }];\n    }\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns The account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    // getting a new instance everytime\n    // to avoid caching issues pre/post deployment\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.accountInfo?.abi) {\n      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\n    } else {\n      return sdk.getContract(await this.getAddress(), ACCOUNT_CORE_ABI);\n    }\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns The account factory contract.\n   */\n  async getFactoryContract() {\n    if (!this.config.factoryAddress) {\n      throw new Error(\"Factory address not set!\");\n    }\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.factoryInfo?.abi) {\n      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\n    }\n    return sdk.getContract(this.config.factoryAddress);\n  }\n  defaultFactoryInfo() {\n    return {\n      createAccount: async (factory, owner) => {\n        return factory.prepare(\"createAccount\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async (factory, owner) => {\n        return await factory.call(\"getAddress\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      }\n    };\n  }\n  defaultAccountInfo() {\n    return {\n      execute: async (account, target, value, data) => {\n        return account.prepare(\"execute\", [target, value, data]);\n      },\n      getNonce: async account => {\n        return account.call(\"getNonce\", []);\n      }\n    };\n  }\n\n  /// PRIVATE METHODS\n\n  async estimateTx(tx, options) {\n    if (!this.accountApi || !this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    let deployGasLimit = BigNumber.from(0);\n    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);\n    if (!isDeployed) {\n      deployGasLimit = await this.estimateDeploymentGasLimit();\n    }\n    const [userOp, gasPrice] = await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient, tx, options), getGasPrice(provider)]);\n    const resolved = await utils.resolveProperties(userOp);\n    const transactionGasLimit = BigNumber.from(resolved.callGasLimit);\n    const transactionCost = transactionGasLimit.mul(gasPrice);\n    const deployCost = deployGasLimit.mul(gasPrice);\n    const totalCost = deployCost.add(transactionCost);\n    return {\n      ether: utils.formatEther(totalCost),\n      wei: totalCost,\n      details: {\n        deployGasLimit,\n        transactionGasLimit,\n        gasPrice,\n        transactionCost,\n        deployCost,\n        totalCost\n      }\n    };\n  }\n  async estimateDeploymentGasLimit() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const initCode = await this.accountApi.getInitCode();\n    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);\n    return BigNumber.from(verificationGasLimit).add(initGas);\n  }\n  async prepareBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers.utils.resolveProperties(transaction)));\n    const targets = resolvedTxs.map(tx => tx.to || constants.AddressZero);\n    const data = resolvedTxs.map(tx => tx.data || \"0x\");\n    const values = resolvedTxs.map(tx => tx.value || BigNumber.from(0));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n  async prepareBatchTx(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const targets = transactions.map(tx => tx.getTarget());\n    const data = transactions.map(tx => tx.encode());\n    const values = await Promise.all(transactions.map(tx => tx.getValue()));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n}\n\nexport { SmartWalletConnector };\n"],
  "mappings": "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",
  "names": ["import_dist", "tx", "lib_exports"]
}
