{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/thirdweb-dev-sdk.browser.esm.js", "../../@thirdweb-dev/sdk/dist/sdk-3e21fc5c.browser.esm.js", "../../@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json", "../../@thirdweb-dev/generated-abis/dist/thirdweb-dev-generated-abis.esm.js", "../../@thirdweb-dev/contracts-js/dist/abis/TWFactory.json", "../../@thirdweb-dev/sdk/dist/getStatus-7ee3964f.browser.esm.js", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/exports/thirdweb.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/client/client.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/client-id.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/hashing/sha256.ts", "../../@thirdweb-dev/sdk/node_modules/@noble/hashes/src/sha256.ts", "../../@thirdweb-dev/sdk/node_modules/@noble/hashes/src/_md.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/rpc/actions/eth_getBalance.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/rpc/actions/eth_getBlockByHash.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/rpc/actions/eth_getLogs.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/rpc/actions/eth_getStorageAt.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/rpc/actions/eth_getTransactionByHash.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/rpc/actions/eth_sendRawTransaction.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/prepare-transaction.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/types.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/prepare-contract-call.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/resolve-method.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/actions/estimate-gas-cost.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/chains/constants.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/chains/chain-definitions/base-sepolia.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/chains/chain-definitions/base.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/chains/chain-definitions/optimism-sepolia.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/chains/chain-definitions/optimism.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/chains/chain-definitions/zora-sepolia.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/chains/chain-definitions/zora.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/actions/send-transaction.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/actions/send-and-confirm-transaction.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/actions/send-batch-transaction.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/actions/simulate.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/actions/sign-transaction.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/signatures/sign.ts", "../../@thirdweb-dev/sdk/node_modules/@noble/curves/src/secp256k1.ts", "../../@thirdweb-dev/sdk/node_modules/@noble/curves/src/abstract/modular.ts", "../../@thirdweb-dev/sdk/node_modules/@noble/curves/src/abstract/utils.ts", "../../@thirdweb-dev/sdk/node_modules/@noble/curves/src/abstract/weierstrass.ts", "../../@thirdweb-dev/sdk/node_modules/@noble/curves/src/abstract/curve.ts", "../../@thirdweb-dev/sdk/node_modules/@noble/curves/src/abstract/hash-to-curve.ts", "../../@thirdweb-dev/sdk/node_modules/@noble/curves/src/_shortw_utils.ts", "../../@thirdweb-dev/sdk/node_modules/@noble/hashes/src/hmac.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/serialize-transaction.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/encoding/helpers/trim.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/event/prepare-event.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/event/utils.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/event/actions/get-events.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/event/actions/parse-logs.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/event/actions/watch-events.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/retry.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/pay/buyWithCrypto/getQuote.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/extensions/erc20/write/approve.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/extensions/erc20/__generated__/IERC20/write/approve.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/promise/once.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/pay/utils/definitions.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/pay/buyWithCrypto/getStatus.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/pay/buyWithCrypto/getHistory.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/encoding/helpers/concat-hex.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/encoding/from-bytes.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/exports/pay.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/pay/buyWithFiat/getQuote.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/pay/buyWithFiat/getStatus.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/pay/buyWithFiat/getHistory.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/pay/buyWithFiat/getPostOnRampQuote.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/pay/getBuyHistory.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/pay/buyWithFiat/isSwapRequiredPostOnramp.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/exports/utils.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/bytecode/extractMnimalProxyImplementationAddress.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/bytecode/is-contract-deployed.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/bytecode/resolveImplementation.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/contract/deployment/utils/create-2-factory.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/any-evm/is-eip155-enforced.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/any-evm/keyless-transaction.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/any-evm/compute-deployment-address.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/any-evm/get-salt-hash.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/any-evm/keccak-id.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/any-evm/get-init-bytecode-with-salt.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/signatures/resolve-signature.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/signatures/signature-to-hex.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/signatures/sign-message.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/hashing/hashMessage.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/signatures/sign-typed-data.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/signatures/helpers/parseTypedData.ts", "../../@thirdweb-dev/sdk/dist/watchTransactions-95d1cc2b.browser.esm.js"],
  "sourcesContent": ["export { A as APPROVED_IMPLEMENTATIONS, a as ContractDeployer, C as ContractVerifier, L as LOCAL_NODE_PKEY, S as SUPPORTED_CHAIN_IDS, T as ThirdwebSDK, U as UserWallet, c as checkClientIdOrSecretKey, f as checkVerificationStatus, h as computeCloneFactoryAddress, t as convertParamValues, l as deployCreate2Factory, m as directDeployDeterministic, o as directDeployDeterministicPublished, n as directDeployDeterministicWithUri, e as extractFunctionParamsFromAbi, b as getAllDetectedExtensionNames, g as getAllDetectedFeatureNames, x as getApprovedImplementation, y as getDefaultTrustedForwarders, u as getDeployArguments, k as getEncodedConstructorParamsForThirdwebContract, j as getThirdwebContractAddress, w as getTrustedForwarders, i as isVerifiedOnEtherscan, q as predictAddressDeterministic, s as predictAddressDeterministicPublished, r as predictAddressDeterministicWithUri, p as predictThirdwebContractAddress, d as verify, v as verifyThirdwebPrebuiltImplementation } from './sdk-3e21fc5c.browser.esm.js';\nexport { G as ALL_ROLES, bi as AbiObjectSchema, bj as AbiSchema, bh as AbiTypeSchema, b9 as AddressOrEnsSchema, b8 as AddressSchema, v as AdminRoleMissingError, A as AssetNotFoundError, t as AuctionAlreadyStartedError, w as AuctionHasNotEndedError, bc as BYOCContractMetadataSchema, b5 as BigNumberSchema, b7 as BigNumberTransformSchema, b6 as BigNumberishSchema, aq as COMMON_FACTORY, C as CONTRACTS_MAP, aO as CONTRACT_ADDRESSES, ao as CREATE2_FACTORY_BYTECODE, ba as CallOverrideSchema, aS as ChainId, bm as ChainIdToAddressSchema, bE as CommonContractOutputSchema, bD as CommonContractSchema, bH as CommonPlatformFeeSchema, bG as CommonPrimarySaleSchema, bF as CommonRoyaltySchema, bJ as CommonSymbolSchema, bI as CommonTrustedForwarderSchema, bB as CompilerMetadataFetchedSchema, bk as CompilerTypeInput, bA as ContractInfoSchema, bf as CustomContractDeploy, bd as CustomContractInput, be as CustomContractOutput, bg as CustomContractSchema, bn as CustomFactoryInput, at as DEPLOYER_ABI, as as DEPLOYER_BYTECODE, bq as DeployTypeInput, bs as DeploymentNetworkInput, bW as DropErc1155ContractDeploy, bU as DropErc1155ContractInput, bV as DropErc1155ContractOutput, bX as DropErc1155ContractSchema, bS as DropErc721ContractDeploy, bQ as DropErc721ContractInput, bR as DropErc721ContractOutput, bT as DropErc721ContractSchema, D as DuplicateFileNameError, s as DuplicateLeafsError, E as EditionDropInitializer, a as EditionInitializer, aZ as EventType, x as ExtensionNotImplementedError, bt as ExtraPublishMetadataSchemaInput, bu as ExtraPublishMetadataSchemaOutput, bp as FactoryDeploymentSchema, r as FetchError, F as FileNameMissingError, bv as FullPublishMetadataSchemaInput, bw as FullPublishMetadataSchemaOutput, u as FunctionDeprecatedError, ar as GAS_LIMIT_FOR_DEPLOYER, I as InvalidAddressError, aY as LINK_TOKEN_ADDRESS, L as ListingNotFoundError, b_ as MarketplaceContractDeploy, bY as MarketplaceContractInput, bZ as MarketplaceContractOutput, b$ as MarketplaceContractSchema, M as MarketplaceInitializer, b as MarketplaceV3Initializer, bK as MerkleSchema, q as MissingOwnerRoleError, o as MissingRoleError, bo as ModularFactoryInput, c as MultiwrapInitializer, aW as NATIVE_TOKENS, aV as NATIVE_TOKEN_ADDRESS, N as NFTCollectionInitializer, d as NFTDropInitializer, p as NotEnoughTokensError, n as NotFoundError, aN as OZ_DEFENDER_FORWARDER_ADDRESS, i as PREBUILT_CONTRACTS_APPURI_MAP, h as PREBUILT_CONTRACTS_MAP, c2 as PackContractDeploy, c0 as PackContractInput, c1 as PackContractOutput, c3 as PackContractSchema, P as PackInitializer, bl as PreDeployMetadata, bC as PreDeployMetadataFetchedSchema, bx as ProfileSchemaInput, by as ProfileSchemaOutput, cq as ProposalOutputSchema, bz as PublishedContractSchema, Q as QuantityAboveLimitError, R as RestrictedTransferError, br as RouterTypeInput, bb as SDKOptionsSchema, ap as SIGNATURE, b4 as SUPPORTED_FEATURES, e as SignatureDropInitializer, bL as SnapshotEntryInput, bN as SnapshotEntryWithProofSchema, bP as SnapshotInfoSchema, bM as SnapshotInputSchema, bO as SnapshotSchema, f as SplitInitializer, c6 as SplitsContractDeploy, c4 as SplitsContractInput, c5 as SplitsContractOutput, c7 as SplitsContractSchema, S as StaticJsonRpcBatchProvider, aH as THIRDWEB_DEPLOYER, T as TokenDropInitializer, ci as TokenErc1155ContractDeploy, cg as TokenErc1155ContractInput, ch as TokenErc1155ContractOutput, cj as TokenErc1155ContractSchema, ca as TokenErc20ContractDeploy, c8 as TokenErc20ContractInput, c9 as TokenErc20ContractOutput, cb as TokenErc20ContractSchema, ce as TokenErc721ContractDeploy, cc as TokenErc721ContractInput, cd as TokenErc721ContractOutput, cf as TokenErc721ContractSchema, g as TokenInitializer, y as TransactionError, U as UploadError, co as VoteContractDeploy, cm as VoteContractInput, cn as VoteContractOutput, cp as VoteContractSchema, V as VoteInitializer, ck as VoteSettingsInputSchema, cl as VoteSettingsOuputSchema, W as WrongListingTypeError, ax as computeCreate2FactoryTransaction, aA as computeDeploymentAddress, aE as computeDeploymentInfo, aB as computeEOAForwarderAddress, aC as computeForwarderAddress, af as constructAbiFromBytecode, ab as detectFeatures, ac as detectFeaturesFromBytecode, aF as encodeConstructorParamsForImplementation, a0 as extractCommentFromMetadata, a1 as extractConstructorParamsFromAbi, a2 as extractFunctionsFromAbi, a7 as extractIPFSHashFromBytecode, a3 as extractMinimalProxyImplementationAddress, X as fetchAbiFromAddress, aJ as fetchAndCacheDeployMetadata, Y as fetchContractMetadata, K as fetchContractMetadataFromAddress, O as fetchContractMetadataFromBytecode, aa as fetchExtendedReleaseMetadata, a9 as fetchPreDeployMetadata, aI as fetchPublishedContractFromPolygon, a8 as fetchRawPredeployMetadata, Z as formatCompilerMetadata, ag as getAllDetectedExtensions, ae as getAllDetectedExtensionsFromBytecode, ad as getAllDetectedFeatures, a$ as getChainIdFromNetwork, b0 as getChainIdOrName, a_ as getChainProvider, ak as getCompositeABI, aP as getContractAddressByChainId, J as getContractMetadataFromCache, k as getContractName, aQ as getContractPublisherAddress, j as getContractTypeForRemoteName, aw as getCreate2FactoryAddress, aG as getCreate2FactoryDeploymentInfo, az as getInitBytecodeWithSalt, aD as getKeylessTxn, aR as getMultichainRegistryAddress, aX as getNativeTokenByChainId, b2 as getProviderFromRpcUrl, H as getRoleHash, ay as getSaltHash, b3 as getSignerAndProvider, aU as getSupportedChains, _ as hasMatchingAbi, B as includesErrorMessage, b1 as isChainConfig, au as isContractDeployed, an as isDowngradeVersion, av as isEIP155Enforced, ai as isExtensionEnabled, ah as isFeatureEnabled, am as isIncrementalVersion, l as isProvider, m as isSigner, aj as joinABIs, $ as matchesAbiFromBytecode, z as parseRevertReason, aL as resolveAddress, a5 as resolveContractUriAndBytecode, a4 as resolveContractUriFromAddress, aK as resolveEns, a6 as resolveImplementation, aT as setSupportedChains, aM as signTypedDataInternal, al as toSemver } from './index-33cd3415.browser.esm.js';\nexport { C as ContractEncoder, f as fetchCurrencyMetadata, a as fetchCurrencyValue, i as isNativeToken } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nexport { c as cleanCurrencyAddress } from './cleanCurrencyAddress-ded19cfe.browser.esm.js';\nexport { n as normalizePriceValue } from './normalizePriceValue-9851c0eb.browser.esm.js';\nexport { s as setErc20Allowance } from './setErc20Allowance-7f76f677.browser.esm.js';\nexport { B as BaseSignaturePayloadInput, j as ClaimConditionInputArray, i as ClaimConditionInputSchema, e as ClaimConditionMetadataSchema, k as ClaimConditionOutputSchema, C as ClaimEligibility, l as CurrencySchema, m as CurrencyValueSchema, G as GenericRequest, w as MintRequest1155, M as MintRequest20, v as MintRequest721, x as MintRequest721withQuantity, P as PartialClaimConditionInputSchema, q as Signature1155PayloadInput, r as Signature1155PayloadInputWithTokenId, s as Signature1155PayloadOutput, S as Signature20PayloadInput, n as Signature20PayloadOutput, o as Signature721PayloadInput, p as Signature721PayloadOutput, t as Signature721WithQuantityInput, u as Signature721WithQuantityOutput, a as approveErc20Allowance, c as convertToReadableQuantity, d as createMerkleTreeFromAllowList, b as createSnapshot, f as fetchSnapshotEntryForAddress, g as getProofsForAllowListEntry, h as hashAllowListEntry } from './signature-d3ea643d.browser.esm.js';\nexport { h as hasERC20Allowance } from './hasERC20Allowance-654a940b.browser.esm.js';\nexport { E as Erc20, a as Erc20SignatureMintable, n as normalizeAmount } from './erc-20-9a18a51c.browser.esm.js';\nexport { b as ContractAppURI, a as ContractEvents, C as ContractMetadata, G as GasCostEstimator, d as detectContractFeature, h as hasFunction, t as toEther } from './contract-appuri-5c40af52.browser.esm.js';\nexport { E as Erc721, a as Erc721WithQuantitySignatureMintable, t as toWei } from './erc-721-27306550.browser.esm.js';\nexport { k as EditionMetadataInputOrUriSchema, j as EditionMetadataInputSchema, E as EditionMetadataOutputSchema, i as EditionMetadataWithOwnerOutputSchema, O as OptionalPropertiesInput, P as ProposalState, T as TokenMintInputSchema, e as compatibleExtensions, f as computeNativeTokenAddress, h as deployContractDeterministicRaw, b as getBuyWithCryptoHistory, c as getBuyWithCryptoQuote, d as getBuyWithCryptoStatus, g as getCachedAbiForContract, m as matchesPrebuiltAbi, a as toDisplayValue, t as toUnits } from './getStatus-7ee3964f.browser.esm.js';\nexport { c as getBlock, d as getBlockNumber, e as getBlockWithTransactions, b as getChainId, g as getContract, a as getContractFromAbi, w as watchBlock, f as watchBlockNumber, h as watchBlockWithTransactions, i as watchTransactions } from './watchTransactions-95d1cc2b.browser.esm.js';\nexport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nexport { a as ContractOwner, C as ContractRoyalty, D as DelayedReveal } from './contract-owner-49e75547.browser.esm.js';\nexport { C as ContractPrimarySale } from './contract-sales-918c7cb8.browser.esm.js';\nexport { D as DropClaimConditions } from './drop-claim-conditions-e6f2abbf.browser.esm.js';\nexport { D as DropErc1155ClaimConditions, E as Erc1155, a as Erc1155SignatureMintable } from './erc-1155-7ce9bee1.browser.esm.js';\nexport { A as Account, a as AccountFactory, f as AdminFlag, d as Airdrop1155, b as Airdrop20, c as Airdrop721, C as ContractPublishedMetadata, D as DEFAULT_PERMISSIONS, E as ExtensionManager, P as PermissionSnapshotSchema, h as SignerPermissionRequest, g as SignerPermissionRequestV1, S as SignerPermissionsSchema, e as extractEventsFromAbi } from './airdrop-erc1155-f9016b81.browser.esm.js';\nexport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nexport { C as ContractPlatformFee } from './contract-platform-fee-e756e68f.browser.esm.js';\nexport { D as DeployTransaction, T as Transaction, e as engineSendFunction, c as estimateTransactionCost, g as getDefaultGasOverrides, a as getDynamicFeeData, b as getGasPrice, d as getPolygonGasPriorityFee, p as prepareGaslessRequest } from './transactions-72f9603c.browser.esm.js';\nexport { M as MarketplaceV3DirectListings, a as MarketplaceV3EnglishAuctions, b as MarketplaceV3Offers, S as Status } from './marketplacev3-offers-ce1f096b.browser.esm.js';\nexport { e as extractConstructorParams, a as extractFunctions } from './contract-publisher-01e4eba8.browser.esm.js';\nexport { E as EndDateSchema, R as RawDateSchema, S as StartDateSchema, a as assertEnabled } from './assertEnabled-d1700f0b.browser.esm.js';\nexport { f as fetchSourceFilesFromMetadata } from './fetchSourceFilesFromMetadata-906c835e.browser.esm.js';\nexport { c as createTransactionBatches, d as deployContractDeterministic, a as deployWithThrowawayDeployer, e as estimateGasForDeploy, g as getDeploymentInfo } from './deployContractDeterministic-7823c15c.browser.esm.js';\nexport { a as InterfaceId_IERC1155, I as InterfaceId_IERC721 } from './QueryParams-32a56510.browser.esm.js';\nexport { L as ListingType } from './ListingType-cba090cb.browser.esm.js';\nexport { V as VoteType } from './Vote-3b66775c.browser.esm.js';\nexport { b as ERC1155WrappableSchema, E as ERC20WrappableSchema, a as ERC721WrappableSchema, d as PackMetadataInputSchema, c as PackRewardsOutputSchema, P as PackRewardsSchema } from './pack-29c3a58f.browser.esm.js';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport 'ethers';\nimport 'eventemitter3';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/generated-abis';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport 'zod';\nimport '@thirdweb-dev/crypto';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/merkletree';\nimport 'uuid';\nimport 'thirdweb';\nimport 'thirdweb/pay';\nimport 'thirdweb/utils';\nimport 'fast-deep-equal';\nimport './marketplace-e3129e2f.browser.esm.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\n\n/**\n * @internal\n */\nfunction getRpcUrl(network, clientId) {\n  return `https://${network}.rpc.thirdweb.com/${clientId || \"\"}`;\n}\n\n// handle browser vs node global\n\n// eslint-disable-next-line better-tree-shaking/no-top-level-side-effects\nglobalThis.global = globalThis;\n\nexport { getRpcUrl };\n", "import { a_ as getChainProvider, aI as fetchPublishedContractFromPolygon, aH as THIRDWEB_DEPLOYER$1, aJ as fetchAndCacheDeployMetadata, aw as getCreate2FactoryAddress, aF as encodeConstructorParamsForImplementation, aE as computeDeploymentInfo, au as isContractDeployed, a6 as resolveImplementation, K as fetchContractMetadataFromAddress, a1 as extractConstructorParamsFromAbi, a4 as resolveContractUriFromAddress, aQ as getContractPublisherAddress, aa as fetchExtendedReleaseMetadata, cr as RPCConnectionHandler, aL as resolveAddress, aM as signTypedDataInternal, aS as ChainId, cs as ContractWrapper, aV as NATIVE_TOKEN_ADDRESS, ct as extractFeatures, ab as detectFeatures, aR as getMultichainRegistryAddress, bj as AbiSchema, ax as computeCreate2FactoryTransaction, aO as CONTRACT_ADDRESSES, cu as AddressZero, P as PackInitializer, b as MarketplaceV3Initializer, M as MarketplaceInitializer, f as SplitInitializer, V as VoteInitializer, g as TokenInitializer, T as TokenDropInitializer, a as EditionInitializer, E as EditionDropInitializer, c as MultiwrapInitializer, e as SignatureDropInitializer, N as NFTCollectionInitializer, d as NFTDropInitializer, aC as computeForwarderAddress, h as PREBUILT_CONTRACTS_MAP, k as getContractName, bH as CommonPlatformFeeSchema, bG as CommonPrimarySaleSchema, bI as CommonTrustedForwarderSchema, bD as CommonContractSchema, bF as CommonRoyaltySchema, bJ as CommonSymbolSchema, aA as computeDeploymentAddress, az as getInitBytecodeWithSalt, aT as setSupportedChains, ak as getCompositeABI, j as getContractTypeForRemoteName, b3 as getSignerAndProvider, b1 as isChainConfig, aP as getContractAddressByChainId, cv as getProcessEnv, bT as DropErc721ContractSchema, i as PREBUILT_CONTRACTS_APPURI_MAP, aZ as EventType } from './index-33cd3415.browser.esm.js';\nimport { isBrowser, ThirdwebStorage } from '@thirdweb-dev/storage';\nimport { C as ContractPublisher } from './contract-publisher-01e4eba8.browser.esm.js';\nimport TWRegistryABI from '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport TWRegistryRouterABI from '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport { utils, Contract, Wallet, constants, BigNumber, ContractFactory as ContractFactory$1 } from 'ethers';\nimport { g as getDefaultGasOverrides, f as buildTransactionFunction, T as Transaction, h as buildDeployTransactionFunction, D as DeployTransaction } from './transactions-72f9603c.browser.esm.js';\nimport { i as isNativeToken, a as fetchCurrencyValue, C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport EventEmitter from 'eventemitter3';\nimport invariant from 'tiny-invariant';\nimport { n as normalizePriceValue } from './normalizePriceValue-9851c0eb.browser.esm.js';\nimport { defaultChains } from '@thirdweb-dev/chains';\nimport { GENERATED_ABI } from '@thirdweb-dev/generated-abis';\nimport { g as getDeploymentInfo, c as createTransactionBatches, a as deployWithThrowawayDeployer, d as deployContractDeterministic } from './deployContractDeterministic-7823c15c.browser.esm.js';\nimport { f as fetchSourceFilesFromMetadata } from './fetchSourceFilesFromMetadata-906c835e.browser.esm.js';\nimport TWFactoryAbi from '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\n\nlet alreadyChecked = false;\n\n/**\n * @internal\n */\nfunction checkClientIdOrSecretKey(message, clientId, secretKey) {\n  if (alreadyChecked) {\n    return;\n  }\n  alreadyChecked = true;\n  if (clientId || secretKey) {\n    return;\n  }\n  console.warn(message);\n}\n\n/**\n *\n * @internal\n * @param contractName - The name of the contract to predict the address for\n * @param chainId - The chain id to use\n * @param storage - The storage to use\n */\nasync function getEncodedConstructorParamsForThirdwebContract(contractName, chainId, storage) {\n  let contractVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\n  let clientId = arguments.length > 4 ? arguments[4] : undefined;\n  let secretKey = arguments.length > 5 ? arguments[5] : undefined;\n  let constructorParamMap = arguments.length > 6 ? arguments[6] : undefined;\n  const provider = getChainProvider(chainId, {\n    clientId,\n    secretKey\n  });\n  const publishedContract = await fetchPublishedContractFromPolygon(THIRDWEB_DEPLOYER$1, contractName, contractVersion, storage, clientId, secretKey);\n  const publishUri = publishedContract.metadataUri;\n  const metadata = await fetchAndCacheDeployMetadata(publishUri, storage);\n  const create2Factory = await getCreate2FactoryAddress(provider);\n  invariant(create2Factory, \"Thirdweb stack not found\");\n  const {\n    extendedMetadata\n  } = await fetchAndCacheDeployMetadata(publishUri, storage);\n  let encodedArgs;\n\n  // if pluginMetadata is not empty, then it's a plugin-pattern router contract\n  if (extendedMetadata?.routerType === \"plugin\" || extendedMetadata?.routerType === \"dynamic\") {\n    const deploymentInfo = await getDeploymentInfo(publishUri, storage, provider, create2Factory, clientId, secretKey);\n    encodedArgs = deploymentInfo.find(contract => contract.type === \"implementation\")?.encodedArgs;\n  } else {\n    encodedArgs = await encodeConstructorParamsForImplementation(metadata.compilerMetadata, provider, storage, create2Factory, constructorParamMap, clientId, secretKey);\n  }\n  return encodedArgs;\n}\n\n/**\n * @deploy\n * @public\n * @param contractName - The name of the contract to predict the address for\n * @param chainId - The chain id to use\n * @param storage - The storage to use\n */\nasync function predictThirdwebContractAddress(contractName, chainId, storage) {\n  let contractVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\n  let clientId = arguments.length > 4 ? arguments[4] : undefined;\n  let secretKey = arguments.length > 5 ? arguments[5] : undefined;\n  const provider = getChainProvider(chainId, {\n    clientId,\n    secretKey\n  });\n  const publishedContract = await fetchPublishedContractFromPolygon(THIRDWEB_DEPLOYER$1, contractName, contractVersion, storage, clientId, secretKey);\n  const publishUri = publishedContract.metadataUri;\n  const create2Factory = await getCreate2FactoryAddress(provider);\n  invariant(create2Factory, \"Thirdweb stack not found\");\n  const {\n    extendedMetadata\n  } = await fetchAndCacheDeployMetadata(publishUri, storage);\n  if (extendedMetadata?.routerType === \"plugin\" || extendedMetadata?.routerType === \"dynamic\") {\n    const deploymentInfo = await getDeploymentInfo(publishUri, storage, provider, create2Factory, clientId, secretKey);\n    const implementation = deploymentInfo.find(contract => contract.type === \"implementation\")?.transaction.predictedAddress;\n    invariant(implementation, \"Error computing address for plugin router\");\n    return implementation;\n  }\n  const implementation = await computeDeploymentInfo(\"implementation\", provider, storage, create2Factory, {\n    contractName: contractName\n  }, clientId, secretKey);\n  return implementation.transaction.predictedAddress;\n}\n\n/**\n * @deploy\n * @public\n * @param contractName - The name of the contract to predict the address for\n * @param chainId - The chain id to use\n * @param storage - The storage to use\n * @param clientId - The client id to use\n */\nasync function getThirdwebContractAddress(contractName, chainId, storage) {\n  let contractVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\n  let clientId = arguments.length > 4 ? arguments[4] : undefined;\n  let secretKey = arguments.length > 5 ? arguments[5] : undefined;\n  const provider = getChainProvider(chainId, {\n    clientId: clientId,\n    secretKey: secretKey\n  });\n  const contractAddress = await predictThirdwebContractAddress(contractName, chainId, storage, contractVersion, clientId, secretKey);\n  const isDeployed = await isContractDeployed(contractAddress, provider);\n  invariant(isDeployed, \"Contract not deployed yet\");\n  return contractAddress;\n}\n\nconst VerificationStatus = {\n  FAILED: \"Fail - Unable to verify\",\n  SUCCESS: \"Pass - Verified\",\n  PENDING: \"Pending in queue\",\n  IN_PROGRESS: \"In progress\",\n  ALREADY_VERIFIED: \"Contract source code already verified\",\n  AUTOMATICALLY_VERIFIED: \"Already Verified\"\n};\n\nconst RequestStatus = {\n  OK: \"1\",\n  NOTOK: \"0\"\n};\n\n//\n// ==================================\n// ======== Core Functions ==========\n// ==================================\n//\n\n/**\n * @public\n *\n * Verifies a Thirdweb Prebuilt Contract, e.g. Marketplace, DropERC721, etc\n *\n * @example\n * ```javascript\n *\n * const explorerAPIUrl = \"\" // e.g. https://api.etherscan.io/api\n * const explorerAPIKey = \"\" // Generate API key on the explorer\n * const chainId = 1 // Change according to the network\n *\n * await sdk.verifier.verifyThirdwebPrebuiltImplementation(\n *   \"DropERC721\",\n *   chainId,\n *   explorerAPIUrl,\n *   explorerAPIKey,\n *   storage // this could be used from the SDK instance, e.g. sdk.storage\n * );\n * ```\n * @param contractName - Name of the contract to verify\n * @param chainId - Chain ID of the network\n * @param explorerAPIUrl - Explorer API URL\n * @param explorerAPIKey - Explorer API Key\n * @param storage - Storage instance\n */\nasync function verifyThirdwebPrebuiltImplementation(contractName, chainId, explorerAPIUrl, explorerAPIKey, storage) {\n  let contractVersion = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"latest\";\n  let clientId = arguments.length > 6 ? arguments[6] : undefined;\n  let secretKey = arguments.length > 7 ? arguments[7] : undefined;\n  let constructorArgs = arguments.length > 8 ? arguments[8] : undefined;\n  const contractAddress = await getThirdwebContractAddress(contractName, chainId, storage, contractVersion, clientId, secretKey);\n  const encodedArgs = await getEncodedConstructorParamsForThirdwebContract(contractName, chainId, storage, contractVersion, clientId, secretKey, constructorArgs);\n  console.info(`Verifying ${contractName} at address ${contractAddress}`);\n  const guid = await verify(contractAddress, chainId, explorerAPIUrl, explorerAPIKey, storage, encodedArgs?.toString().replace(\"0x\", \"\"));\n  return guid;\n}\n\n/**\n * @public\n *\n * Verifies any contract\n *\n * @example\n * ```javascript\n *\n * const contractAddress = \"\"\n * const explorerAPIUrl = \"\" // e.g. https://api.etherscan.io/api\n * const explorerAPIKey = \"\" // Generate API key on the explorer\n * const chainId = 1 // Change according to the network\n *\n * await sdk.verifier.verify(\n *   contractAddress,\n *   chainId,\n *   explorerAPIUrl,\n *   explorerAPIKey,\n *   storage // this could be used from the SDK instance, e.g. sdk.storage\n * );\n * ```\n * @param contractAddress - Address of the contract to verify\n * @param chainId - Chain ID of the network\n * @param explorerAPIUrl - Explorer API URL\n * @param explorerAPIKey - Explorer API Key\n * @param storage - Storage instance\n */\nasync function verify(contractAddress, chainId, explorerAPIUrl, explorerAPIKey, storage, encodedConstructorArgs) {\n  try {\n    const provider = getChainProvider(chainId, {});\n    contractAddress = (await resolveImplementation(contractAddress, provider)).address;\n    const compilerMetadata = await fetchContractMetadataFromAddress(contractAddress, provider, storage);\n    const compilerVersion = compilerMetadata.metadata.compiler.version;\n    const sources = await fetchSourceFilesFromMetadata(compilerMetadata, storage);\n    const sourcesWithUrl = compilerMetadata.metadata.sources;\n    const sourcesWithContents = {};\n    for (const path of Object.keys(sourcesWithUrl)) {\n      const sourceCode = sources.find(source => path === source.filename);\n      if (!sourceCode) {\n        throw new Error(`Could not find source file for ${path}`);\n      }\n      sourcesWithContents[path] = {\n        content: sourceCode.source\n      };\n    }\n    const compilerInput = {\n      language: \"Solidity\",\n      sources: sourcesWithContents,\n      settings: {\n        optimizer: compilerMetadata.metadata.settings.optimizer,\n        evmVersion: compilerMetadata.metadata.settings.evmVersion,\n        remappings: compilerMetadata.metadata.settings.remappings,\n        outputSelection: {\n          \"*\": {\n            \"*\": [\"abi\", \"evm.bytecode\", \"evm.deployedBytecode\", \"evm.methodIdentifiers\", \"metadata\"],\n            \"\": [\"ast\"]\n          }\n        }\n      }\n    };\n    const compilationTarget = compilerMetadata.metadata.settings.compilationTarget;\n    const targets = Object.keys(compilationTarget);\n    const contractPath = targets[0];\n    const encodedArgs = encodedConstructorArgs ? encodedConstructorArgs : await fetchConstructorParams(explorerAPIUrl, explorerAPIKey, contractAddress, compilerMetadata.abi, provider, storage);\n    const requestBody = {\n      apikey: explorerAPIKey,\n      module: \"contract\",\n      action: \"verifysourcecode\",\n      contractaddress: contractAddress,\n      sourceCode: JSON.stringify(compilerInput),\n      codeformat: \"solidity-standard-json-input\",\n      contractname: `${contractPath}:${compilerMetadata.name}`,\n      compilerversion: `v${compilerVersion}`,\n      constructorArguements: encodedArgs\n    };\n    const parameters = new URLSearchParams({\n      ...requestBody\n    });\n    const result = await fetch(explorerAPIUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: parameters.toString()\n    });\n    const data = await result.json();\n    if (data.status === RequestStatus.OK) {\n      return data.result;\n    } else {\n      throw new Error(`${data.result}`);\n    }\n  } catch (e) {\n    throw new Error(e.toString());\n  }\n}\n\n//\n// ==================================\n// ======== Helper Functions ========\n// ==================================\n//\n\n/**\n * @internal\n *\n * Check status of the contract submitted for verification to the explorer\n * @param explorerAPIUrl - Explorer API URL\n * @param explorerAPIKey - Explorer API Key\n * @param guid - GUID of the contract verification\n */\nasync function checkVerificationStatus(explorerAPIUrl, explorerAPIKey, guid) {\n  const endpoint = `${explorerAPIUrl}?module=contract&action=checkverifystatus&guid=${guid}&apikey=${explorerAPIKey}\"`;\n  return new Promise((resolve, reject) => {\n    const intervalId = setInterval(async () => {\n      try {\n        const result = await fetch(endpoint, {\n          method: \"GET\"\n        });\n        const data = await result.json();\n        if (data?.result !== VerificationStatus.PENDING && data?.result !== VerificationStatus.IN_PROGRESS) {\n          clearInterval(intervalId);\n          resolve(data);\n        }\n      } catch (e) {\n        clearInterval(intervalId);\n        reject(e);\n      }\n    }, 3000);\n  });\n}\n\n/**\n * @internal\n *\n * Check if the contract is already verified on etherscan\n * @param contractAddress - Address of the contract to verify\n * @param chainId - Chain ID of the network\n * @param explorerAPIUrl - Explorer API URL\n * @param explorerAPIKey - Explorer API Key\n *\n * @param clientId - Client ID: Get from https://thirdweb.com/create-api-key\n */\nasync function isVerifiedOnEtherscan(contractAddress, chainId, explorerAPIUrl, explorerAPIKey, clientId) {\n  const provider = getChainProvider(chainId, {\n    clientId\n  });\n  invariant(await isContractDeployed(contractAddress, provider), \"Contract not deployed yet.\");\n  const endpoint = `${explorerAPIUrl}?module=contract&action=getsourcecode&address=${contractAddress}&apikey=${explorerAPIKey}\"`;\n  try {\n    const result = await fetch(endpoint, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json;charset=UTF-8\"\n      }\n    });\n    const data = await result.json();\n    const etherscanResult = data.result[0];\n    if (etherscanResult.ABI === \"Contract source code not verified\") {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    throw new Error(`Error checking verification for contract ${contractAddress}: ${e}`);\n  }\n}\n\n/**\n * @internal\n *\n * Fetch the deploy transaction from the given contract address and extract the encoded constructor parameters\n * @param explorerAPIUrl - Explorer API URL\n * @param explorerAPIKey - Explorer API Key\n * @param contractAddress - Address of the contract to verify\n * @param abi - ABI of the contract to verify\n * @param provider - Provider instance\n * @param storage - Storage instance\n */\nasync function fetchConstructorParams(explorerAPIUrl, explorerAPIKey, contractAddress, abi, provider, storage) {\n  const constructorParamTypes = extractConstructorParamsFromAbi(abi);\n  if (constructorParamTypes.length === 0) {\n    return \"\";\n  }\n  const result = await fetch(`${explorerAPIUrl}?module=contract&action=getcontractcreation&contractaddresses=${contractAddress}&apikey=${explorerAPIKey}`);\n  const data = await result.json();\n  if (data && data.status === RequestStatus.OK && data.result[0] !== undefined) {\n    const contract = new utils.Interface(abi);\n    const txHash = data.result[0].txHash;\n    let constructorArgs = \"\";\n    if (contract.deploy.inputs.length === 0) {\n      return \"\";\n    }\n    const tx = await provider.getTransaction(txHash);\n    const txDeployBytecode = tx.data;\n\n    // first: attempt to get it from Publish\n    try {\n      const bytecode = await fetchDeployBytecodeFromPublishedContractMetadata(contractAddress, provider, storage);\n      if (bytecode) {\n        // contract was realeased, use the deployable bytecode method (proper solution)\n        const bytecodeHex = bytecode.startsWith(\"0x\") ? bytecode : `0x${bytecode}`;\n        let create2FactoryAddress;\n        try {\n          create2FactoryAddress = await getCreate2FactoryAddress(provider);\n        } catch (error) {}\n\n        // if deterministic deploy through create2factory, remove salt length too\n        const create2SaltLength = tx.to === create2FactoryAddress ? 64 : 0;\n        constructorArgs = txDeployBytecode.substring(bytecodeHex.length + create2SaltLength);\n      }\n    } catch (e) {\n      // contracts not published through thirdweb\n    }\n\n    // second: attempt to decode it from solc metadata bytecode\n    if (!constructorArgs) {\n      // couldn't find bytecode from Publish, using regex to locate consturctor args thruogh solc metadata\n      // https://docs.soliditylang.org/en/v0.8.17/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode\n      // {6} = solc version\n      // {4} = 0033, but noticed some contracts have values other than 00 33. (uniswap)\n      const matches = [...txDeployBytecode.matchAll(/(64736f6c6343[\\w]{6}[\\w]{4})(?!.*\\1)(.*)$/g)];\n\n      // regex finds the LAST occurence of solc metadata bytes, result always in same position\n      if (matches.length > 0) {\n        // TODO: we currently don't handle error string embedded in the bytecode, need to strip ascii (upgradeableProxy) in patterns[2]\n        // https://etherscan.io/address/0xee6a57ec80ea46401049e92587e52f5ec1c24785#code\n        constructorArgs = matches[0][2];\n      }\n    }\n\n    // third: attempt to guess it from the ABI inputs\n    if (!constructorArgs) {\n      // TODO: need to guess array / struct properly\n      const constructorParamByteLength = constructorParamTypes.length * 64;\n      constructorArgs = txDeployBytecode.substring(txDeployBytecode.length - constructorParamByteLength);\n    }\n    try {\n      // sanity check that the constructor params are valid\n      // TODO: should we sanity check after each attempt?\n      utils.defaultAbiCoder.decode(contract.deploy.inputs, `0x${constructorArgs}`);\n    } catch (e) {\n      throw new Error(\"Verifying this contract requires it to be published. Run `npx thirdweb publish` to publish this contract, then try again.\");\n    }\n    return constructorArgs;\n  } else {\n    // Could not retrieve constructor parameters, using empty parameters as fallback\n    return \"\";\n  }\n}\n\n/**\n * @internal\n *\n * Fetches the Publish metadata on the ContractPublisher registry (on polygon) for the given contract address (on any chain)\n * @param contractAddress - Address of the contract to verify\n * @param provider - Provider instance\n * @param storage - Storage instance\n * @returns\n */\nasync function fetchDeployBytecodeFromPublishedContractMetadata(contractAddress, provider, storage) {\n  const compilerMetaUri = await resolveContractUriFromAddress(contractAddress, provider);\n  if (compilerMetaUri) {\n    const ContractPublisherAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json')).default;\n    const contract = new Contract(getContractPublisherAddress(), ContractPublisherAbi, getChainProvider(\"polygon\", {}));\n    const publishedMetadataUri = await contract.getPublishedUriFromCompilerUri(compilerMetaUri);\n    if (publishedMetadataUri.length === 0) {\n      throw Error(`Could not resolve published metadata URI from ${compilerMetaUri}`);\n    }\n    const pubmeta = await Promise.all(publishedMetadataUri.filter(uri => uri.length > 0).map(uri => fetchExtendedReleaseMetadata(uri, storage)));\n    return pubmeta.length > 0 ? await (await storage.download(pubmeta[0].bytecodeUri)).text() : undefined;\n  }\n  return undefined;\n}\n\n/**\n * Handles verification of new contracts on any EVM\n * @public\n */\nclass ContractVerifier extends RPCConnectionHandler {\n  constructor(network, options, storage) {\n    super(network, options);\n    this.storage = storage;\n  }\n  updateSignerOrProvider(network) {\n    super.updateSignerOrProvider(network);\n  }\n\n  /**\n   * Verifies a Thirdweb contract\n   *\n   * @example\n   * ```javascript\n   *\n   * // Note: If verifying on a network different from the SDK instance's network,\n   * //       update the verifier's chain/network as below:\n   * //\n   * //       sdk.verifier.updateSignerOrProvider(chainId);\n   *\n   * const explorerAPIUrl = \"\" // e.g. https://api.etherscan.io/api\n   * const explorerAPIKey = \"\" // Generate API key on the explorer\n   *\n   * await sdk.verifier.verifyThirdwebContract(\n   *   \"DropERC721\",\n   *   explorerAPIUrl,\n   *   explorerAPIKey,\n   * );\n   * ```\n   * @param contractName - Name of the contract to verify\n   * @param explorerAPIUrl - Explorer API URL\n   * @param explorerAPIKey - Explorer API key\n   */\n  async verifyThirdwebContract(contractName, explorerAPIUrl, explorerAPIKey) {\n    let contractVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\n    let constructorArgs = arguments.length > 4 ? arguments[4] : undefined;\n    const chainId = (await this.getProvider().getNetwork()).chainId;\n    const guid = await verifyThirdwebPrebuiltImplementation(contractName, chainId, explorerAPIUrl, explorerAPIKey, this.storage, contractVersion, this.options.clientId, this.options.secretKey, constructorArgs);\n    console.info(\"Checking verification status...\");\n    const verificationStatus = await checkVerificationStatus(explorerAPIUrl, explorerAPIKey, guid);\n    console.info(verificationStatus);\n  }\n\n  /**\n   * Verifies any contract\n   *\n   * @example\n   * ```javascript\n   *\n   * // Note: If verifying on a network different from the SDK instance's network,\n   * //       update the verifier's chain/network as below:\n   * //\n   * //       sdk.verifier.updateSignerOrProvider(chainId);\n   *\n   * const contractAddress = \"\"\n   * const explorerAPIUrl = \"\" // e.g. https://api.etherscan.io/api\n   * const explorerAPIKey = \"\" // Generate API key on the explorer\n   *\n   * await sdk.verifier.verifyContract(\n   *   contractAddress,\n   *   explorerAPIUrl,\n   *   explorerAPIKey,\n   * );\n   * ```\n   * @param contractAddress - Address of the contract to verify\n   * @param explorerAPIUrl - Explorer API URL\n   * @param explorerAPIKey - Explorer API key\n   */\n  async verifyContract(contractAddress, explorerAPIUrl, explorerAPIKey, constructorArgs) {\n    const chainId = (await this.getProvider().getNetwork()).chainId;\n    let encodedArgs;\n    if (constructorArgs) {\n      const paramTypes = Object.values(constructorArgs).map(arg => {\n        invariant(arg.type, \"Param type is required\");\n        return arg.type;\n      });\n      const paramValues = Object.values(constructorArgs).map(arg => {\n        return arg.value;\n      });\n      encodedArgs = utils.defaultAbiCoder.encode(paramTypes, paramValues);\n    }\n    const guid = await verify(contractAddress, chainId, explorerAPIUrl, explorerAPIKey, this.storage, encodedArgs);\n    console.info(\"Checking verification status...\");\n    const verificationStatus = await checkVerificationStatus(explorerAPIUrl, explorerAPIKey, guid);\n    console.info(verificationStatus);\n  }\n}\n\n/**\n * publicly available wallet for local nodes\n */\nconst LOCAL_NODE_PKEY = \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\";\n\n/**\n *\n * {@link UserWallet} events that you can subscribe to using `sdk.wallet.events`.\n *\n * @public\n */\n\n/**\n * Connect and Interact with a user wallet\n * @example\n * ```javascript\n * const balance = await sdk.wallet.balance();\n * ```\n * @public\n */\nclass UserWallet {\n  events = new EventEmitter();\n  constructor(network, options, storage) {\n    this.connection = new RPCConnectionHandler(network, options);\n    this.options = options;\n    this.events = new EventEmitter();\n    this.storage = storage;\n  }\n\n  // TODO disconnect()\n  // TODO switchChain()\n  // TODO tokens()\n  // TODO NFTs()\n\n  // TODO this will become the source of truth of the signer and have every contract read from it\n  // TODO separate signer and provider logics\n  connect(network) {\n    this.connection.updateSignerOrProvider(network);\n    this.events.emit(\"signerChanged\", this.connection.getSigner());\n  }\n\n  /**\n   * Transfer native or ERC20 tokens from this wallet to another wallet\n   * @example\n   * ```javascript\n   *  // transfer 0.8 ETH\n   * await sdk.wallet.transfer(\"0x...\", 0.8);\n   *  // transfer 0.8 tokens of `tokenContractAddress`\n   * await sdk.wallet.transfer(\"0x...\", 0.8, tokenContractAddress);\n   * ```\n   * @param to - the account to send funds to\n   * @param amount - the amount in tokens\n   * @param currencyAddress - Optional - ERC20 contract address of the token to transfer\n   */\n  async transfer(to, amount) {\n    let currencyAddress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NATIVE_TOKEN_ADDRESS;\n    const [resolvedTo, resolvedCurrency, amountInWei] = await Promise.all([resolveAddress(to), resolveAddress(currencyAddress), normalizePriceValue(this.connection.getProvider(), amount, currencyAddress)]);\n    const signer = this.requireWallet();\n    if (isNativeToken(resolvedCurrency)) {\n      // native token transfer\n      const from = await signer.getAddress();\n      const gasOverrides = isBrowser() ? {} : await getDefaultGasOverrides(this.connection.getProvider());\n      const tx = await signer.sendTransaction({\n        from,\n        to: resolvedTo,\n        value: amountInWei,\n        ...gasOverrides\n      });\n      return {\n        receipt: await tx.wait()\n      };\n    } else {\n      // ERC20 token transfer\n      const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n      return {\n        receipt: await this.createErc20(resolvedCurrency, ERC20Abi).sendTransaction(\"transfer\", [resolvedTo, amountInWei])\n      };\n    }\n  }\n\n  /**\n   * Fetch the native or ERC20 token balance of this wallet\n   * @example\n   * ```javascript\n   * // native currency balance\n   * const balance = await sdk.wallet.balance();\n   * // ERC20 token balance\n   * const erc20balance = await sdk.wallet.balance(tokenContractAddress);\n   *\n   * ```\n   */\n  async balance() {\n    let currencyAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NATIVE_TOKEN_ADDRESS;\n    this.requireWallet();\n    const resolvedCurrency = await resolveAddress(currencyAddress);\n    const provider = this.connection.getProvider();\n    let balance;\n    if (isNativeToken(resolvedCurrency)) {\n      balance = await provider.getBalance(await this.getAddress());\n    } else {\n      const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n      balance = await this.createErc20(resolvedCurrency, ERC20Abi).read(\"balanceOf\", [await this.getAddress()]);\n    }\n    return await fetchCurrencyValue(provider, resolvedCurrency, balance);\n  }\n\n  /**\n   * Get the currently connected address\n   * @example\n   * ```javascript\n   * const address = await sdk.wallet.getAddress();\n   * ```\n   */\n  async getAddress() {\n    return await this.requireWallet().getAddress();\n  }\n\n  /**\n   * Get the currently connected wallet's chainId\n   * @internal\n   */\n  async getChainId() {\n    return await this.requireWallet().getChainId();\n  }\n\n  /**\n   * Get the number of transactions sent from this address.\n   * @param blockTag - Optional - the block tag to read the nonce from\n   */\n  async getNonce(blockTag) {\n    const txCount = await this.connection.getProvider().getTransactionCount(await this.getAddress(), blockTag);\n    return txCount;\n  }\n\n  /**\n   * Checks whether there's a signer connected with the SDK\n   * @internal\n   */\n  isConnected() {\n    try {\n      this.requireWallet();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Sign any message with the connected wallet private key\n   * @param message - the message to sign\n   * @returns The signed message\n   *\n   * @example\n   * ```javascript\n   * // This is the message to be signed\n   * const message = \"Sign this message...\";\n   *\n   * // Now we can sign the message with the connected wallet\n   * const signature = await sdk.wallet.sign(message);\n   * ```\n   */\n  async sign(message) {\n    const signer = this.requireWallet();\n    return await signer.signMessage(message);\n  }\n\n  /**\n   * Sign a typed data structure (EIP712) with the connected wallet private key\n   * @param domain - the domain as EIP712 standard\n   * @param types - the structure and data types as defined by the EIP712 standard\n   * @param message - the data to sign\n   * @returns The payload and its associated signature\n   *\n   * @example\n   * ```javascript\n   * // This is the message to be signed\n   * // Now we can sign the message with the connected wallet\n   * const { payload, signature } = await sdk.wallet.signTypedData(\n   *   {\n          name: \"MyEIP721Domain\",\n          version: \"1\",\n          chainId: 1,\n          verifyingContract: \"0x...\",\n        },\n        { MyStruct: [ { name: \"to\", type: \"address\" }, { name: \"quantity\", type: \"uint256\" } ] },\n        { to: \"0x...\", quantity: 1 },\n   * );\n   * ```\n   */\n  async signTypedData(domain, types, message) {\n    return await signTypedDataInternal(this.requireWallet(), domain, types, message);\n  }\n\n  /**\n   * Recover the signing address from a signed message\n   * @param message - the original message that was signed\n   * @param signature - the signature to recover the address from\n   * @returns The address that signed the message\n   *\n   * @example\n   * ```javascript\n   * const message = \"Sign this message...\";\n   * const signature = await sdk.wallet.sign(message);\n   *\n   * // Now we can recover the signing address\n   * const address = sdk.wallet.recoverAddress(message, signature);\n   * ```\n   */\n  recoverAddress(message, signature) {\n    const messageHash = utils.hashMessage(message);\n    const messageHashBytes = utils.arrayify(messageHash);\n    return utils.recoverAddress(messageHashBytes, signature);\n  }\n\n  /**\n   * Send a raw transaction to the blockchain from the connected wallet\n   * @param transactionRequest - raw transaction data to send to the blockchain\n   */\n  async sendRawTransaction(transactionRequest) {\n    const signer = this.requireWallet();\n    // set default gas values\n    const gasOverrides = isBrowser() ? {} : await getDefaultGasOverrides(this.connection.getProvider());\n    transactionRequest = {\n      ...gasOverrides,\n      ...transactionRequest\n    };\n    return signer.sendTransaction(transactionRequest);\n  }\n\n  /**\n   * Execute a raw transaction to the blockchain from the connected wallet and wait for it to be mined\n   * @param transactionRequest - raw transaction data to send to the blockchain\n   */\n  async executeRawTransaction(transactionRequest) {\n    const tx = await this.sendRawTransaction(transactionRequest);\n    return {\n      receipt: await tx.wait()\n    };\n  }\n\n  /**\n   * Request funds from a running local node to the currently connected wallet\n   * @param amount - the amount in native currency (in ETH) to request\n   */\n  async requestFunds(amount) {\n    const chainId = await this.getChainId();\n    if (chainId === ChainId.Localhost || chainId === ChainId.Hardhat) {\n      const localWallet = new UserWallet(new Wallet(LOCAL_NODE_PKEY, getChainProvider(chainId, this.options)), this.options, this.storage);\n      return localWallet.transfer(await this.getAddress(), amount);\n    } else {\n      throw new Error(`Requesting funds is not supported on chain: '${chainId}'.`);\n    }\n  }\n\n  /** ***********************\n   * PRIVATE FUNCTIONS\n   * ***********************/\n\n  requireWallet() {\n    const signer = this.connection.getSigner();\n    invariant(signer, \"This action requires a connected wallet. Please pass a valid signer to the SDK.\");\n    return signer;\n  }\n  createErc20(currencyAddress, ERC20Abi) {\n    return new ContractWrapper(this.connection.getSignerOrProvider(), currencyAddress, ERC20Abi, this.options, this.storage);\n  }\n}\n\n/**\n * Return all the detected features names in the abi\n * @param abi - parsed array of abi entries\n * @returns Array of all detected features names\n * @internal\n * @deprecated use getAllExtensionNames instead\n */\nfunction getAllDetectedFeatureNames(abi) {\n  const features = [];\n  extractFeatures(detectFeatures(abi), features);\n  return features.map(f => f.name);\n}\n\n/**\n * Return all the detected extension names in the abi\n * @param abi - parsed array of abi entries\n * @returns Array of all detected features names\n * @public\n */\nfunction getAllDetectedExtensionNames(abi) {\n  return getAllDetectedFeatureNames(abi);\n}\n\nfunction createStorage(storage, options) {\n  if (storage) {\n    return storage;\n  } else if (options?.gatewayUrls) {\n    return new ThirdwebStorage({\n      gatewayUrls: options.gatewayUrls,\n      clientId: options.clientId,\n      secretKey: options.secretKey\n    });\n  } else {\n    return new ThirdwebStorage({\n      clientId: options?.clientId,\n      secretKey: options?.secretKey\n    });\n  }\n}\n\n/**\n * @internal\n */\nclass MultichainRegistry {\n  constructor(network, storage) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.storage = storage;\n    this.registryLogic = new ContractWrapper(network, getMultichainRegistryAddress(), TWRegistryABI, options, storage);\n    this.registryRouter = new ContractWrapper(network, getMultichainRegistryAddress(), TWRegistryRouterABI, options, storage);\n  }\n  async updateSigner(signer) {\n    this.registryLogic.updateSignerOrProvider(signer);\n    this.registryRouter.updateSignerOrProvider(signer);\n  }\n  async getContractMetadataURI(chainId, address) {\n    return await this.registryLogic.read(\"getMetadataUri\", [chainId, await resolveAddress(address)]);\n  }\n  async getContractMetadata(chainId, address) {\n    const uri = await this.getContractMetadataURI(chainId, address);\n    if (!uri) {\n      throw new Error(`No metadata URI found for contract ${address} on chain ${chainId}`);\n    }\n    // TODO define the metadata JSON schema\n    return await this.storage.downloadJSON(uri);\n  }\n  async getContractAddresses(walletAddress) {\n    return (await this.registryLogic.read(\"getAll\", [await resolveAddress(walletAddress)])).filter(result => utils.isAddress(result.deploymentAddress) && result.deploymentAddress.toLowerCase() !== constants.AddressZero).map(result => ({\n      address: result.deploymentAddress,\n      chainId: result.chainId.toNumber()\n    }));\n  }\n  addContract = /* @__PURE__ */buildTransactionFunction(async contract => {\n    const deployerAddress = await this.registryRouter.getSignerAddress();\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.registryLogic,\n      method: \"add\",\n      args: [deployerAddress, contract.address, contract.chainId, contract.metadataURI || \"\"]\n    });\n  });\n  addContracts = /* @__PURE__ */buildTransactionFunction(async contracts => {\n    const deployerAddress = await this.registryRouter.getSignerAddress();\n    const encoded = [];\n    const contractEncoder = new ContractEncoder(this.registryLogic);\n    contracts.forEach(contact => {\n      encoded.push(contractEncoder.encode(\"add\", [deployerAddress, contact.address, contact.chainId, contact.metadataURI || \"\"]));\n    });\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.registryRouter,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n  removeContract = /* @__PURE__ */buildTransactionFunction(async contract => {\n    const deployerAddress = await this.registryRouter.getSignerAddress();\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.registryLogic,\n      method: \"remove\",\n      args: [deployerAddress, await resolveAddress(contract.address), contract.chainId]\n    });\n  });\n  removeContracts = /* @__PURE__ */buildTransactionFunction(async contracts => {\n    const deployerAddress = await this.registryRouter.getSignerAddress();\n    const contractEncoder = new ContractEncoder(this.registryLogic);\n    const encoded = await Promise.all(contracts.map(async contract => contractEncoder.encode(\"remove\", [deployerAddress, await resolveAddress(contract.address), contract.chainId])));\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.registryRouter,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n}\n\n/**\n *\n * @param abi - The abi to extract params from\n * @param functionName - The function name to extract params from\n * @returns\n * @internal\n */\nfunction extractFunctionParamsFromAbi(abi, functionName) {\n  const parsedAbi = AbiSchema.parse(abi || []);\n  for (const input of parsedAbi) {\n    if (input.type === \"function\" && input.name === functionName) {\n      return input.inputs || [];\n    }\n  }\n  return [];\n}\n\n/**\n *\n * @internal\n * @param provider - The provider to use\n * @param storage - The storage to use\n * @param create2Factory - The create2 factory to use\n */\nasync function computeCloneFactoryAddress(provider, storage, create2Factory, clientId, secretKey) {\n  if (!create2Factory) {\n    create2Factory = await getCreate2FactoryAddress(provider);\n  }\n  return (await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n    contractName: \"TWCloneFactory\"\n  }, clientId, secretKey)).transaction.predictedAddress;\n}\n\n/**\n * @internal\n */\nfunction convertParamValues(constructorParamTypes, constructorParamValues) {\n  // check that both arrays are same length\n  if (constructorParamTypes.length !== constructorParamValues.length) {\n    throw Error(`Passed the wrong number of constructor arguments: ${constructorParamValues.length}, expected ${constructorParamTypes.length}`);\n  }\n  return constructorParamTypes.map((p, index) => {\n    if (p === \"tuple\" || p.endsWith(\"[]\")) {\n      if (typeof constructorParamValues[index] === \"string\") {\n        return JSON.parse(constructorParamValues[index]);\n      } else {\n        return constructorParamValues[index];\n      }\n    }\n    if (p === \"bytes32\") {\n      invariant(utils.isHexString(constructorParamValues[index]), `Could not parse bytes32 value. Expected valid hex string but got \"${constructorParamValues[index]}\".`);\n      return utils.hexZeroPad(constructorParamValues[index], 32);\n    }\n    if (p.startsWith(\"bytes\")) {\n      invariant(utils.isHexString(constructorParamValues[index]), `Could not parse bytes value. Expected valid hex string but got \"${constructorParamValues[index]}\".`);\n      return constructorParamValues[index];\n    }\n    if (p.startsWith(\"uint\") || p.startsWith(\"int\")) {\n      return BigNumber.from(constructorParamValues[index].toString());\n    }\n    return constructorParamValues[index];\n  });\n}\n\n/**\n * Deploy Nick's Create2 factory on a given network.\n * Deployment is keyless. Signer is needed to fund the keyless signer address.\n * Ref: https://github.com/Arachnid/deterministic-deployment-proxy\n *\n * @deploy\n * @public\n * @param signer - The signer to use\n */\nasync function deployCreate2Factory(signer, options) {\n  invariant(signer.provider, \"No provider\");\n  const deploymentInfo = await computeCreate2FactoryTransaction(signer.provider);\n  if (deploymentInfo.transaction.length > 0) {\n    // send balance to the keyless signer\n    if ((await signer.provider.getBalance(deploymentInfo.signer)).lt(deploymentInfo.valueToSend)) {\n      await (await signer.sendTransaction({\n        to: deploymentInfo.signer,\n        value: deploymentInfo.valueToSend\n      })).wait();\n    }\n\n    // deploy\n    try {\n      console.debug(`deploying CREATE2 factory at: ${deploymentInfo.deployment}`);\n      options?.notifier?.(\"deploying\", \"create2Factory\");\n      await (await signer.provider.sendTransaction(deploymentInfo.transaction)).wait();\n      options?.notifier?.(\"deployed\", \"create2Factory\");\n    } catch (err) {\n      throw new Error(`Couldn't deploy CREATE2 factory: ${JSON.stringify(err)}`);\n    }\n  }\n  return deploymentInfo.deployment;\n}\n\n/**\n * @public\n */\nconst SUPPORTED_CHAIN_IDS = [ChainId.Mainnet, ChainId.Goerli, ChainId.Polygon, ChainId.Mumbai, ChainId.Fantom, ChainId.FantomTestnet, ChainId.Avalanche, ChainId.AvalancheFujiTestnet, ChainId.Optimism, ChainId.OptimismGoerli, ChainId.Arbitrum, ChainId.ArbitrumGoerli, ChainId.BinanceSmartChainMainnet, ChainId.BinanceSmartChainTestnet, ChainId.Hardhat, ChainId.Localhost];\n\n/**\n *\n * @param chainId - chain id\n * @returns The array of trusted forwarders for the given chain id\n * @internal\n */\nfunction getDefaultTrustedForwarders(chainId) {\n  const chainEnum = SUPPORTED_CHAIN_IDS.find(c => c === chainId);\n  const biconomyForwarder = chainEnum ? CONTRACT_ADDRESSES[chainEnum]?.biconomyForwarder : AddressZero;\n  const openzeppelinForwarder = chainEnum ? CONTRACT_ADDRESSES[chainEnum]?.openzeppelinForwarder : AddressZero;\n  return [openzeppelinForwarder, biconomyForwarder].filter(a => a !== AddressZero);\n}\n\n/**\n * In the past we default `platform_fee_recipient` and `primary_sale_recipient` to AddressZero.\n * However due to a recent change in our smart contract extensions (PrimarySale & PlatformFee), AddressZero is no longer an accepted value for those fields.\n * So now we set the default value to the signer address.\n * https://github.com/thirdweb-dev/contracts/pull/530\n *\n * @param signerAddress - The address of the contract deployer\n * @param recipient - The address that will receive the platform fees and/or sale fees\n * @returns `signerAddress` if the `recipient` is AddressZero, otherwise returns `recipient`\n * @internal\n */\nfunction overrideRecipientAddress(signerAddress, recipient) {\n  if (recipient === constants.AddressZero) {\n    return signerAddress;\n  }\n  return recipient;\n}\n\n/**\n *\n * @param contractType - The contract type to get deploy arguments for\n * @param metadata - The metadata to get deploy arguments for\n * @param contractURI - The contract URI to get deploy arguments for\n * @returns\n * @internal\n */\nasync function getDeployArguments(contractType, metadata, contractURI, signer) {\n  const signerAddress = metadata.defaultAdmin || (await signer.getAddress());\n  const trustedForwarders = [];\n\n  // add any custom forwarders passed in\n  if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\n    trustedForwarders.push(...metadata.trusted_forwarders);\n  }\n  switch (contractType) {\n    case NFTDropInitializer.contractType:\n    case NFTCollectionInitializer.contractType:\n      const erc721metadata = await NFTDropInitializer.schema.deploy.parseAsync(metadata);\n      return [signerAddress, erc721metadata.name, erc721metadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, erc721metadata.primary_sale_recipient), erc721metadata.fee_recipient, erc721metadata.seller_fee_basis_points, erc721metadata.platform_fee_basis_points, overrideRecipientAddress(signerAddress, erc721metadata.platform_fee_recipient)];\n    case SignatureDropInitializer.contractType:\n      const signatureDropmetadata = await SignatureDropInitializer.schema.deploy.parseAsync(metadata);\n      return [signerAddress, signatureDropmetadata.name, signatureDropmetadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, signatureDropmetadata.primary_sale_recipient), signatureDropmetadata.fee_recipient, signatureDropmetadata.seller_fee_basis_points, signatureDropmetadata.platform_fee_basis_points, overrideRecipientAddress(signerAddress, signatureDropmetadata.platform_fee_recipient)];\n    case MultiwrapInitializer.contractType:\n      const multiwrapMetadata = await MultiwrapInitializer.schema.deploy.parseAsync(metadata);\n      return [signerAddress, multiwrapMetadata.name, multiwrapMetadata.symbol, contractURI, trustedForwarders, multiwrapMetadata.fee_recipient, multiwrapMetadata.seller_fee_basis_points];\n    case EditionDropInitializer.contractType:\n    case EditionInitializer.contractType:\n      const erc1155metadata = await EditionDropInitializer.schema.deploy.parseAsync(metadata);\n      return [signerAddress, erc1155metadata.name, erc1155metadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, erc1155metadata.primary_sale_recipient), erc1155metadata.fee_recipient, erc1155metadata.seller_fee_basis_points, erc1155metadata.platform_fee_basis_points, overrideRecipientAddress(signerAddress, erc1155metadata.platform_fee_recipient)];\n    case TokenDropInitializer.contractType:\n    case TokenInitializer.contractType:\n      const erc20metadata = await TokenInitializer.schema.deploy.parseAsync(metadata);\n      return [signerAddress, erc20metadata.name, erc20metadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, erc20metadata.primary_sale_recipient), overrideRecipientAddress(signerAddress, erc20metadata.platform_fee_recipient), erc20metadata.platform_fee_basis_points];\n    case VoteInitializer.contractType:\n      const voteMetadata = await VoteInitializer.schema.deploy.parseAsync(metadata);\n      return [voteMetadata.name, contractURI, trustedForwarders, voteMetadata.voting_token_address, voteMetadata.voting_delay_in_blocks, voteMetadata.voting_period_in_blocks, BigNumber.from(voteMetadata.proposal_token_threshold), voteMetadata.voting_quorum_fraction];\n    case SplitInitializer.contractType:\n      const splitsMetadata = await SplitInitializer.schema.deploy.parseAsync(metadata);\n      return [signerAddress, contractURI, trustedForwarders, splitsMetadata.recipients.map(s => s.address), splitsMetadata.recipients.map(s => BigNumber.from(s.sharesBps))];\n    case MarketplaceInitializer.contractType:\n    case MarketplaceV3Initializer.contractType:\n      const marketplaceMetadata = await MarketplaceInitializer.schema.deploy.parseAsync(metadata);\n      return [signerAddress, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, marketplaceMetadata.platform_fee_recipient), marketplaceMetadata.platform_fee_basis_points];\n    case PackInitializer.contractType:\n      const packsMetadata = await PackInitializer.schema.deploy.parseAsync(metadata);\n      return [signerAddress, packsMetadata.name, packsMetadata.symbol, contractURI, trustedForwarders, packsMetadata.fee_recipient, packsMetadata.seller_fee_basis_points];\n    default:\n      return [];\n  }\n}\n\n/**\n * Get the default trusted forwarders for gasless relaying\n * @deploy\n * @public\n */\nasync function getTrustedForwarders(provider, storage, contractName) {\n  const chainId = (await provider.getNetwork()).chainId;\n  const chainEnum = SUPPORTED_CHAIN_IDS.find(c => c === chainId);\n  const trustedForwarders = contractName && contractName === PackInitializer.name ? [] : chainEnum ? getDefaultTrustedForwarders(chainId) : [await computeForwarderAddress(provider, storage)]; // TODO: make this default for all chains (standard + others)\n\n  return trustedForwarders;\n}\n\n// @deprecated - should not be needed anymore, rely on the publish data instead\nconst APPROVED_IMPLEMENTATIONS = {\n  [ChainId.Mainnet]: {\n    \"nft-drop\": \"0x60fF9952e0084A6DEac44203838cDC91ABeC8736\",\n    \"edition-drop\": \"0x74af262d0671F378F97a1EDC3d0970Dbe8A1C550\",\n    \"token-drop\": \"0xE1eE43D23f247b6A9aF81fcE2766E76709482728\",\n    \"signature-drop\": \"0x6fD690EB509BdE4C50028C5D9C0dE3750C2Fad6A\"\n  },\n  [ChainId.Polygon]: {\n    \"nft-drop\": \"0xB96508050Ba0925256184103560EBADA912Fcc69\",\n    \"edition-drop\": \"0x74af262d0671F378F97a1EDC3d0970Dbe8A1C550\",\n    \"token-drop\": \"0x5A8eA4Adad8289746D073947BA06D69A62499aaf\",\n    \"signature-drop\": \"0xBE2fDc35410E268e41Bec62DBb01AEb43245c7d5\"\n  },\n  [ChainId.Fantom]: {\n    \"nft-drop\": \"0x2A396b2D90BAcEF19cDa973586B2633d22710fC2\",\n    \"edition-drop\": \"0x06395FCF9AC6ED827f9dD6e776809cEF1Be0d21B\",\n    \"token-drop\": \"0x0148b28a38efaaC31b6aa0a6D9FEb70FE7C91FFa\",\n    \"signature-drop\": \"0xe135Ef65C2B2213C3fD56d0Bd6500A2cA147aC10\"\n  },\n  [ChainId.Avalanche]: {\n    \"nft-drop\": \"0x9cF91118C8ee2913F0588e0F10e36B3d63F68bF6\",\n    \"edition-drop\": \"0x135fC9D26E5eC51260ece1DF4ED424E2f55c7766\",\n    \"token-drop\": \"0xca0B071899E575BA86495D46c5066971b6f3A901\",\n    \"signature-drop\": \"0x1d47526C3292B0130ef0afD5F02c1DA052A017B3\"\n  },\n  [ChainId.Optimism]: {\n    \"nft-drop\": \"0xFBd7D24d80ee005671E731a7287DEB6073264dD1\",\n    \"edition-drop\": \"0xe135Ef65C2B2213C3fD56d0Bd6500A2cA147aC10\",\n    \"token-drop\": \"0x902Dd246e66d8C3CE652375a723F2a52b43b9AAE\",\n    \"signature-drop\": \"0x8a4cd3549e548bbEEb38C16E041FFf040a5acabD\"\n  },\n  [ChainId.Arbitrum]: {\n    \"nft-drop\": \"0xC4903c1Ff5367b9ac2c349B63DC2409421AaEE2a\",\n    \"edition-drop\": \"0xCcddcec1831646Beff2753249f1B9C580327E89F\",\n    \"token-drop\": \"0x1b5947e1a2d5a29D0df20931DeAB0B87818209B9\",\n    \"signature-drop\": \"0x2dF9851af45dd41C8584ac55D983C604da985Bc7\"\n  },\n  [ChainId.BinanceSmartChainMainnet]: {\n    \"nft-drop\": \"0x902Dd246e66d8C3CE652375a723F2a52b43b9AAE\",\n    \"edition-drop\": \"0x2A396b2D90BAcEF19cDa973586B2633d22710fC2\",\n    \"token-drop\": \"0xe135Ef65C2B2213C3fD56d0Bd6500A2cA147aC10\",\n    \"signature-drop\": \"0xFBd7D24d80ee005671E731a7287DEB6073264dD1\"\n  },\n  [ChainId.Goerli]: {\n    \"nft-drop\": \"0xD11c97DD5F5546B5bBd630D7D1d7327481B0b92C\",\n    \"edition-drop\": \"0x5A8eA4Adad8289746D073947BA06D69A62499aaf\",\n    \"token-drop\": \"0x5680933221B752EB443654a014f88B101F868d50\",\n    \"signature-drop\": \"0x1b5947e1a2d5a29D0df20931DeAB0B87818209B9\"\n  },\n  [ChainId.Mumbai]: {\n    \"nft-drop\": \"0xC4903c1Ff5367b9ac2c349B63DC2409421AaEE2a\",\n    \"edition-drop\": \"0xCcddcec1831646Beff2753249f1B9C580327E89F\",\n    \"token-drop\": \"0x1b5947e1a2d5a29D0df20931DeAB0B87818209B9\",\n    \"signature-drop\": \"0x2dF9851af45dd41C8584ac55D983C604da985Bc7\"\n  },\n  [ChainId.FantomTestnet]: {\n    \"nft-drop\": \"0x8a4cd3549e548bbEEb38C16E041FFf040a5acabD\",\n    \"edition-drop\": \"0x902Dd246e66d8C3CE652375a723F2a52b43b9AAE\",\n    \"token-drop\": \"0xFBd7D24d80ee005671E731a7287DEB6073264dD1\",\n    \"signature-drop\": \"0x5A8eA4Adad8289746D073947BA06D69A62499aaf\"\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    \"nft-drop\": \"0xD11c97DD5F5546B5bBd630D7D1d7327481B0b92C\",\n    \"edition-drop\": \"0xE1eE43D23f247b6A9aF81fcE2766E76709482728\",\n    \"token-drop\": \"0x6fD690EB509BdE4C50028C5D9C0dE3750C2Fad6A\",\n    \"signature-drop\": \"0xCcddcec1831646Beff2753249f1B9C580327E89F\"\n  },\n  [ChainId.OptimismGoerli]: {\n    \"nft-drop\": \"0xCcddcec1831646Beff2753249f1B9C580327E89F\",\n    \"edition-drop\": \"0x6fD690EB509BdE4C50028C5D9C0dE3750C2Fad6A\",\n    \"token-drop\": \"0xD11c97DD5F5546B5bBd630D7D1d7327481B0b92C\",\n    \"signature-drop\": \"0x1b5947e1a2d5a29D0df20931DeAB0B87818209B9\"\n  },\n  [ChainId.ArbitrumGoerli]: {\n    \"nft-drop\": \"0x9CfE807a5b124b962064Fa8F7FD823Cc701255b6\",\n    \"edition-drop\": \"0x9cF91118C8ee2913F0588e0F10e36B3d63F68bF6\",\n    \"token-drop\": \"0x1d47526C3292B0130ef0afD5F02c1DA052A017B3\",\n    \"signature-drop\": \"0xE1eE43D23f247b6A9aF81fcE2766E76709482728\"\n  },\n  [ChainId.BinanceSmartChainTestnet]: {\n    \"nft-drop\": \"\",\n    \"edition-drop\": \"\",\n    \"token-drop\": \"\",\n    \"signature-drop\": \"\" // TODO\n  },\n  [ChainId.Hardhat]: {\n    \"nft-drop\": \"\",\n    \"edition-drop\": \"\",\n    \"token-drop\": \"\",\n    \"signature-drop\": \"\" // TODO\n  },\n  [ChainId.Localhost]: {\n    \"nft-drop\": \"\",\n    \"edition-drop\": \"\",\n    \"token-drop\": \"\",\n    \"signature-drop\": \"\" // TODO\n  }\n};\n\n/**\n * @internal\n * @param chainId - The chainId to get the approved implementation for\n * @param contractType - The contract type to get the approved implementation for\n */\nfunction getApprovedImplementation(chainId,\n// TODO use SupportedChainId once we deploy to all chains\ncontractType) {\n  if (chainId in APPROVED_IMPLEMENTATIONS) {\n    const approvedImpls = APPROVED_IMPLEMENTATIONS[chainId];\n    if (contractType in approvedImpls) {\n      return approvedImpls[contractType];\n    }\n  }\n  return null;\n}\n\n/**\n * @internal\n */\nclass ContractFactory extends ContractWrapper {\n  // Map from contract type to version to deploy specific versions by default\n  DEFAULT_VERSION_MAP = {\n    [NFTDropInitializer.contractType]: 3,\n    [NFTCollectionInitializer.contractType]: 1,\n    [SignatureDropInitializer.contractType]: 4,\n    [MultiwrapInitializer.contractType]: 1,\n    [EditionDropInitializer.contractType]: 2,\n    [EditionInitializer.contractType]: 1,\n    [TokenDropInitializer.contractType]: 2,\n    [TokenInitializer.contractType]: 1,\n    [VoteInitializer.contractType]: 1,\n    [SplitInitializer.contractType]: 1,\n    [MarketplaceInitializer.contractType]: 2,\n    [MarketplaceV3Initializer.contractType]: 3,\n    [PackInitializer.contractType]: 2\n  };\n  constructor(factoryAddr, network, storage, options) {\n    super(network, factoryAddr, TWFactoryAbi, options, storage);\n    this.storage = storage;\n  }\n  deploy = /* @__PURE__ */buildTransactionFunction(async (contractType, contractMetadata, eventEmitter, version, options, onExecute) => {\n    const contract = PREBUILT_CONTRACTS_MAP[contractType];\n    const metadata = await contract.schema.deploy.parseAsync(contractMetadata);\n\n    // TODO: is there any special pre-processing we need to do before uploading?\n    const contractURI = await this.storage.upload(metadata);\n    const implementationAddress = (await this.getImplementation(contract, version)) || undefined;\n    if (!implementationAddress || implementationAddress === constants.AddressZero) {\n      throw new Error(`No implementation found for ${contractType}`);\n    }\n    const ABI = await contract.getAbi(implementationAddress, this.getProvider(), this.storage);\n    const signer = this.getSigner();\n    invariant(signer, \"A signer is required to deploy contracts\");\n    const args = await getDeployArguments(contractType, metadata, contractURI, signer);\n    const encodedFunc = Contract.getInterface(ABI).encodeFunctionData(\"initialize\", args);\n    const blockNumber = await this.getProvider().getBlockNumber();\n    const salt = options?.saltForProxyDeploy ? utils.id(options.saltForProxyDeploy) : utils.formatBytes32String(blockNumber.toString());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this,\n      method: \"deployProxyByImplementation\",\n      args: [implementationAddress, encodedFunc, salt],\n      parse: receipt => {\n        if (onExecute) {\n          onExecute();\n        }\n        const events = this.parseLogs(\"ProxyDeployed\", receipt.logs);\n        if (events.length < 1) {\n          throw new Error(\"No ProxyDeployed event found\");\n        }\n        const contractAddress = events[0].args.proxy;\n        eventEmitter.emit(\"contractDeployed\", {\n          status: \"completed\",\n          contractAddress,\n          transactionHash: receipt.transactionHash\n        });\n        return contractAddress;\n      }\n    });\n  });\n\n  // TODO once IContractFactory is implemented, this can be probably be moved to its own class\n  deployProxyByImplementation = /* @__PURE__ */buildTransactionFunction(async (implementationAddress, implementationAbi, initializerFunction, initializerArgs, eventEmitter, saltForProxyDeploy, onExecute) => {\n    const encodedFunc = Contract.getInterface(implementationAbi).encodeFunctionData(initializerFunction, initializerArgs);\n    const blockNumber = await this.getProvider().getBlockNumber();\n    const salt = saltForProxyDeploy ? utils.id(saltForProxyDeploy) : utils.formatBytes32String(blockNumber.toString());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this,\n      method: \"deployProxyByImplementation\",\n      args: [implementationAddress, encodedFunc, salt],\n      parse: receipt => {\n        if (onExecute) {\n          onExecute();\n        }\n        const events = this.parseLogs(\"ProxyDeployed\", receipt.logs);\n        if (events.length < 1) {\n          throw new Error(\"No ProxyDeployed event found\");\n        }\n        const contractAddress = events[0].args.proxy;\n        eventEmitter.emit(\"contractDeployed\", {\n          status: \"completed\",\n          contractAddress,\n          transactionHash: receipt.transactionHash\n        });\n        return contractAddress;\n      }\n    });\n  });\n\n  /**\n   *\n   * @param contractType - the contract type to deploy\n   * @param metadata - the metadata for the contract\n   * @param contractURI - the contract URI\n   * @returns\n   * @internal\n   */\n  async getDeployArguments(contractType, metadata, contractURI) {\n    let trustedForwarders = [];\n    // override default forwarders if custom ones are passed in\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\n      trustedForwarders = metadata.trusted_forwarders;\n    }\n    const signerAddress = await this.getSignerAddress();\n    switch (contractType) {\n      case NFTDropInitializer.contractType:\n      case NFTCollectionInitializer.contractType:\n        const erc721metadata = await NFTDropInitializer.schema.deploy.parseAsync(metadata);\n        return [signerAddress, erc721metadata.name, erc721metadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, erc721metadata.primary_sale_recipient), erc721metadata.fee_recipient, erc721metadata.seller_fee_basis_points, erc721metadata.platform_fee_basis_points, overrideRecipientAddress(signerAddress, erc721metadata.platform_fee_recipient)];\n      case SignatureDropInitializer.contractType:\n        const signatureDropmetadata = await SignatureDropInitializer.schema.deploy.parseAsync(metadata);\n        return [signerAddress, signatureDropmetadata.name, signatureDropmetadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, signatureDropmetadata.primary_sale_recipient), signatureDropmetadata.fee_recipient, signatureDropmetadata.seller_fee_basis_points, signatureDropmetadata.platform_fee_basis_points, overrideRecipientAddress(signerAddress, signatureDropmetadata.platform_fee_recipient)];\n      case MultiwrapInitializer.contractType:\n        const multiwrapMetadata = await MultiwrapInitializer.schema.deploy.parseAsync(metadata);\n        return [signerAddress, multiwrapMetadata.name, multiwrapMetadata.symbol, contractURI, trustedForwarders, multiwrapMetadata.fee_recipient, multiwrapMetadata.seller_fee_basis_points];\n      case EditionDropInitializer.contractType:\n      case EditionInitializer.contractType:\n        const erc1155metadata = await EditionDropInitializer.schema.deploy.parseAsync(metadata);\n        return [signerAddress, erc1155metadata.name, erc1155metadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, erc1155metadata.primary_sale_recipient), erc1155metadata.fee_recipient, erc1155metadata.seller_fee_basis_points, erc1155metadata.platform_fee_basis_points, overrideRecipientAddress(signerAddress, erc1155metadata.platform_fee_recipient)];\n      case TokenDropInitializer.contractType:\n      case TokenInitializer.contractType:\n        const erc20metadata = await TokenInitializer.schema.deploy.parseAsync(metadata);\n        return [signerAddress, erc20metadata.name, erc20metadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, erc20metadata.primary_sale_recipient), overrideRecipientAddress(signerAddress, erc20metadata.platform_fee_recipient), erc20metadata.platform_fee_basis_points];\n      case VoteInitializer.contractType:\n        const voteMetadata = await VoteInitializer.schema.deploy.parseAsync(metadata);\n        return [voteMetadata.name, contractURI, trustedForwarders, voteMetadata.voting_token_address, voteMetadata.voting_delay_in_blocks, voteMetadata.voting_period_in_blocks, BigNumber.from(voteMetadata.proposal_token_threshold), voteMetadata.voting_quorum_fraction];\n      case SplitInitializer.contractType:\n        const splitsMetadata = await SplitInitializer.schema.deploy.parseAsync(metadata);\n        return [signerAddress, contractURI, trustedForwarders, splitsMetadata.recipients.map(s => s.address), splitsMetadata.recipients.map(s => BigNumber.from(s.sharesBps))];\n      case MarketplaceInitializer.contractType:\n        const marketplaceMetadata = await MarketplaceInitializer.schema.deploy.parseAsync(metadata);\n        return [signerAddress, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, marketplaceMetadata.platform_fee_recipient), marketplaceMetadata.platform_fee_basis_points];\n      case MarketplaceV3Initializer.contractType:\n        const marketplaceV3Metadata = await MarketplaceV3Initializer.schema.deploy.parseAsync(metadata);\n        return [signerAddress, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, marketplaceV3Metadata.platform_fee_recipient), marketplaceV3Metadata.platform_fee_basis_points];\n      case PackInitializer.contractType:\n        const packsMetadata = await PackInitializer.schema.deploy.parseAsync(metadata);\n        return [signerAddress, packsMetadata.name, packsMetadata.symbol, contractURI, trustedForwarders, packsMetadata.fee_recipient, packsMetadata.seller_fee_basis_points];\n      default:\n        return [];\n    }\n  }\n  async getImplementation(contract, version) {\n    const encodedType = utils.formatBytes32String(contract.name);\n    const chainId = await this.getChainID();\n    const approvedImplementation = getApprovedImplementation(chainId, contract.contractType);\n    // return approved implementation if it exists and we're not overriding the version\n    if (approvedImplementation && approvedImplementation.length > 0 && version === undefined) {\n      return approvedImplementation;\n    }\n    return this.read(\"getImplementation\", [encodedType, version !== undefined ? version : this.DEFAULT_VERSION_MAP[contract.contractType]]);\n  }\n  async getLatestVersion(contractType) {\n    const name = getContractName(contractType);\n    if (!name) {\n      throw new Error(`Invalid contract type ${contractType}`);\n    }\n    const encodedType = utils.formatBytes32String(name);\n    return this.read(\"currentVersion\", [encodedType]);\n  }\n}\n\n/**\n * @internal\n */\nclass ContractRegistry extends ContractWrapper {\n  constructor(registryAddress, network, storage, TWRegistryABI, options) {\n    super(network, registryAddress, TWRegistryABI, options, storage);\n  }\n  async getContractAddresses(walletAddress) {\n    // TODO @fixme the filter here is necessary because for some reason getAll returns a 0x0 address for the first entry\n    return (await this.read(\"getAll\", [await resolveAddress(walletAddress)])).filter(adr => utils.isAddress(adr) && adr.toLowerCase() !== constants.AddressZero);\n  }\n  addContract = /* @__PURE__ */buildTransactionFunction(async contractAddress => {\n    return await this.addContracts.prepare([contractAddress]);\n  });\n  addContracts = /* @__PURE__ */buildTransactionFunction(async contractAddresses => {\n    const deployerAddress = await this.getSignerAddress();\n    const contractEncoder = new ContractEncoder(this);\n    const encoded = (await Promise.all(contractAddresses.map(addr => resolveAddress(addr)))).map(address => contractEncoder.encode(\"add\", [deployerAddress, address]));\n    return Transaction.fromContractWrapper({\n      contractWrapper: this,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n  removeContract = /* @__PURE__ */buildTransactionFunction(async contractAddress => {\n    return await this.removeContracts.prepare([contractAddress]);\n  });\n  removeContracts = /* @__PURE__ */buildTransactionFunction(async contractAddresses => {\n    const deployerAddress = await this.getSignerAddress();\n    const contractEncoder = new ContractEncoder(this);\n    const encoded = (await Promise.all(contractAddresses.map(addr => resolveAddress(addr)))).map(address => contractEncoder.encode(\"remove\", [deployerAddress, address]));\n    return Transaction.fromContractWrapper({\n      contractWrapper: this,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n}\n\nconst LoyaltyCardContractInput = /* @__PURE__ */(() => CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema))();\nconst LoyaltyCardContractDeploy = /* @__PURE__ */(() => LoyaltyCardContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema))();\n\nconst AirdropContractInput = /* @__PURE__ */(() => CommonContractSchema.merge(CommonSymbolSchema))();\nconst AirdropContractDeploy = /* @__PURE__ */(() => AirdropContractInput.merge(CommonTrustedForwarderSchema))();\n\n/**\n * Direct deploy a contract at a deterministic address, using Create2 method\n * Address depends on the Create2 factory address and salt (if provided).\n *\n * @deploy\n * @public\n *\n * @param bytecode - The bytecode to deploy\n * @param abi - The abi to use\n * @param signer - The signer to use\n * @param constructorArgs - The constructor args to use\n * @param saltForCreate2 - The salt to use\n */\nasync function directDeployDeterministic(bytecode, abi, signer, constructorArgs, saltForCreate2) {\n  let gasLimit = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 7000000;\n  invariant(signer.provider, \"Provider is required\");\n  const bytecodePrefixed = bytecode.startsWith(\"0x\") ? bytecode : `0x${bytecode}`;\n\n  // 1. Deploy CREATE2 factory (if not already exists)\n  const create2Factory = await deployCreate2Factory(signer);\n\n  // 2. Encode constructor params\n  const constructorParams = extractConstructorParamsFromAbi(abi);\n  const constructorParamTypes = constructorParams.map(p => {\n    return p.type;\n  });\n  const paramValues = convertParamValues(constructorParamTypes, constructorArgs);\n  const paramTypesForEncoder = constructorParams.map(p => {\n    if (p.type === \"tuple[]\") {\n      return utils.ParamType.from(p);\n    } else {\n      return p.type;\n    }\n  });\n  const encodedArgs = utils.defaultAbiCoder.encode(paramTypesForEncoder, paramValues);\n\n  // 3. Construct deployment transaction\n  const address = computeDeploymentAddress(bytecodePrefixed, encodedArgs, create2Factory, saltForCreate2);\n  const contractDeployed = await isContractDeployed(address, signer.provider);\n  let initBytecodeWithSalt = \"\";\n  if (!contractDeployed) {\n    console.debug(`deploying contract via create2 factory at: ${address}`);\n    initBytecodeWithSalt = getInitBytecodeWithSalt(bytecodePrefixed, encodedArgs, saltForCreate2);\n    const tx = {\n      to: create2Factory,\n      data: initBytecodeWithSalt\n    };\n    try {\n      await signer.estimateGas(tx);\n    } catch (e) {\n      console.debug(\"error estimating gas while deploying prebuilt: \", e);\n      tx.gasLimit = BigNumber.from(gasLimit);\n    }\n\n    // 4. Deploy\n    await (await signer.sendTransaction(tx)).wait();\n  } else {\n    throw new Error(`Contract already deployed at ${address}`);\n  }\n  return address;\n}\n\n/**\n * Direct deploy a contract at a deterministic address, using Create2 method\n * Address depends on the Create2 factory address and salt (if provided).\n *\n * @public\n *\n * @param publishMetadataUri - The metadata uri to use\n * @param signer - The signer to use\n * @param storage - The storage to use\n * @param constructorArgs - The constructor args to use\n * @param saltForCreate2 - The salt to use\n */\nasync function directDeployDeterministicWithUri(publishMetadataUri, signer, storage, constructorArgs, saltForCreate2) {\n  let gasLimit = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 7000000;\n  const {\n    compilerMetadata,\n    extendedMetadata\n  } = await fetchAndCacheDeployMetadata(publishMetadataUri, storage);\n  invariant(extendedMetadata?.deployType === \"standard\", \"Must be direct deploy\");\n  return await directDeployDeterministic(compilerMetadata.bytecode, compilerMetadata.abi, signer, constructorArgs, saltForCreate2, gasLimit);\n}\n\n/**\n * Direct deploy a contract at a deterministic address, using Create2 method\n * Address depends on the Create2 factory address and salt (if provided).\n *\n * @public\n *\n * @param contractName - The name of the contract to deploy\n * @param publisherAddress - The publisher address to use\n * @param contractVersion - The contract version to use\n * @param constructorArgs - The constructor args to use\n * @param signer - The signer to use\n * @param storage - The storage to use\n * @param clientId - The client id to use\n * @param secretKey - The secret key to use\n * @param constructorArgs - The constructor args to use\n * @param saltForCreate2 - The salt to use\n */\nasync function directDeployDeterministicPublished(contractName, publisherAddress) {\n  let contractVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n  let constructorArgs = arguments.length > 3 ? arguments[3] : undefined;\n  let signer = arguments.length > 4 ? arguments[4] : undefined;\n  let storage = arguments.length > 5 ? arguments[5] : undefined;\n  let clientId = arguments.length > 6 ? arguments[6] : undefined;\n  let secretKey = arguments.length > 7 ? arguments[7] : undefined;\n  let saltForCreate2 = arguments.length > 8 ? arguments[8] : undefined;\n  let gasLimit = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 7000000;\n  const publishMetadataUri = (await fetchPublishedContractFromPolygon(publisherAddress, contractName, contractVersion, storage, clientId, secretKey)).metadataUri;\n  const {\n    compilerMetadata,\n    extendedMetadata\n  } = await fetchAndCacheDeployMetadata(publishMetadataUri, storage);\n  invariant(extendedMetadata?.deployType === \"standard\", \"Must be direct deploy\");\n  return await directDeployDeterministic(compilerMetadata.bytecode, compilerMetadata.abi, signer, constructorArgs, saltForCreate2, gasLimit);\n}\nasync function predictAddressDeterministic(bytecode, abi, provider, constructorArgs, saltForCreate2) {\n  const bytecodePrefixed = bytecode.startsWith(\"0x\") ? bytecode : `0x${bytecode}`;\n\n  // 1. Deploy CREATE2 factory (if not already exists)\n  const create2Factory = await getCreate2FactoryAddress(provider);\n\n  // 2. Encode constructor params\n  const constructorParams = extractConstructorParamsFromAbi(abi);\n  const constructorParamTypes = constructorParams.map(p => {\n    return p.type;\n  });\n  const paramValues = convertParamValues(constructorParamTypes, constructorArgs);\n  const paramTypesForEncoder = constructorParams.map(p => {\n    if (p.type === \"tuple[]\") {\n      return utils.ParamType.from(p);\n    } else {\n      return p.type;\n    }\n  });\n  const encodedArgs = utils.defaultAbiCoder.encode(paramTypesForEncoder, paramValues);\n\n  // 3. Construct deployment transaction\n  const address = computeDeploymentAddress(bytecodePrefixed, encodedArgs, create2Factory, saltForCreate2);\n  return address;\n}\nasync function predictAddressDeterministicWithUri(publishMetadataUri, provider, storage, constructorArgs, saltForCreate2) {\n  const {\n    compilerMetadata,\n    extendedMetadata\n  } = await fetchAndCacheDeployMetadata(publishMetadataUri, storage);\n  invariant(extendedMetadata?.deployType === \"standard\", \"Must be direct deploy\");\n  return await predictAddressDeterministic(compilerMetadata.bytecode, compilerMetadata.abi, provider, constructorArgs, saltForCreate2);\n}\nasync function predictAddressDeterministicPublished(contractName, publisherAddress) {\n  let contractVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n  let constructorArgs = arguments.length > 3 ? arguments[3] : undefined;\n  let provider = arguments.length > 4 ? arguments[4] : undefined;\n  let storage = arguments.length > 5 ? arguments[5] : undefined;\n  let clientId = arguments.length > 6 ? arguments[6] : undefined;\n  let secretKey = arguments.length > 7 ? arguments[7] : undefined;\n  let saltForCreate2 = arguments.length > 8 ? arguments[8] : undefined;\n  const publishMetadataUri = (await fetchPublishedContractFromPolygon(publisherAddress, contractName, contractVersion, storage, clientId, secretKey)).metadataUri;\n  const {\n    compilerMetadata,\n    extendedMetadata\n  } = await fetchAndCacheDeployMetadata(publishMetadataUri, storage);\n  invariant(extendedMetadata?.deployType === \"standard\", \"Must be direct deploy\");\n  return await predictAddressDeterministic(compilerMetadata.bytecode, compilerMetadata.abi, provider, constructorArgs, saltForCreate2);\n}\n\n/**\n * The main entry point for the thirdweb SDK\n * @public\n */\nclass ThirdwebSDK extends RPCConnectionHandler {\n  /**\n   * Get an instance of the thirdweb SDK based on an AbstractWallet\n   *\n   * @example\n   * ```javascript\n   * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\"\n   *\n   * const wallet = new AbstractWalletImplementation();\n   * const sdk = await ThirdwebSDK.fromWallet(wallet, \"mainnet\");\n   * ```\n   *\n   * @param wallet - the implementation of the AbstractWallet class to use for signing\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\n   * @param options - the SDK options to use\n   * @param storage - optional storage implementation to use\n   * @returns An instance of the SDK\n   *\n   * @beta\n   */\n  static async fromWallet(wallet, network) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let storage = arguments.length > 3 ? arguments[3] : undefined;\n    const signer = await wallet.getSigner();\n    return ThirdwebSDK.fromSigner(signer, network, options, storage);\n  }\n\n  /**\n   * Get an instance of the thirdweb SDK based on an existing ethers signer\n   *\n   * @example\n   * ```javascript\n   * // get a signer from somewhere (createRandom is being used purely for example purposes)\n   * const signer = Wallet.createRandom();\n   *\n   * // get an instance of the SDK with the signer already setup\n   * const sdk = ThirdwebSDK.fromSigner(signer, \"mainnet\");\n   * ```\n   *\n   * @param signer - a ethers Signer to be used for transactions\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\n   * @param options - the SDK options to use\n   * @param storage - optional storage implementation to use\n   * @returns An instance of the SDK\n   *\n   * @beta\n   */\n  static fromSigner(signer, network) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let storage = arguments.length > 3 ? arguments[3] : undefined;\n    let signerWithProvider = signer;\n    if (network) {\n      try {\n        const provider = getChainProvider(network, options);\n        signerWithProvider = signer.connect(provider);\n      } catch {\n        // We have to catch here because browser wallets throw when trying to override provider\n      }\n    }\n    const sdk = new ThirdwebSDK(network || signerWithProvider, network ? addChainToSupportedChains(network, options) : options, storage);\n    sdk.updateSignerOrProvider(signerWithProvider);\n    return sdk;\n  }\n\n  /**\n   * Get an instance of the thirdweb SDK based on a private key.\n   *\n   * @remarks\n   * This should only be used for backend services or scripts, with the private key stored in a secure way.\n   * **NEVER** expose your private key to the public in any way.\n   *\n   * @example\n   * ```javascript\n   * const sdk = ThirdwebSDK.fromPrivateKey(\"SecretPrivateKey\", \"mainnet\");\n   * ```\n   *\n   * @param privateKey - the private key - **DO NOT EXPOSE THIS TO THE PUBLIC**\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\n   * @param options - the SDK options to use\n   * @param storage - optional storage implementation to use\n   * @returns An instance of the SDK\n   *\n   * @public\n   */\n  static fromPrivateKey(privateKey, network) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let storage = arguments.length > 3 ? arguments[3] : undefined;\n    const provider = getChainProvider(network, options);\n    const signer = new Wallet(privateKey, provider);\n    return new ThirdwebSDK(signer, addChainToSupportedChains(network, options), storage);\n  }\n\n  /**\n   * @internal\n   * the cache of contracts that we have already seen\n   */\n  contractCache = new Map();\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ThirdwebSDK.getPublisher} instead\n   */\n\n  /**\n   * Internal handler for uploading and downloading files\n   */\n\n  /**\n   * New contract deployer\n   */\n\n  /**\n   * Contract verifier\n   */\n\n  /**\n   * The registry of deployed contracts\n   */\n\n  /**\n   * Interact with the connected wallet\n   */\n\n  /**\n   * Upload and download files from IPFS or from your own storage service\n   */\n\n  constructor(network) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let storage = arguments.length > 2 ? arguments[2] : undefined;\n    const apiKeyType = \"clientId\" ;\n    let warnMessage = `No API key. Please provide a ${apiKeyType}. It is required to access thirdweb's services. You can create a key at https://thirdweb.com/create-api-key`;\n    checkClientIdOrSecretKey(warnMessage, options.clientId, options.secretKey);\n    options = addChainToSupportedChains(network, options);\n    super(network, options);\n    setSupportedChains(options?.supportedChains);\n    const configuredStorage = createStorage(storage, options);\n    this.storage = configuredStorage;\n    this.storageHandler = configuredStorage;\n    this.wallet = new UserWallet(network, options, configuredStorage);\n    this.deployer = new ContractDeployer(network, options, configuredStorage);\n    this.verifier = new ContractVerifier(network, options, configuredStorage);\n    this.multiChainRegistry = new MultichainRegistry(network, this.storageHandler, this.options);\n    this._publisher = new ContractPublisher(network, this.options, this.storageHandler);\n  }\n  get auth() {\n    throw new Error(`The sdk.auth namespace has been moved to the @thirdweb-dev/auth package and is no longer available after @thirdweb-dev/sdk >= 3.7.0.\n      Please visit https://portal.thirdweb.com/wallets/auth for instructions on how to switch to using the new auth package (@thirdweb-dev/auth@3.0.0).\n\n      If you still want to use the old @thirdweb-dev/auth@2.0.0 package, you can downgrade the SDK to version 3.6.0.`);\n  }\n\n  /**\n   * Get an instance of a NFT Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const dropContract = await sdk.getDropContract(\"0x1234...\");\n   * + const dropContract = await sdk.getContract(\"0x1234...\", \"nft-drop\");\n   * ```\n   */\n  async getNFTDrop(contractAddress) {\n    return await this.getContract(contractAddress, \"nft-drop\");\n  }\n\n  /**\n   * Get an instance of a Signature Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const signatureDrop = await sdk.getSignatureDrop(\"0x1234...\");\n   * + const signatureDrop = await sdk.getContract(\"0x1234...\", \"signature-drop\");\n   * ```\n   */\n  async getSignatureDrop(contractAddress) {\n    return await this.getContract(contractAddress, \"signature-drop\");\n  }\n\n  /**\n   * Get an instance of a NFT Collection Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const signatureDrop = await sdk.getNFTCollection(\"0x1234...\");\n   * + const signatureDrop = await sdk.getContract(\"0x1234...\", \"nft-collection\");\n   * ```\n   */\n  async getNFTCollection(contractAddress) {\n    return await this.getContract(contractAddress, \"nft-collection\");\n  }\n\n  /**\n   * Get an instance of a Edition Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const editionDrop = await sdk.getEditionDrop(\"0x1234...\");\n   * + const editionDrop = await sdk.getContract(\"0x1234...\", \"edition-drop\");\n   * ```\n   */\n  async getEditionDrop(contractAddress) {\n    return await this.getContract(contractAddress, \"edition-drop\");\n  }\n\n  /**\n   * Get an instance of a Edition contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const edition = await sdk.getEdition(\"0x1234...\");\n   * + const edition = await sdk.getContract(\"0x1234...\", \"edition\");\n   * ```\n   */\n  async getEdition(contractAddress) {\n    return await this.getContract(contractAddress, \"edition\");\n  }\n\n  /**\n   * Get an instance of a Token Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const tokenDrop = await sdk.getTokenDrop(\"0x1234...\");\n   * + const tokenDrop = await sdk.getContract(\"0x1234...\", \"token-drop\");\n   * ```\n   */\n  async getTokenDrop(contractAddress) {\n    return await this.getContract(contractAddress, \"token-drop\");\n  }\n\n  /**\n   * Get an instance of a Token contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const token = await sdk.getToken(\"0x1234...\");\n   * + const token = await sdk.getContract(\"0x1234...\", \"token\");\n   * ```\n   */\n  async getToken(contractAddress) {\n    return await this.getContract(contractAddress, \"token\");\n  }\n\n  /**\n   * Get an instance of a Vote contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const vote = await sdk.getVote(\"0x1234...\");\n   * + const vote = await sdk.getContract(\"0x1234...\", \"vote\");\n   * ```\n   */\n  async getVote(contractAddress) {\n    return await this.getContract(contractAddress, \"vote\");\n  }\n\n  /**\n   * Get an instance of a Split contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const split = await sdk.getSplit(\"0x1234...\");\n   * + const split = await sdk.getContract(\"0x1234...\", \"split\");\n   * ```\n   */\n  async getSplit(contractAddress) {\n    return await this.getContract(contractAddress, \"split\");\n  }\n\n  /**\n   * Get an instance of a Marketplace contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const marketplace = await sdk.getMarketplace(\"0x1234...\");\n   * + const marketplace = await sdk.getContract(\"0x1234...\", \"marketplace\");\n   * ```\n   */\n  async getMarketplace(contractAddress) {\n    return await this.getContract(contractAddress, \"marketplace\");\n  }\n\n  /**\n   * Get an instance of a Marketplace contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const marketplace = await sdk.getMarketplaceV3(\"0x1234...\");\n   * + const marketplace = await sdk.getContract(\"0x1234...\", \"marketplace-v3\");\n   * ```\n   */\n  async getMarketplaceV3(contractAddress) {\n    return await this.getContract(contractAddress, \"marketplace-v3\");\n  }\n\n  /**\n   * Get an instance of a Pack contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const pack = await sdk.getPack(\"0x1234...\");\n   * + const pack = await sdk.getContract(\"0x1234...\", \"pack\");\n   * ```\n   */\n  async getPack(contractAddress) {\n    return await this.getContract(contractAddress, \"pack\");\n  }\n\n  /**\n   * Get an instance of a Pack contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const multiWrap = await sdk.getMultiwrap(\"0x1234...\");\n   * + const multiWrap = await sdk.getContract(\"0x1234...\", \"multiwrap\");\n   * ```\n   */\n  async getMultiwrap(contractAddress) {\n    return await this.getContract(contractAddress, \"multiwrap\");\n  }\n\n  /**\n   * Get an instance of a Custom ThirdwebContract\n   * @param address - the address of the deployed contract\n   * @returns The contract\n   * @public\n   * @example\n   * ```javascript\n   * const contract = await sdk.getContract(\"{{contract_address}}\");\n   * ```\n   */\n\n  /**\n   * Get an instance of a Custom ThirdwebContract\n   * @param address - the address of the deployed contract\n   * @param contractType - the {@link ContractType} of the contract to load\n   * @returns The contract\n   * @public\n   * @example\n   * ```javascript\n   * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-drop\");\n   * ```\n   */\n\n  /**\n   * Get an instance of a Custom ThirdwebContract\n   * @param address - the address of the deployed contract\n   * @param abi - the ABI ({@link ContractInterface}) of the contract to load\n   * @returns The contract\n   * @public\n   * @example\n   * ```javascript\n   * const contract = await sdk.getContract(\"{{contract_address}}\", ABI);\n   * ```\n   */\n\n  async getContract(address, contractTypeOrABI) {\n    const resolvedAddress = await resolveAddress(address);\n\n    // if we have a contract in the cache we will return it\n    // we will do this **without** checking any contract type things for simplicity, this may have to change in the future?\n    if (this.contractCache.has(resolvedAddress)) {\n      // we know this will be there since we check the has above\n      return this.contractCache.get(resolvedAddress);\n    }\n    if (resolvedAddress in GENERATED_ABI) {\n      return await this.getContractFromAbi(resolvedAddress, GENERATED_ABI[resolvedAddress]);\n    }\n    let newContract;\n\n    // if we don't have a contractType or ABI then we will have to resolve it regardless\n    // we also handle it being \"custom\" just in case...\n    if (!contractTypeOrABI || contractTypeOrABI === \"custom\") {\n      try {\n        const metadata = await this.getPublisher().fetchCompilerMetadataFromAddress(resolvedAddress);\n        newContract = await this.getContractFromAbi(resolvedAddress, await getCompositeABI(resolvedAddress, AbiSchema.parse(metadata.abi), this.getProvider(), this.options, this.storage));\n      } catch (e) {\n        // fallback to\n        // try resolving the contract type (legacy contracts)\n        const resolvedContractType = await this.resolveContractType(resolvedAddress);\n        if (resolvedContractType && resolvedContractType !== \"custom\") {\n          // otherwise if it's a prebuilt contract we can just use the contract type\n          const contractAbi = await PREBUILT_CONTRACTS_MAP[resolvedContractType].getAbi(resolvedAddress, this.getProvider(), this.storage);\n          newContract = await this.getContractFromAbi(resolvedAddress, await getCompositeABI(resolvedAddress, AbiSchema.parse(contractAbi), this.getProvider(), this.options, this.storage));\n        } else {\n          // we cant fetch the ABI, and we don't know the contract type, throw the original error\n          throw e;\n        }\n      }\n    }\n    // if it's a builtin contract type we can just use the contract type to initialize the contract instance\n    else if (typeof contractTypeOrABI === \"string\" && contractTypeOrABI in PREBUILT_CONTRACTS_MAP) {\n      newContract = await PREBUILT_CONTRACTS_MAP[contractTypeOrABI].initialize(this.getSignerOrProvider(), resolvedAddress, this.storage, this.options);\n    }\n    // otherwise it has to be an ABI\n    else {\n      newContract = await this.getContractFromAbi(resolvedAddress, contractTypeOrABI);\n    }\n\n    // set whatever we have on the cache\n    this.contractCache.set(resolvedAddress, newContract);\n    // return it\n    return newContract;\n  }\n\n  /**\n   * @internal\n   * @deprecated use {@link getContract} directly instead\n   */\n  async getBuiltInContract(address, contractType) {\n    return await this.getContract(address, contractType);\n  }\n\n  /**\n   * @param contractAddress - the address of the contract to attempt to resolve the contract type for\n   * @returns The {@link ContractType} for the given contract address\n   *\n   */\n  async resolveContractType(contractAddress) {\n    try {\n      const IThirdwebContractABI = (await import('@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json')).default;\n      const contract = new Contract(await resolveAddress(contractAddress), IThirdwebContractABI,\n      // !provider only! - signer can break things here!\n      this.getProvider());\n      const remoteContractType = utils.toUtf8String(await contract.contractType())\n      // eslint-disable-next-line no-control-regex\n      .replace(/\\x00/g, \"\");\n      return getContractTypeForRemoteName(remoteContractType);\n    } catch (err) {\n      return \"custom\";\n    }\n  }\n\n  /**\n   * Return all the contracts deployed by the specified address\n   * @param walletAddress - the deployed address\n   * @example\n   * ```javascript\n   * const contracts = sdk.getContractList(\"{{wallet_address}}\");\n   * ```\n   */\n  async getContractList(walletAddress) {\n    // TODO - this only reads from the current registry chain, not the multichain registry\n    const addresses = (await (await this.deployer.getRegistry())?.getContractAddresses(await resolveAddress(walletAddress))) || [];\n    const chainId = (await this.getProvider().getNetwork()).chainId;\n    return await Promise.all(addresses.map(async address => {\n      return {\n        address: address,\n        chainId,\n        contractType: () => this.resolveContractType(address),\n        metadata: async () => (await this.getContract(address)).metadata.get(),\n        extensions: async () => getAllDetectedExtensionNames((await this.getContract(address)).abi)\n      };\n    }));\n  }\n  async getMultichainContractList(walletAddress) {\n    let chains = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultChains;\n    const contracts = await this.multiChainRegistry.getContractAddresses(walletAddress);\n    const chainMap = chains.reduce((acc, chain) => {\n      acc[chain.chainId] = chain;\n      return acc;\n    }, {});\n    const sdkMap = {};\n    return contracts.map(_ref => {\n      let {\n        address,\n        chainId\n      } = _ref;\n      if (!chainMap[chainId]) {\n        // if we don't have the chain in our list of supported chains then we can't resolve the contract type regardless, don't even try to set up the SDK\n        return {\n          address,\n          chainId,\n          contractType: async () => \"custom\",\n          metadata: async () => ({\n            name: \"\"\n          }),\n          extensions: async () => []\n        };\n      }\n      try {\n        let chainSDK = sdkMap[chainId];\n        if (!chainSDK) {\n          chainSDK = new ThirdwebSDK(chainId, {\n            ...this.options,\n            // need to disable readonly settings for this to work\n            readonlySettings: undefined,\n            // @ts-expect-error - zod doesn't like this\n            supportedChains: chains\n          }, this.storage);\n          sdkMap[chainId] = chainSDK;\n        }\n        return {\n          address,\n          chainId,\n          contractType: () => chainSDK.resolveContractType(address),\n          metadata: async () => (await chainSDK.getContract(address)).metadata.get(),\n          extensions: async () => getAllDetectedExtensionNames((await chainSDK.getContract(address)).abi)\n        };\n      } catch (e) {\n        return {\n          address,\n          chainId,\n          contractType: async () => \"custom\",\n          metadata: async () => ({\n            name: \"\"\n          }),\n          extensions: async () => []\n        };\n      }\n    });\n  }\n\n  /**\n   * Update the active signer or provider for all contracts\n   * @param network - the new signer or provider\n   */\n  updateSignerOrProvider(network) {\n    super.updateSignerOrProvider(network);\n    this.updateContractSignerOrProvider();\n  }\n  updateContractSignerOrProvider() {\n    this.wallet.connect(this.getSignerOrProvider());\n    this.deployer.updateSignerOrProvider(this.getSignerOrProvider());\n    this._publisher.updateSignerOrProvider(this.getSignerOrProvider());\n    this.multiChainRegistry.updateSigner(this.getSignerOrProvider());\n    this.verifier.updateSignerOrProvider(this.getSignerOrProvider());\n    for (const [, contract] of this.contractCache) {\n      contract.onNetworkUpdated(this.getSignerOrProvider());\n    }\n  }\n\n  /**\n   * Get an instance of a Custom contract from a json ABI\n   * @param address - the address of the deployed contract\n   * @param abi - the JSON abi\n   * @returns The contract\n   * @beta\n   * @example\n   * ```javascript\n   * // Import your ABI from a JSON file\n   * import myABI from \"./path/to/myABI.json\";\n   *\n   * const contract = sdk.getContractFromAbi(\n   *   \"{{contract_address}}\",\n   *   // Pass in the \"abi\" field from the JSON file\n   *   myABI.abi\n   * );\n   * ```\n   */\n  async getContractFromAbi(address, abi) {\n    const [resolvedAddress, {\n      SmartContract\n    }] = await Promise.all([resolveAddress(address), import('./smart-contract-ac432d60.browser.esm.js')]);\n    if (this.contractCache.has(resolvedAddress)) {\n      return this.contractCache.get(resolvedAddress);\n    }\n    const [, provider] = getSignerAndProvider(this.getSignerOrProvider(), this.options);\n    const parsedABI = typeof abi === \"string\" ? JSON.parse(abi) : abi;\n    const contract = new SmartContract(this.getSignerOrProvider(), resolvedAddress, parsedABI, this.storageHandler, this.options, (await provider.getNetwork()).chainId);\n    this.contractCache.set(resolvedAddress, contract);\n    return contract;\n  }\n\n  /**\n   * Get the native balance of a given address (wallet or contract)\n   * @example\n   * ```javascript\n   * const balance = await sdk.getBalance(\"0x...\");\n   * console.log(balance.displayValue);\n   * ```\n   * @param address - the address to check the balance for\n   */\n  async getBalance(address) {\n    return fetchCurrencyValue(this.getProvider(), NATIVE_TOKEN_ADDRESS, await this.getProvider().getBalance(await resolveAddress(address)));\n  }\n\n  /**\n   * @internal\n   */\n  getPublisher() {\n    return this._publisher;\n  }\n}\nfunction addChainToSupportedChains(network, options) {\n  if (isChainConfig(network)) {\n    options = {\n      ...options,\n      // @ts-expect-error - we know that the network is assignable despite the readonly mismatch\n      supportedChains: [network, ...(options?.supportedChains || [])]\n    };\n  }\n  return options;\n}\nconst THIRDWEB_DEPLOYER = \"0xdd99b75f095d0c4d5112aCe938e4e6ed962fb024\";\n\n/**\n * Handles deploying new contracts\n * @deploy\n * @public\n */\nclass ContractDeployer extends RPCConnectionHandler {\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ContractDeployer.getFactory} instead\n   */\n\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ContractDeployer.getRegistry} instead\n   */\n\n  transactionListener = event => {\n    if (event.status === \"submitted\") {\n      this.events.emit(\"contractDeployed\", {\n        status: \"submitted\",\n        transactionHash: event.transactionHash\n      });\n    }\n  };\n  constructor(network, options, storage) {\n    super(network, options);\n    this.storage = storage;\n    this.events = new EventEmitter();\n    // Initialize factory and registry (we don't need to make these calls async)\n    this.getFactory();\n    this.getRegistry();\n  }\n\n  /**\n   * Deploys an NFT Collection contract\n   *\n   * @remarks Deploys an NFT Collection contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployNFTCollection({\n   *   name: \"My Collection\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deployNFTCollection = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(NFTCollectionInitializer.contractType, metadata, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new NFTDrop contract\n   *\n   * @remarks Deploys an NFT Drop contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployNFTDrop({\n   *   name: \"My Drop\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deployNFTDrop = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(NFTDropInitializer.contractType, metadata, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new LoyaltyCard contract\n   *\n   * @remarks Deploys a LoyaltyCard contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployLoyaltyCard({\n   *   name: \"My Loyalty Program\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deployLoyaltyCard = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    const parsedMetadata = await LoyaltyCardContractDeploy.parseAsync(metadata);\n    const contractURI = await this.storage.upload(parsedMetadata);\n    const trustedForwarders = [];\n    // add any custom forwarders passed in\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\n      trustedForwarders.push(...metadata.trusted_forwarders);\n    }\n    const signerAddress = await this.getSigner()?.getAddress();\n    const deployArgs = [signerAddress, parsedMetadata.name, parsedMetadata.symbol, contractURI, trustedForwarders, parsedMetadata.primary_sale_recipient, parsedMetadata.fee_recipient, parsedMetadata.seller_fee_basis_points, parsedMetadata.platform_fee_basis_points, parsedMetadata.platform_fee_recipient];\n    return await this.deployReleasedContract.prepare(THIRDWEB_DEPLOYER, \"LoyaltyCard\", deployArgs, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new OpenEditionERC721 contract\n   *\n   * @remarks Deploys a OpenEdition contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployOpenEdition({\n   *   name: \"My Open Edition\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deployOpenEdition = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    const parsedMetadata = await DropErc721ContractSchema.deploy.parseAsync(metadata);\n    const contractURI = await this.storage.upload(parsedMetadata);\n    const trustedForwarders = [];\n    // add any custom forwarders passed in\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\n      trustedForwarders.push(...metadata.trusted_forwarders);\n    }\n    const signerAddress = await this.getSigner()?.getAddress();\n    const deployArgs = [signerAddress, parsedMetadata.name, parsedMetadata.symbol, contractURI, trustedForwarders, parsedMetadata.primary_sale_recipient, parsedMetadata.fee_recipient, parsedMetadata.seller_fee_basis_points];\n    return await this.deployPublishedContract.prepare(THIRDWEB_DEPLOYER, \"OpenEditionERC721\", deployArgs, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new SignatureDrop contract\n   *\n   * @remarks Deploys a SignatureDrop contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deploySignatureDrop({\n   *   name: \"My Signature Drop\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deploySignatureDrop = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(SignatureDropInitializer.contractType, metadata, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new Multiwrap contract\n   *\n   * @remarks Deploys a Multiwrap contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployMultiwrap({\n   *   name: \"My Multiwrap\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   * @beta\n   */\n  deployMultiwrap = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(MultiwrapInitializer.contractType, metadata, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new Edition contract\n   *\n   * @remarks Deploys an Edition contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployEdition({\n   *   name: \"My Edition\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deployEdition = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(EditionInitializer.contractType, metadata, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new EditionDrop contract\n   *\n   * @remarks Deploys an Edition Drop contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployEditionDrop({\n   *   name: \"My Edition Drop\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deployEditionDrop = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(EditionDropInitializer.contractType, metadata, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new Token contract\n   *\n   * @remarks Deploys a Token contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployToken({\n   *   name: \"My Token\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deployToken = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(TokenInitializer.contractType, metadata, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new Token Drop contract\n   *\n   * @remarks Deploys a Token Drop contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployTokenDrop({\n   *   name: \"My Token Drop\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deployTokenDrop = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(TokenDropInitializer.contractType, metadata, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new Marketplace contract\n   *\n   * @remarks Deploys a Marketplace contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployMarketplace({\n   *   name: \"My Marketplace\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deployMarketplace = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(MarketplaceInitializer.contractType, metadata, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new Marketplace-V3 contract\n   *\n   * @remarks Deploys a Marketplace-V3 contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployMarketplaceV3({\n   *   name: \"My Marketplace\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deployMarketplaceV3 = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(MarketplaceV3Initializer.contractType, metadata, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new Pack contract\n   *\n   * @remarks Deploys a Pack contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployPack({\n   *   name: \"My Pack\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deployPack = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(PackInitializer.contractType, metadata, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new Split contract\n   *\n   * @remarks Deploys a Split contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deploySplit({\n   *   name: \"My Split\",\n   *   primary_sale_recipient: \"your-address\",\n   *   recipients: [\n   *    {\n   *      address: \"your-address\",\n   *      sharesBps: 80 * 100, // 80%\n   *    },\n   *    {\n   *      address: \"another-address\",\n   *      sharesBps: 20 * 100, // 20%\n   *    },\n   *   ],\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deploySplit = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(SplitInitializer.contractType, metadata, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new Vote contract\n   *\n   * @remarks Deploys an Vote contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployVote({\n   *   name: \"My Vote\",\n   *   primary_sale_recipient: \"your-address\",\n   *   voting_token_address: \"your-token-contract-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns The address of the deployed contract\n   */\n  deployVote = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    return await this.deployBuiltInContract.prepare(VoteInitializer.contractType, metadata, \"latest\", options);\n  });\n  deployAirdropERC20 = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    const parsedMetadata = await AirdropContractDeploy.parseAsync(metadata);\n    const contractURI = await this.storage.upload(parsedMetadata);\n    const trustedForwarders = [];\n    // add any custom forwarders passed in\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\n      trustedForwarders.push(...metadata.trusted_forwarders);\n    }\n    const signerAddress = await this.getSigner()?.getAddress();\n    const deployArgs = [signerAddress, contractURI, trustedForwarders];\n    return await this.deployReleasedContract.prepare(THIRDWEB_DEPLOYER, \"AirdropERC20\", deployArgs, \"latest\", options);\n  });\n  deployAirdropERC721 = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    const parsedMetadata = await AirdropContractDeploy.parseAsync(metadata);\n    const contractURI = await this.storage.upload(parsedMetadata);\n    const trustedForwarders = [];\n    // add any custom forwarders passed in\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\n      trustedForwarders.push(...metadata.trusted_forwarders);\n    }\n    const signerAddress = await this.getSigner()?.getAddress();\n    const deployArgs = [signerAddress, contractURI, trustedForwarders];\n    return await this.deployReleasedContract.prepare(THIRDWEB_DEPLOYER, \"AirdropERC721\", deployArgs, \"latest\", options);\n  });\n  deployAirdropERC1155 = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\n    const parsedMetadata = await AirdropContractDeploy.parseAsync(metadata);\n    const contractURI = await this.storage.upload(parsedMetadata);\n    const trustedForwarders = [];\n    // add any custom forwarders passed in\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\n      trustedForwarders.push(...metadata.trusted_forwarders);\n    }\n    const signerAddress = await this.getSigner()?.getAddress();\n    const deployArgs = [signerAddress, contractURI, trustedForwarders];\n    return await this.deployReleasedContract.prepare(THIRDWEB_DEPLOYER, \"AirdropERC1155\", deployArgs, \"latest\", options);\n  });\n\n  /**\n   * Deploys a new prebuilt contract\n   *\n   * @public\n   * @param contractType - the type of contract to deploy\n   * @param contractMetadata - the metadata to deploy the contract with\n   * @param version - the version of the contract to deploy\n   * @returns A promise of the address of the newly deployed contract\n   */\n  deployBuiltInContract = /* @__PURE__ */buildDeployTransactionFunction((() => {\n    var _this = this;\n    return async function (contractType, contractMetadata) {\n      let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n      let options = arguments.length > 3 ? arguments[3] : undefined;\n      const signer = _this.getSigner();\n      invariant(signer, \"A signer is required to deploy contracts\");\n      const parsedMetadata = {\n        app_uri: PREBUILT_CONTRACTS_APPURI_MAP[contractType],\n        ...(await PREBUILT_CONTRACTS_MAP[contractType].schema.deploy.parseAsync(contractMetadata))\n      };\n      if (_this.hasLocalFactory()) {\n        // old behavior for unit tests, deploy from local factory\n        // parse version into the first number of the version string (or undefined if unparseable)\n        let parsedVersion = undefined;\n        try {\n          parsedVersion = parseInt(version);\n          if (isNaN(parsedVersion)) {\n            parsedVersion = undefined;\n          }\n        } catch (e) {\n          parsedVersion = undefined;\n        }\n        const factory = await _this.getFactory();\n        if (!factory) {\n          throw new Error(\"Factory not found\");\n        }\n        factory.on(EventType.Transaction, _this.transactionListener);\n        return factory.deploy.prepare(contractType, parsedMetadata, _this.events, parsedVersion, options, () => {\n          factory.off(EventType.Transaction, _this.transactionListener);\n        });\n      }\n\n      // For all other chains, fetch from published contracts\n      // resolve contract name from type\n      const contractName = getContractName(contractType);\n      invariant(contractName, \"Contract name not found\");\n      // first upload the contract metadata\n      const contractURI = await _this.storage.upload(parsedMetadata);\n      // then get the deploy arguments\n      const constructorParams = await getDeployArguments(contractType, parsedMetadata, contractURI, signer);\n\n      // fetch the publish URI from the ContractPublisher contract\n      const publishedContract = await _this.fetchPublishedContractFromPolygon(THIRDWEB_DEPLOYER, contractName, version);\n      return _this.deployContractFromUri.prepare(publishedContract.metadataUri, constructorParams, options);\n    };\n  })());\n\n  /**\n   * @internal\n   * @param contractType - the type of contract to deploy\n   */\n  async getLatestBuiltInContractVersion(contractType) {\n    const factory = await this.getFactory();\n    if (!factory) {\n      throw new Error(\"Factory not found\");\n    }\n    return await factory.getLatestVersion(contractType);\n  }\n\n  /**\n   * Deploy any published contract by its name\n   * @param publisherAddress - the address of the publisher\n   * @param contractName - the name of the contract to deploy\n   * @param constructorParams - the constructor params to pass to the contract\n   *\n   * @deprecated use deployPublishedContract instead\n   * @internal\n   */\n  deployReleasedContract = /* @__PURE__ */buildDeployTransactionFunction((() => {\n    var _this2 = this;\n    return async function (publisherAddress, contractName, constructorParams) {\n      let version = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\n      let options = arguments.length > 4 ? arguments[4] : undefined;\n      const publishedContract = await _this2.fetchPublishedContractFromPolygon(publisherAddress, contractName, version);\n      return await _this2.deployContractFromUri.prepare(publishedContract.metadataUri, constructorParams, options);\n    };\n  })());\n\n  /**\n   * Deploy any published contract by its name\n   * @param publisherAddress - the address of the publisher\n   * @param contractName - the name of the contract to deploy\n   * @param constructorParams - the constructor params to pass to the contract\n   * @param version - Optional: the version of the contract to deploy or \"latest\"\n   * @param options - Optional: the deploy options\n   */\n  deployPublishedContract = this.deployReleasedContract;\n\n  /**\n   * Deploy any published contract by its name\n   * @param contractName - the name of the contract to deploy\n   * @param constructorParams - the constructor params to pass to the contract\n   * @param publisherAddress - the address of the publisher\n   * @param version - Optional: the version of the contract to deploy or \"latest\"\n   * @param saltForCreate2 - Optional: salt for create2 deployment, will determine deployment address\n   */\n  async deployPublishedContractDeterministic(contractName, constructorParams) {\n    let publisherAddress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : THIRDWEB_DEPLOYER;\n    let contractVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\n    let saltForCreate2 = arguments.length > 4 ? arguments[4] : undefined;\n    const signer = this.getSigner();\n    invariant(signer, \"Signer is required\");\n    return directDeployDeterministicPublished(contractName, publisherAddress, contractVersion, constructorParams, signer, this.storage, this.options.clientId, this.options.secretKey, saltForCreate2);\n  }\n\n  /**\n   * Predict Create2 address of a contract\n   * @param contractName - the name of the contract\n   * @param constructorParams - the constructor params to pass to the contract\n   * @param publisherAddres -s the address of the publisher\n   * @param version - Optional: the version of the contract to deploy or \"latest\"\n   * @param saltForCreate2 - Optional: salt for create2 deployment, will determine deployment address\n   */\n  async predictAddressDeterministic(contractName, constructorParams) {\n    let publisherAddress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : THIRDWEB_DEPLOYER;\n    let contractVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\n    let saltForCreate2 = arguments.length > 4 ? arguments[4] : undefined;\n    const provider = this.getProvider();\n    invariant(provider, \"Provider is required\");\n    return predictAddressDeterministicPublished(contractName, publisherAddress, contractVersion, constructorParams, provider, this.storage, this.options.clientId, this.options.secretKey, saltForCreate2);\n  }\n\n  /**\n   * Deploy a proxy contract of a given implementation via the given factory\n   * @param factoryAddress - the address of the factory\n   * @param implementationAddress - the address of the implementation\n   * @param implementationAbi - the abi of the implementation\n   * @param initializerFunction - the initializer function to call\n   * @param initializerArgs - the initializer args to pass to the initializer function\n   */\n  deployViaFactory = /* @__PURE__ */buildTransactionFunction(async (factoryAddress, implementationAddress, implementationAbi, initializerFunction, initializerArgs, saltForProxyDeploy) => {\n    const resolvedFactoryAddress = await resolveAddress(factoryAddress);\n    const resolvedImplementationAddress = await resolveAddress(implementationAddress);\n    const signer = this.getSigner();\n    invariant(signer, \"signer is required\");\n    // TODO only require factory interface here - IProxyFactory\n    const proxyFactory = new ContractFactory(resolvedFactoryAddress, this.getSignerOrProvider(), this.storage, this.options);\n    proxyFactory.on(EventType.Transaction, this.transactionListener);\n    return await proxyFactory.deployProxyByImplementation.prepare(resolvedImplementationAddress, implementationAbi, initializerFunction, initializerArgs, this.events, saltForProxyDeploy, () => {\n      proxyFactory.off(EventType.Transaction, this.transactionListener);\n    });\n  });\n\n  /**\n   * Deploy a proxy contract of a given implementation directly\n   * @param implementationAddress - the address of the implementation\n   * @param implementationAbi - the abi of the implementation\n   * @param initializerFunction - the initializer function to call\n   * @param initializerArgs - the initializer args to pass to the initializer function\n   */\n  deployProxy = /* @__PURE__ */buildDeployTransactionFunction(async (implementationAddress, implementationAbi, initializerFunction, initializerArgs) => {\n    const resolvedAddress = await resolveAddress(implementationAddress);\n    const encodedInitializer = Contract.getInterface(implementationAbi).encodeFunctionData(initializerFunction, initializerArgs);\n    const {\n      TWProxy__factory\n    } = await import('@thirdweb-dev/contracts-js/factories/TWProxy__factory');\n    return this.deployContractWithAbi.prepare(TWProxy__factory.abi, TWProxy__factory.bytecode, [resolvedAddress, encodedInitializer]);\n  });\n\n  /**\n   * Deploy a proxy contract of a given implementation via thirdweb's Clone factory\n   * @param publishMetadataUri - the uri of the publish metadata\n   * @param constructorParamValues - the constructor param values\n   * @param deployMetadata - the deploy metadata\n   * @param signer - the signer to use\n   * @param options - the deploy options\n   * @internal\n   */\n  deployViaAutoFactory = /* @__PURE__ */buildDeployTransactionFunction(async (publishMetadataUri, deployMetadata, signer, initializerFunction, paramValues, options) => {\n    // any evm deployment flow\n\n    // 1. Deploy CREATE2 factory (if not already exists)\n    const create2Factory = await deployCreate2Factory(signer, options);\n\n    // 2. get deployment info for any evm\n    const deploymentInfo = await getDeploymentInfo(publishMetadataUri, this.storage, this.getProvider(), create2Factory, this.options.clientId, this.options.secretKey);\n    const implementationAddress = deploymentInfo.find(i => i.type === \"implementation\")?.transaction.predictedAddress;\n\n    // 3. deploy infra + plugins + implementation using a throwaway Deployer contract\n\n    // filter out already deployed contracts (data is empty)\n    const transactionsToSend = deploymentInfo.filter(i => i.transaction.data && i.transaction.data.length > 0);\n    const transactionsforDirectDeploy = transactionsToSend.filter(i => {\n      return i.type !== \"infra\";\n    }).map(i => i.transaction);\n    const transactionsForThrowawayDeployer = transactionsToSend.filter(i => {\n      return i.type === \"infra\";\n    }).map(i => i.transaction);\n\n    // deploy via throwaway deployer, multiple infra contracts in one transaction\n    await deployWithThrowawayDeployer(signer, transactionsForThrowawayDeployer, options);\n\n    // send each transaction directly to Create2 factory\n    // process txns one at a time\n    for (const tx of transactionsforDirectDeploy) {\n      try {\n        await deployContractDeterministic(signer, tx, options);\n      } catch (e) {\n        console.debug(`Error deploying contract at ${tx.predictedAddress}`, e?.message);\n        throw e;\n      }\n    }\n    const resolvedImplementationAddress = await resolveAddress(implementationAddress);\n\n    // 4. deploy proxy with TWStatelessFactory (Clone factory) and return address\n    const cloneFactory = await computeCloneFactoryAddress(this.getProvider(), this.storage, create2Factory, this.options.clientId, this.options.secretKey);\n    options?.notifier?.(\"deploying\", \"proxy\");\n    const proxyDeployTransaction = await this.deployViaFactory.prepare(cloneFactory, resolvedImplementationAddress, deployMetadata.compilerMetadata.abi, initializerFunction, paramValues, options?.saltForProxyDeploy);\n    options?.notifier?.(\"deployed\", \"proxy\");\n    return proxyDeployTransaction;\n  });\n\n  /**\n   * Deploy a proxy contract of a given implementation via a custom factory\n   * @param constructorParamValues - the constructor param values\n   * @param deployMetadata - the deploy metadata\n   * @param signer - the signer to use\n   * @param chainId - the chain id to deploy to\n   * @internal\n   */\n  deployViaCustomFactory = /* @__PURE__ */buildDeployTransactionFunction(async (constructorParamValues, deployMetadata, signer, chainId) => {\n    const customFactoryAddress = deployMetadata.extendedMetadata?.factoryDeploymentData?.customFactoryInput?.customFactoryAddresses[chainId];\n    const resolvedCustomFactoryAddress = await resolveAddress(customFactoryAddress);\n    invariant(resolvedCustomFactoryAddress, `customFactoryAddress not found for chainId '${chainId}'`);\n    invariant(deployMetadata.extendedMetadata?.factoryDeploymentData?.customFactoryInput?.factoryFunction, `customFactoryFunction not set'`);\n    const customFactoryMetadata = await fetchContractMetadataFromAddress(resolvedCustomFactoryAddress, this.getProvider(), this.storage, this.options);\n    const factoryFunctionParamTypes = extractFunctionParamsFromAbi(customFactoryMetadata.abi, deployMetadata.extendedMetadata.factoryDeploymentData.customFactoryInput.factoryFunction).map(p => p.type);\n    const factoryFunctionparamValues = convertParamValues(factoryFunctionParamTypes, constructorParamValues);\n\n    // eslint-disable-next-line prefer-const\n    let deployedImplementationAddress;\n    const deployTransaction = await Transaction.fromContractInfo({\n      contractAddress: resolvedCustomFactoryAddress,\n      contractAbi: customFactoryMetadata.abi,\n      provider: this.getProvider(),\n      signer,\n      method: deployMetadata.extendedMetadata.factoryDeploymentData.customFactoryInput.factoryFunction,\n      args: factoryFunctionparamValues,\n      parse: () => {\n        return deployedImplementationAddress;\n      },\n      storage: this.storage\n    });\n    deployedImplementationAddress = await deployTransaction.simulate();\n    return deployTransaction;\n  });\n\n  /**\n   * @internal\n   */\n  async getRegistry() {\n    // if we already have a registry just return it back\n    if (this._registry) {\n      return this._registry;\n    }\n\n    // otherwise get the registry address for the active chain and get a new one\n\n    // have to do it like this otherwise we run it over and over and over\n    // \"this._registry\" has to be assigned to the promise upfront.\n    return this._registry = this.getProvider().getNetwork().then(async _ref2 => {\n      let {\n        chainId\n      } = _ref2;\n      const registryAddress = getContractAddressByChainId(chainId, \"twRegistry\");\n      if (!registryAddress) {\n        return undefined;\n      }\n      const TWRegistryABI = (await import('@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json')).default;\n      return new ContractRegistry(registryAddress, this.getSignerOrProvider(), this.storage, TWRegistryABI, this.options);\n    });\n  }\n  async getFactory() {\n    // if we already have a factory just return it back\n    if (this._factory) {\n      return this._factory;\n    }\n\n    // otherwise get the factory address for the active chain and get a new one\n\n    // have to do it like this otherwise we run it over and over and over\n    // \"this._factory\" has to be assigned to the promise upfront.\n    return this._factory = this.getProvider().getNetwork().then(async _ref3 => {\n      let {\n        chainId\n      } = _ref3;\n      const factoryAddress = getContractAddressByChainId(chainId, \"twFactory\");\n      if (!factoryAddress) {\n        return undefined;\n      }\n      const factory = new ContractFactory(factoryAddress, this.getSignerOrProvider(), this.storage, this.options);\n      return factory;\n    });\n  }\n\n  /**\n   * @internal\n   */\n  updateSignerOrProvider(network) {\n    super.updateSignerOrProvider(network);\n    this.updateContractSignerOrProvider();\n  }\n  updateContractSignerOrProvider() {\n    // has to be promises now\n    this._factory?.then(factory => {\n      factory?.updateSignerOrProvider(this.getSignerOrProvider());\n    }).catch(() => {\n      // ignore\n    });\n    // has to be promises now\n    this._registry?.then(registry => {\n      registry?.updateSignerOrProvider(this.getSignerOrProvider());\n    }).catch(() => {\n      // ignore\n    });\n  }\n\n  /**\n   * @internal\n   * @param publishMetadataUri - the uri of the publish metadata\n   * @param constructorParamValues - the constructor param values\n   * @param options - the deploy options\n   */\n  deployContractFromUri = /* @__PURE__ */buildDeployTransactionFunction(async (publishMetadataUri, constructorParamValues, options) => {\n    const signer = this.getSigner();\n    invariant(signer, \"A signer is required\");\n    const {\n      compilerMetadata,\n      extendedMetadata\n    } = await fetchAndCacheDeployMetadata(publishMetadataUri, this.storage);\n    const forceDirectDeploy = options?.forceDirectDeploy || false;\n    const chainId = (await this.getProvider().getNetwork()).chainId;\n    const isNetworkEnabled = extendedMetadata?.networksForDeployment?.networksEnabled.includes(chainId) || extendedMetadata?.networksForDeployment?.allNetworks;\n    if (extendedMetadata?.networksForDeployment && !isNetworkEnabled && compilerMetadata.name !== \"AccountFactory\" // ignore network restrictions for simple AccountFactory\n    ) {\n      throw new Error(`Deployments disabled on this network, with chainId: ${chainId}`);\n    }\n    if (extendedMetadata && extendedMetadata.factoryDeploymentData && (extendedMetadata.isDeployableViaProxy || extendedMetadata.isDeployableViaFactory || extendedMetadata.deployType && extendedMetadata.deployType !== \"standard\") && !forceDirectDeploy) {\n      if (extendedMetadata.deployType === \"customFactory\") {\n        return await this.deployViaCustomFactory.prepare(constructorParamValues, {\n          compilerMetadata,\n          extendedMetadata\n        }, signer, chainId);\n      } else {\n        invariant(extendedMetadata.factoryDeploymentData.implementationInitializerFunction, `implementationInitializerFunction not set'`);\n        const initializerParamTypes = extractFunctionParamsFromAbi(compilerMetadata.abi, extendedMetadata.factoryDeploymentData.implementationInitializerFunction).map(p => p.type);\n        const paramValues = convertParamValues(initializerParamTypes, constructorParamValues);\n        const implementationAddress = extendedMetadata.factoryDeploymentData.implementationAddresses[chainId];\n        if (!implementationAddress || extendedMetadata.deployType === \"autoFactory\") {\n          return await this.deployViaAutoFactory.prepare(publishMetadataUri, {\n            compilerMetadata,\n            extendedMetadata\n          }, signer, extendedMetadata.factoryDeploymentData.implementationInitializerFunction, paramValues, options);\n        }\n        const resolvedImplementationAddress = await resolveAddress(implementationAddress);\n        invariant(resolvedImplementationAddress, `implementationAddress not found for chainId '${chainId}'`);\n        if (extendedMetadata.isDeployableViaFactory) {\n          // deploy via a factory (prioritise factory)\n          invariant(extendedMetadata.factoryDeploymentData.factoryAddresses, \"isDeployableViaFactory is true so factoryAddresses is required\");\n          const factoryAddress = extendedMetadata.factoryDeploymentData.factoryAddresses[chainId];\n          invariant(factoryAddress, `isDeployableViaFactory is true and factoryAddress not found for chainId '${chainId}'`);\n          const resolvedFactoryAddress = await resolveAddress(factoryAddress);\n          return await this.deployViaFactory.prepare(resolvedFactoryAddress, resolvedImplementationAddress, compilerMetadata.abi, extendedMetadata.factoryDeploymentData.implementationInitializerFunction, paramValues, options?.saltForProxyDeploy);\n        } else if (extendedMetadata.isDeployableViaProxy) {\n          // deploy a proxy directly\n          return await this.deployProxy.prepare(resolvedImplementationAddress, compilerMetadata.abi, extendedMetadata.factoryDeploymentData.implementationInitializerFunction, paramValues);\n        }\n      }\n    }\n    const bytecode = compilerMetadata.bytecode.startsWith(\"0x\") ? compilerMetadata.bytecode : `0x${compilerMetadata.bytecode}`;\n    if (!utils.isHexString(bytecode)) {\n      throw new Error(`Contract bytecode is invalid.\\n\\n${bytecode}`);\n    }\n    const constructorParamTypes = extractConstructorParamsFromAbi(compilerMetadata.abi).map(p => p.type);\n    const paramValues = convertParamValues(constructorParamTypes, constructorParamValues);\n    return this.deployContractWithAbi.prepare(compilerMetadata.abi, bytecode, paramValues);\n  });\n\n  /**\n   * @public\n   * @param abi - the abi of the contract\n   * @param bytecode - the bytecode of the contract\n   * @param constructorParams - the constructor params to pass to the contract\n   */\n  deployContractWithAbi = /* @__PURE__ */buildDeployTransactionFunction(async (abi, bytecode, constructorParams) => {\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer, \"Signer is required to deploy contracts\");\n    const factory = new ContractFactory$1(abi, bytecode).connect(signer);\n    return new DeployTransaction({\n      args: constructorParams,\n      provider,\n      signer,\n      factory,\n      storage: this.storage,\n      events: this.events\n    });\n  });\n\n  /**\n   * @public\n   * @param publishMetadataUri - the uri of the publish metadata\n   * @param options - the deploy options\n   */\n  async getTransactionsForDeploy(publishMetadataUri, options) {\n    let transactions = [];\n    const provider = this.getProvider();\n    invariant(provider, \"A provider is required\");\n    const {\n      extendedMetadata\n    } = await fetchAndCacheDeployMetadata(publishMetadataUri, this.storage);\n    const forceDirectDeploy = options?.forceDirectDeploy || false;\n    if (extendedMetadata && extendedMetadata.factoryDeploymentData && (extendedMetadata.isDeployableViaProxy || extendedMetadata.isDeployableViaFactory || extendedMetadata.deployType === \"autoFactory\") && !forceDirectDeploy) {\n      const chainId = (await this.getProvider().getNetwork()).chainId;\n      const implementationAddress = extendedMetadata.factoryDeploymentData.implementationAddresses[chainId];\n      if (!implementationAddress || extendedMetadata.deployType === \"autoFactory\") {\n        const create2FactoryAddress = await getCreate2FactoryAddress(this.getProvider());\n        transactions.push({\n          contractType: \"create2Factory\",\n          addresses: [create2FactoryAddress]\n        });\n        const deploymentInfo = await getDeploymentInfo(publishMetadataUri, this.storage, this.getProvider(), create2FactoryAddress, this.options.clientId, this.options.secretKey);\n        const transactionsToSend = deploymentInfo.filter(i => i.transaction.data && i.transaction.data.length > 0);\n        const transactionsforDirectDeploy = transactionsToSend.filter(i => {\n          return i.type !== \"infra\";\n        }).map(i => i.transaction);\n        transactionsforDirectDeploy.forEach(tx => {\n          transactions.push({\n            contractType: \"preset\",\n            addresses: [tx.predictedAddress]\n          });\n        });\n        const transactionsForThrowawayDeployer = transactionsToSend.filter(i => {\n          return i.type === \"infra\";\n        }).map(i => i.transaction);\n        const transactionBatches = createTransactionBatches(transactionsForThrowawayDeployer);\n        transactionBatches.forEach(batch => {\n          const addresses = batch.map(tx => tx.predictedAddress);\n          transactions.push({\n            contractType: \"infra\",\n            addresses: addresses\n          });\n        });\n      }\n      transactions = (await Promise.all(transactions.map(async tx => {\n        const addresses = (await Promise.all(tx.addresses.map(async address => {\n          const isDeployed = await isContractDeployed(address, provider);\n          return isDeployed ? null : address;\n        }))).filter(Boolean);\n        return addresses.length > 0 ? tx : null;\n      }))).filter(Boolean);\n      transactions.push({\n        contractType: \"proxy\",\n        addresses: []\n      });\n    } else {\n      transactions.push({\n        contractType: \"custom\",\n        addresses: []\n      });\n    }\n    return transactions;\n  }\n\n  /**\n   * Listen to all deploy transactions from this deployer\n   * @param listener - the listener to add\n   */\n  addDeployListener(listener) {\n    this.events.on(\"contractDeployed\", listener);\n  }\n\n  /**\n   * Remove a deploy listener\n   * @param listener - the listener to remove\n   */\n  removeDeployListener(listener) {\n    this.events.off(\"contractDeployed\", listener);\n  }\n\n  /**\n   * Remove all deploy listeners\n   */\n  removeAllDeployListeners() {\n    this.events.removeAllListeners(\"contractDeployed\");\n  }\n\n  // PRIVATE METHODS\n\n  async fetchPublishedContractFromPolygon(publisherAddress, contractName, version) {\n    const address = await resolveAddress(publisherAddress);\n    // TODO don't create a new sdk instance here, instead read from contract directly with provider\n    // this will allow moving deployer out of this file and help with tree shaking\n    const publishedContract = await new ThirdwebSDK(\"polygon\", {\n      clientId: this.options.clientId,\n      secretKey: this.options.secretKey\n    }, this.storage).getPublisher().getVersion(address, contractName, version);\n    if (!publishedContract) {\n      throw new Error(`No published contract found for '${contractName}' at version '${version}' by '${address}'`);\n    }\n    return publishedContract;\n  }\n  hasLocalFactory() {\n    return !!getProcessEnv(\"factoryAddress\");\n  }\n}\n\nexport { APPROVED_IMPLEMENTATIONS as A, ContractVerifier as C, LOCAL_NODE_PKEY as L, SUPPORTED_CHAIN_IDS as S, ThirdwebSDK as T, UserWallet as U, ContractDeployer as a, getAllDetectedExtensionNames as b, checkClientIdOrSecretKey as c, verify as d, extractFunctionParamsFromAbi as e, checkVerificationStatus as f, getAllDetectedFeatureNames as g, computeCloneFactoryAddress as h, isVerifiedOnEtherscan as i, getThirdwebContractAddress as j, getEncodedConstructorParamsForThirdwebContract as k, deployCreate2Factory as l, directDeployDeterministic as m, directDeployDeterministicWithUri as n, directDeployDeterministicPublished as o, predictThirdwebContractAddress as p, predictAddressDeterministic as q, predictAddressDeterministicWithUri as r, predictAddressDeterministicPublished as s, convertParamValues as t, getDeployArguments as u, verifyThirdwebPrebuiltImplementation as v, getTrustedForwarders as w, getApprovedImplementation as x, getDefaultTrustedForwarders as y };\n", "[\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [\n      {\n        \"name\": \"_pluginMap\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_trustedForwarders\",\n        \"type\": \"address[]\",\n        \"internalType\": \"address[]\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"fallback\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"receive\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"DEFAULT_ADMIN_ROLE\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"_getPluginForFunction\",\n    \"inputs\": [\n      {\n        \"name\": \"_selector\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"addPlugin\",\n    \"inputs\": [\n      {\n        \"name\": \"_plugin\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct IPluginMap.Plugin\",\n        \"components\": [\n          {\n            \"name\": \"functionSelector\",\n            \"type\": \"bytes4\",\n            \"internalType\": \"bytes4\"\n          },\n          {\n            \"name\": \"functionSignature\",\n            \"type\": \"string\",\n            \"internalType\": \"string\"\n          },\n          {\n            \"name\": \"pluginAddress\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getAllFunctionsOfPlugin\",\n    \"inputs\": [\n      {\n        \"name\": \"_pluginAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"registered\",\n        \"type\": \"bytes4[]\",\n        \"internalType\": \"bytes4[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getAllPlugins\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"registered\",\n        \"type\": \"tuple[]\",\n        \"internalType\": \"struct IPluginMap.Plugin[]\",\n        \"components\": [\n          {\n            \"name\": \"functionSelector\",\n            \"type\": \"bytes4\",\n            \"internalType\": \"bytes4\"\n          },\n          {\n            \"name\": \"functionSignature\",\n            \"type\": \"string\",\n            \"internalType\": \"string\"\n          },\n          {\n            \"name\": \"pluginAddress\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          }\n        ]\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getPluginForFunction\",\n    \"inputs\": [\n      {\n        \"name\": \"_selector\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getRoleAdmin\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getRoleMember\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"index\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"member\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getRoleMemberCount\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"count\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"grantRole\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"hasRole\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"hasRoleWithSwitch\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isTrustedForwarder\",\n    \"inputs\": [\n      {\n        \"name\": \"forwarder\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"multicall\",\n    \"inputs\": [\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"results\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"pluginMap\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"removePlugin\",\n    \"inputs\": [\n      {\n        \"name\": \"_selector\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"renounceRole\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"revokeRole\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"updatePlugin\",\n    \"inputs\": [\n      {\n        \"name\": \"_plugin\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct IPluginMap.Plugin\",\n        \"components\": [\n          {\n            \"name\": \"functionSelector\",\n            \"type\": \"bytes4\",\n            \"internalType\": \"bytes4\"\n          },\n          {\n            \"name\": \"functionSignature\",\n            \"type\": \"string\",\n            \"internalType\": \"string\"\n          },\n          {\n            \"name\": \"pluginAddress\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"PluginAdded\",\n    \"inputs\": [\n      {\n        \"name\": \"functionSelector\",\n        \"type\": \"bytes4\",\n        \"indexed\": true,\n        \"internalType\": \"bytes4\"\n      },\n      {\n        \"name\": \"pluginAddress\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"PluginRemoved\",\n    \"inputs\": [\n      {\n        \"name\": \"functionSelector\",\n        \"type\": \"bytes4\",\n        \"indexed\": true,\n        \"internalType\": \"bytes4\"\n      },\n      {\n        \"name\": \"pluginAddress\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"PluginSet\",\n    \"inputs\": [\n      {\n        \"name\": \"functionSelector\",\n        \"type\": \"bytes4\",\n        \"indexed\": true,\n        \"internalType\": \"bytes4\"\n      },\n      {\n        \"name\": \"functionSignature\",\n        \"type\": \"string\",\n        \"indexed\": true,\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"pluginAddress\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"PluginUpdated\",\n    \"inputs\": [\n      {\n        \"name\": \"functionSelector\",\n        \"type\": \"bytes4\",\n        \"indexed\": true,\n        \"internalType\": \"bytes4\"\n      },\n      {\n        \"name\": \"oldPluginAddress\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newPluginAddress\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RoleAdminChanged\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"previousAdminRole\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"newAdminRole\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RoleGranted\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RoleRevoked\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  }\n]", "const GENERATED_ABI = {};\n\nexport { GENERATED_ABI };\n", "[\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [\n      {\n        \"name\": \"_trustedForwarder\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_registry\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"DEFAULT_ADMIN_ROLE\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"FACTORY_ROLE\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"addImplementation\",\n    \"inputs\": [\n      {\n        \"name\": \"_implementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"approval\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"approveImplementation\",\n    \"inputs\": [\n      {\n        \"name\": \"_implementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_toApprove\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"currentVersion\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"deployProxy\",\n    \"inputs\": [\n      {\n        \"name\": \"_type\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"deployProxyByImplementation\",\n    \"inputs\": [\n      {\n        \"name\": \"_implementation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"deployedProxy\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"deployProxyDeterministic\",\n    \"inputs\": [\n      {\n        \"name\": \"_type\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      },\n      {\n        \"name\": \"_salt\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"deployer\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getImplementation\",\n    \"inputs\": [\n      {\n        \"name\": \"_type\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"_version\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getLatestImplementation\",\n    \"inputs\": [\n      {\n        \"name\": \"_type\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getRoleAdmin\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getRoleMember\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"index\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getRoleMemberCount\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"grantRole\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"hasRole\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"implementation\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isTrustedForwarder\",\n    \"inputs\": [\n      {\n        \"name\": \"forwarder\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"multicall\",\n    \"inputs\": [\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"results\",\n        \"type\": \"bytes[]\",\n        \"internalType\": \"bytes[]\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"registry\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"contract TWRegistry\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"renounceRole\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"revokeRole\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ImplementationAdded\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"contractType\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"version\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ImplementationApproved\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"isApproved\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ProxyDeployed\",\n    \"inputs\": [\n      {\n        \"name\": \"implementation\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"proxy\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"deployer\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RoleAdminChanged\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"previousAdminRole\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"newAdminRole\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RoleGranted\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RoleRevoked\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  }\n]", "import { _ as hasMatchingAbi, bj as AbiSchema, d0 as coreContractAbi, d1 as extensionContractAbi, d2 as hasDuplicates, cw as AmountSchema, aw as getCreate2FactoryAddress, aE as computeDeploymentInfo, au as isContractDeployed, az as getInitBytecodeWithSalt, b7 as BigNumberTransformSchema, b5 as BigNumberSchema, b6 as BigNumberishSchema, b9 as AddressOrEnsSchema } from './index-33cd3415.browser.esm.js';\nimport { providers, utils, BigNumber } from 'ethers';\nimport { getChainByChainIdAsync, getChainRPC } from '@thirdweb-dev/chains';\nimport invariant from 'tiny-invariant';\nimport { GENERATED_ABI } from '@thirdweb-dev/generated-abis';\nimport { z } from 'zod';\nimport { a as CommonNFTOutput, C as CommonNFTInput, N as NFTInputOrUriSchema } from './setErc20Allowance-7f76f677.browser.esm.js';\nimport { createThirdwebClient, getBuyWithCryptoQuote as getBuyWithCryptoQuote$1, prepareTransaction } from 'thirdweb';\nimport { getBuyWithCryptoHistory as getBuyWithCryptoHistory$1, getBuyWithCryptoStatus as getBuyWithCryptoStatus$1 } from 'thirdweb/pay';\nimport { resolvePromisedValue } from 'thirdweb/utils';\n\n/**\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param abi - The abi to check\n * @returns\n */\nfunction matchesPrebuiltAbi(contractWrapper, abi) {\n  return hasMatchingAbi(AbiSchema.parse(contractWrapper.abi || []), [abi]);\n}\n\nasync function compatibleExtensions(coreBytecode, extensionBytecodes, chainId) {\n  const chain = await getChainByChainIdAsync(chainId);\n  const rpcUrl = getChainRPC(chain);\n  const jsonRpcProvider = new providers.JsonRpcProvider(rpcUrl);\n  const addr = \"0x0000000000000000000000000000000000000124\"; // arbitrary address\n\n  /**\n   *  Here we use state override with eth_call.\n   *\n   *  This lets us call functions on a non-deployed contract, by using its deployed bytecode\n   *  to override code of an arbitrary address in eth_call.\n   *\n   *  Encode function calldata, and perform eth_call with bytecode override.\n   */\n\n  const coreIface = new utils.Interface(coreContractAbi);\n  const coreCalldata = coreIface.encodeFunctionData(\"getSupportedCallbackFunctions\", []);\n  if (!coreBytecode.startsWith(\"0x6080604052\")) {\n    const index = coreBytecode.indexOf(\"6080604052\");\n    coreBytecode = `0x${coreBytecode.substring(index)}`;\n  } else if (coreBytecode.lastIndexOf(\"6080604052\") > 0) {\n    const index = coreBytecode.lastIndexOf(\"6080604052\");\n    coreBytecode = `0x${coreBytecode.substring(index)}`;\n  }\n  const core = await jsonRpcProvider.send(\"eth_call\", [{\n    to: addr,\n    data: coreCalldata\n  }, \"latest\", {\n    [addr]: {\n      code: coreBytecode\n    }\n  } // eth_call with bytecode override\n  ]);\n  const extensionIface = new utils.Interface(extensionContractAbi);\n  const extensionCalldata = extensionIface.encodeFunctionData(\"getExtensionConfig\", []);\n  const extensions = await Promise.all(extensionBytecodes.map(b => {\n    // TODO: Upload deployed bytecode on publish metadata\n\n    if (!b.startsWith(\"0x6080604052\")) {\n      const index = b.indexOf(\"6080604052\");\n      b = `0x${b.substring(index)}`;\n    } else if (b.lastIndexOf(\"6080604052\") > 0) {\n      const index = b.lastIndexOf(\"6080604052\");\n      b = `0x${b.substring(index)}`;\n    }\n    return jsonRpcProvider.send(\"eth_call\", [{\n      to: addr,\n      data: extensionCalldata\n    }, \"latest\", {\n      [addr]: {\n        code: b\n      }\n    } // eth_call with bytecode override\n    ]);\n  }));\n  const decodedCore = coreIface.decodeFunctionResult(\"getSupportedCallbackFunctions\", core);\n  const coreCallbackSelectors = decodedCore.flat().map(c => c.selector);\n\n  // extract callback/fallback selectors and required interfaces from extension config\n  const requiredInterfaces = [];\n  const extensionFallbackSelectors = [];\n  const extensionCallbackSelectors = [];\n  const selectors = [];\n  extensions.forEach(e => {\n    const decodedExtensionConfig = extensionIface.decodeFunctionResult(\"getExtensionConfig\", e);\n    requiredInterfaces.push(...decodedExtensionConfig[0].requiredInterfaces);\n    const fallbackSelectors = decodedExtensionConfig[0].fallbackFunctions.map(a => a.selector);\n    const callbackSelectors = decodedExtensionConfig[0].callbackFunctions.map(a => a.selector);\n    extensionFallbackSelectors.push(...fallbackSelectors);\n    extensionCallbackSelectors.push(...callbackSelectors);\n  });\n\n  // check if callback selectors are supported\n  for (const callback of extensionCallbackSelectors) {\n    if (!coreCallbackSelectors.includes(callback)) {\n      return false;\n    }\n  }\n\n  // check if the core contract supports required interfaces by extensions above\n  if (requiredInterfaces.length > 0) {\n    const supportsInterfaceResult = await Promise.all(requiredInterfaces.map(r => {\n      const supportsInterfaceCalldata = coreIface.encodeFunctionData(\"supportsInterface\", [r]);\n      return jsonRpcProvider.send(\"eth_call\", [{\n        to: addr,\n        data: supportsInterfaceCalldata\n      }, \"latest\", {\n        [addr]: {\n          code: coreBytecode\n        }\n      }]);\n    }));\n    const supportsInterfaceDecoded = supportsInterfaceResult.map(r => {\n      return coreIface.decodeFunctionResult(\"supportsInterface\", r);\n    });\n    if (supportsInterfaceDecoded.flat().some(element => element === false)) {\n      return false;\n    }\n  }\n\n  // check duplicate callback/fallback signatures\n  selectors.push(...extensionFallbackSelectors, ...extensionCallbackSelectors);\n  return !hasDuplicates(selectors.flat(), (a, b) => a === b);\n}\n\nfunction toUnits(amount, decimals) {\n  return utils.parseUnits(AmountSchema.parse(amount), decimals);\n}\n\nfunction toDisplayValue(amount, decimals) {\n  return utils.formatUnits(amount, decimals);\n}\n\n/**\n *\n * @internal\n * @param provider - The provider to use\n * @param storage - The storage to use\n * @param create2Factory - The create2 factory to use\n */\nasync function computeNativeTokenAddress(provider, storage, create2Factory, clientId, secretKey) {\n  if (!create2Factory || create2Factory === \"\") {\n    create2Factory = await getCreate2FactoryAddress(provider);\n  }\n  return (await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n    contractName: \"WETH9\"\n  }, clientId, secretKey)).transaction.predictedAddress;\n}\n\n/**\n * Deploy a contract at a deterministic address, using Create2 method\n * Address depends on the Create2 factory address.\n *\n * @internal\n *\n * @param signer - The signer to use\n * @param bytecode - The bytecode to deploy\n * @param encodedArgs - The encoded constructor args to use\n * @param create2FactoryAddress - The create2 factory address to use\n */\nasync function deployContractDeterministicRaw(signer, bytecode, encodedArgs, create2FactoryAddress, options, predictedAddress) {\n  let gasLimit = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 7000000;\n  // Check if the implementation contract is already deployed\n  invariant(signer.provider, \"Provider required\");\n  const contractDeployed = predictedAddress ? await isContractDeployed(predictedAddress, signer.provider) : false;\n  if (!contractDeployed) {\n    console.debug(`deploying contract via create2 factory at: ${predictedAddress}`);\n    const initBytecodeWithSalt = getInitBytecodeWithSalt(bytecode, encodedArgs);\n    const tx = {\n      to: create2FactoryAddress,\n      data: initBytecodeWithSalt\n    };\n    try {\n      await signer.estimateGas(tx);\n    } catch (e) {\n      console.debug(\"error estimating gas while deploying prebuilt: \", e);\n      tx.gasLimit = BigNumber.from(gasLimit);\n    }\n    await (await signer.sendTransaction(tx)).wait();\n  }\n}\n\n/**\n * @internal\n */\nfunction getCachedAbiForContract(address) {\n  if (address in GENERATED_ABI) {\n    return GENERATED_ABI[address];\n  }\n  return undefined;\n}\n\nlet ProposalState = /*#__PURE__*/function (ProposalState) {\n  ProposalState[ProposalState[\"Pending\"] = 0] = \"Pending\";\n  ProposalState[ProposalState[\"Active\"] = 1] = \"Active\";\n  ProposalState[ProposalState[\"Canceled\"] = 2] = \"Canceled\";\n  ProposalState[ProposalState[\"Defeated\"] = 3] = \"Defeated\";\n  ProposalState[ProposalState[\"Succeeded\"] = 4] = \"Succeeded\";\n  ProposalState[ProposalState[\"Queued\"] = 5] = \"Queued\";\n  ProposalState[ProposalState[\"Expired\"] = 6] = \"Expired\";\n  ProposalState[ProposalState[\"Executed\"] = 7] = \"Executed\";\n  return ProposalState;\n}({});\n\nconst PropertiesInput = /* @__PURE__ */(() => z.object({}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst OptionalPropertiesInput = /* @__PURE__ */(() => z.union([z.array(PropertiesInput), PropertiesInput]).optional())();\n\n/**\n * @internal\n */\nconst EditionMetadataOutputSchema = /* @__PURE__ */(() => z.object({\n  supply: BigNumberSchema,\n  metadata: CommonNFTOutput\n}))();\n\n/**\n * @internal\n */\nconst EditionMetadataWithOwnerOutputSchema = /* @__PURE__ */(() => EditionMetadataOutputSchema.extend({\n  owner: z.string(),\n  quantityOwned: BigNumberSchema\n}))();\n\n/**\n * @internal\n */\nconst EditionMetadataInputSchema = /* @__PURE__ */(() => z.object({\n  supply: BigNumberishSchema,\n  metadata: CommonNFTInput\n}))();\n\n/**\n * @internal\n */\nconst EditionMetadataInputOrUriSchema = /* @__PURE__ */(() => z.object({\n  supply: BigNumberishSchema,\n  metadata: NFTInputOrUriSchema\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @internal\n */\nconst TokenMintInputSchema = /* @__PURE__ */(() => z.object({\n  toAddress: AddressOrEnsSchema,\n  amount: AmountSchema\n}))();\n\n/**\n * @public\n */\n\n/**\n * The parameters for [`getBuyWithCryptoHistory`](https://portal.thirdweb.com/references/typescript/v4/getBuyWithCryptoHistory) function\n * It takes the wallet history address and optional cursor and page size. for paginated results.\n */\n\n/**\n * Gets the History of purchases for a given wallet address\n * @param params - Object of type [`BuyWithCryptoHistoryParams`](https://portal.thirdweb.com/references/typescript/v4/BuyWithCryptoHistoryParams)\n * @example\n *\n * ```ts\n//  * import { BuyWithCryptoHistoryData } from \"@thirdweb-dev/sdk\";\n *\n * const walletAddress = \"0x...\";\n * const params = {\n *  clientId: \"YOUR_CLIENT_ID\",\n *  walletAddress,\n * };\n *\n * // grabs the history of purchase transactions for the wallet address\n * const status = await getBuyWithCryptoHistory(params)\n * ```\n * @returns Object of type [`BuyWithCryptoHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoHistoryData)\n */\nasync function getBuyWithCryptoHistory(params) {\n  let client;\n  if (params.secretKey) {\n    client = createThirdwebClient({\n      secretKey: params.secretKey\n    });\n  }\n  if (params.clientId) {\n    client = createThirdwebClient({\n      clientId: params.clientId\n    });\n  }\n  if (!client) {\n    throw new Error(\"You must provide either a `clientId` or a `secretKey` to get a quote\");\n  }\n  return getBuyWithCryptoHistory$1({\n    ...params,\n    client: client\n  });\n}\n\n/**\n * The parameters for [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v4/getBuyWithCryptoQuote) function\n * It includes information about which tokens to swap, the amount of tokens to swap, slippage, etc.\n */\n\n/**\n * Get a quote of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) to buy any given token with crypto.\n * This quote contains the information about the swap such as token amounts, processing fees, estimated time etc.\n *\n * Once you have the quote, you can use `prepareTransaction` and prepare the transaction for submission.\n * @param params - object of type [`GetBuyWithCryptoQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithCryptoQuoteParams)\n * @returns Object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @example\n *\n * ```ts\n * import { getBuyWithCryptoQuote } from \"@thirdweb-dev/sdk\";\n *\n * const quote = await getBuyWithCryptoQuote({\n *  clientId: \"...\",\n *  fromAddress: \"0x...\", // wallet address\n *  fromChainId: 137, // chain id of the source token\n *  fromTokenAddress: \"0x...\", // token address of the source token\n *  fromAmount: \"10\", // amount of source token to swap\n *  // optionally, you can use `toAmount` instead if you only want a certain amount of destination token\n *  toChainId: 10, // chain id of the destination token\n *  toTokenAddress: \"0x...\", // token address of the destination token\n *  toAddress: \"0x...\", // optional: send the tokens to a different address\n *  maxSlippageBPS: 50, // optional: max 0.5% slippage\n * });\n * ```\n */\nasync function getBuyWithCryptoQuote(params) {\n  let client;\n  if (params.secretKey) {\n    client = createThirdwebClient({\n      secretKey: params.secretKey\n    });\n  }\n  if (params.clientId) {\n    client = createThirdwebClient({\n      clientId: params.clientId\n    });\n  }\n  if (!client) {\n    throw new Error(\"You must provide either a `clientId` or a `secretKey` to get a quote\");\n  }\n  const data = await getBuyWithCryptoQuote$1({\n    ...params,\n    client\n  });\n  const sendTxn = prepareTransaction(data.transactionRequest);\n  const approvalTxn = data.approval ? prepareTransaction(data.approval) : undefined;\n  const [sendTxnTo, sendTxnData, sendTxnGasPrice, sendTxnGasLimit, sendTxnNonce, sendTxnValue, approvalTxnTo, approvalTxnData, approvalTxnGasLimit, approvalTxnGasPrice, approvalTxnNonce, approvalTxnValue] = await Promise.all([resolvePromisedValue(sendTxn.to), resolvePromisedValue(sendTxn.data), resolvePromisedValue(sendTxn.gasPrice), resolvePromisedValue(sendTxn.gas), resolvePromisedValue(sendTxn.nonce), resolvePromisedValue(sendTxn.value), resolvePromisedValue(approvalTxn?.to), resolvePromisedValue(approvalTxn?.data), resolvePromisedValue(approvalTxn?.gas), resolvePromisedValue(approvalTxn?.gasPrice), resolvePromisedValue(approvalTxn?.nonce), resolvePromisedValue(approvalTxn?.value)]);\n  const swapRoute = {\n    transactionRequest: {\n      to: sendTxnTo,\n      data: sendTxnData,\n      gasPrice: sendTxnGasPrice,\n      gasLimit: sendTxnGasLimit,\n      nonce: sendTxnNonce,\n      value: sendTxnValue,\n      chainId: sendTxn.chain.id\n    },\n    approval: approvalTxn ? {\n      to: approvalTxnTo,\n      data: approvalTxnData,\n      gasLimit: approvalTxnGasLimit,\n      gasPrice: approvalTxnGasPrice,\n      nonce: approvalTxnNonce,\n      value: approvalTxnValue,\n      chainId: approvalTxn.chain.id\n    } : undefined,\n    swapDetails: data.swapDetails,\n    paymentTokens: data.paymentTokens,\n    processingFees: data.processingFees,\n    client\n  };\n  return swapRoute;\n}\n\n/**\n * Gets the status of a buy with crypto transaction\n * @param buyWithCryptoTransaction - Object of type [`BuyWithCryptoTransaction`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransaction)\n * @example\n *\n * ```ts\n * import { getBuyWithCryptoStatus, getBuyWithCryptoQuote } @thirdweb-dev/sdk\";\n *\n * // get a quote between two tokens\n * const quote = await getBuyWithCryptoQuote(quoteParams);\n * // if approval is required, send the approval transaction\n * if (quote.approval) {\n *   const response = await signer.sendTransaction(quote.approval);\n * }\n * // send the quoted transaction\n * const transactionResult = await signer.sendTransaction(\n *   quote.transactionRequest,\n * );\n * // keep polling the status of the quoted transaction until it * returns a success or failure status\n * const status = await getBuyWithCryptoStatus({\n *   clientId: \"YOUR_CLIENT_ID\",\n *   transactionHash: transactionResult.hash,\n * });\n * ```\n * @returns Object of type [`BuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v4/BuyWithCryptoStatus)\n */\nasync function getBuyWithCryptoStatus(buyWithCryptoTransaction) {\n  return getBuyWithCryptoStatus$1({\n    ...buyWithCryptoTransaction,\n    client: createThirdwebClient({\n      clientId: buyWithCryptoTransaction.clientId\n    })\n  });\n}\n\nexport { EditionMetadataOutputSchema as E, OptionalPropertiesInput as O, ProposalState as P, TokenMintInputSchema as T, toDisplayValue as a, getBuyWithCryptoHistory as b, getBuyWithCryptoQuote as c, getBuyWithCryptoStatus as d, compatibleExtensions as e, computeNativeTokenAddress as f, getCachedAbiForContract as g, deployContractDeterministicRaw as h, EditionMetadataWithOwnerOutputSchema as i, EditionMetadataInputSchema as j, EditionMetadataInputOrUriSchema as k, matchesPrebuiltAbi as m, toUnits as t };\n", "// convince abitype that things are OK\ndeclare module \"abitype\" {\n  export interface Register {\n    AddressType: string;\n  }\n}\n\n/**\n * CONSTANTS\n */\nexport {\n  ADDRESS_ZERO,\n  ZERO_ADDRESS,\n  NATIVE_TOKEN_ADDRESS,\n} from \"../constants/addresses.js\";\n\n/**\n * CLIENT\n */\nexport {\n  createThirdwebClient,\n  type CreateThirdwebClientOptions,\n  type ThirdwebClient,\n} from \"../client/client.js\";\n\n/**\n * CHAIN\n */\n// chain type\nexport type { Chain } from \"../chains/types.js\";\n// define chain\nexport { defineChain } from \"../chains/utils.js\";\n\n/**\n * RPC\n */\n// rpc client\nexport { getRpcClient } from \"../rpc/rpc.js\";\n// blockNumber watcher\nexport {\n  watchBlockNumber,\n  type WatchBlockNumberOptions,\n} from \"../rpc/watchBlockNumber.js\";\n\n// all the actions\nexport { eth_blockNumber } from \"../rpc/actions/eth_blockNumber.js\";\nexport { eth_call } from \"../rpc/actions/eth_call.js\";\nexport { eth_estimateGas } from \"../rpc/actions/eth_estimateGas.js\";\nexport { eth_gasPrice } from \"../rpc/actions/eth_gasPrice.js\";\nexport { eth_getBalance } from \"../rpc/actions/eth_getBalance.js\";\nexport { eth_getBlockByHash } from \"../rpc/actions/eth_getBlockByHash.js\";\nexport { eth_getBlockByNumber } from \"../rpc/actions/eth_getBlockByNumber.js\";\nexport { eth_getCode } from \"../rpc/actions/eth_getCode.js\";\nexport { eth_getLogs } from \"../rpc/actions/eth_getLogs.js\";\nexport { eth_getStorageAt } from \"../rpc/actions/eth_getStorageAt.js\";\nexport { eth_getTransactionByHash } from \"../rpc/actions/eth_getTransactionByHash.js\";\nexport { eth_getTransactionCount } from \"../rpc/actions/eth_getTransactionCount.js\";\nexport { eth_getTransactionReceipt } from \"../rpc/actions/eth_getTransactionReceipt.js\";\nexport { eth_maxPriorityFeePerGas } from \"../rpc/actions/eth_maxPriorityFeePerGas.js\";\nexport { eth_sendRawTransaction } from \"../rpc/actions/eth_sendRawTransaction.js\";\n\n/**\n * CONTRACT\n */\nexport {\n  getContract,\n  type ContractOptions,\n  type ThirdwebContract,\n} from \"../contract/contract.js\";\n\n/**\n * TRANSACTIONS\n */\n\nexport {\n  prepareTransaction,\n  type PrepareTransactionOptions,\n  type PreparedTransaction,\n} from \"../transaction/prepare-transaction.js\";\n\nexport {\n  isBaseTransactionOptions,\n  type BaseTransactionOptions,\n} from \"../transaction/types.js\";\n\nexport {\n  prepareContractCall,\n  type PrepareContractCallOptions,\n} from \"../transaction/prepare-contract-call.js\";\n\nexport {\n  readContract,\n  type ReadContractOptions,\n} from \"../transaction/read-contract.js\";\n\n// method resolver\nexport { resolveMethod } from \"../transaction/resolve-method.js\";\n\n// transaction actions\nexport { encode } from \"../transaction/actions/encode.js\";\nexport {\n  estimateGas,\n  type EstimateGasOptions,\n} from \"../transaction/actions/estimate-gas.js\";\nexport { estimateGasCost } from \"../transaction/actions/estimate-gas-cost.js\";\nexport {\n  getGasPrice,\n  type GetGasPriceOptions,\n} from \"../gas/get-gas-price.js\";\nexport {\n  sendTransaction,\n  type SendTransactionOptions,\n} from \"../transaction/actions/send-transaction.js\";\nexport { sendAndConfirmTransaction } from \"../transaction/actions/send-and-confirm-transaction.js\";\nexport {\n  sendBatchTransaction,\n  type SendBatchTransactionOptions,\n} from \"../transaction/actions/send-batch-transaction.js\";\nexport {\n  simulateTransaction,\n  type SimulateOptions,\n} from \"../transaction/actions/simulate.js\";\nexport { waitForReceipt } from \"../transaction/actions/wait-for-tx-receipt.js\";\nexport { signTransaction } from \"../transaction/actions/sign-transaction.js\";\nexport { serializeTransaction } from \"../transaction/serialize-transaction.js\";\nexport {\n  toSerializableTransaction,\n  type ToSerializableTransactionOptions,\n} from \"../transaction/actions/to-serializable-transaction.js\";\n\n/**\n * EVENTS\n */\nexport {\n  prepareEvent,\n  type PrepareEventOptions,\n  type PreparedEvent,\n} from \"../event/prepare-event.js\";\n\n// actions\nexport {\n  getContractEvents,\n  type GetContractEventsOptions,\n  type GetContractEventsResult,\n} from \"../event/actions/get-events.js\";\nexport {\n  parseEventLogs,\n  type ParseEventLogsOptions,\n  type ParseEventLogsResult,\n} from \"../event/actions/parse-logs.js\";\nexport {\n  watchContractEvents,\n  type WatchContractEventsOptions,\n} from \"../event/actions/watch-events.js\";\n\n/**\n * TYPES\n */\nexport type { NFT } from \"../utils/nft/parseNft.js\";\n\n/**\n * UNITS\n */\nexport { toEther, toTokens, toUnits, toWei, fromGwei } from \"../utils/units.js\";\n\nexport {\n  getBuyWithCryptoQuote,\n  type BuyWithCryptoQuote,\n  type QuoteApprovalParams,\n  type QuoteTokenInfo,\n  type GetBuyWithCryptoQuoteParams,\n} from \"../pay/buyWithCrypto/getQuote.js\";\n\nexport {\n  getBuyWithCryptoStatus,\n  type BuyWithCryptoStatus,\n  type BuyWithCryptoTransaction,\n} from \"../pay/buyWithCrypto/getStatus.js\";\n\nexport {\n  getBuyWithCryptoHistory,\n  type BuyWithCryptoHistoryData,\n  type BuyWithCryptoHistoryParams,\n} from \"../pay/buyWithCrypto/getHistory.js\";\n\nexport type {\n  PayOnChainTransactionDetails,\n  PayTokenInfo,\n} from \"../pay/utils/commonTypes.js\";\n\n// ------------------------------------------------\n// encoding\n// ------------------------------------------------\n\n// hex\nexport {\n  boolToHex,\n  // from\n  fromHex,\n  hexToBigInt,\n  hexToBool,\n  hexToNumber,\n  hexToString,\n  hexToUint8Array,\n  // util\n  isHex,\n  numberToHex,\n  padHex,\n  stringToHex,\n  // to\n  toHex,\n  uint8ArrayToHex,\n  type BoolToHexOpts,\n  type FromHexParameters,\n  type FromHexReturnType,\n  type HexToBigIntOpts,\n  type HexToBoolOpts,\n  type HexToNumberOpts,\n  type HexToStringOpts,\n  type HexToUint8ArrayOpts,\n  type IsHexOptions,\n  type NumberToHexOpts,\n  type StringToHexOpts,\n  type ToHexParameters,\n  type Uint8ArrayToHexOpts,\n  type Hex,\n} from \"../utils/encoding/hex.js\";\nexport { concatHex } from \"../utils/encoding/helpers/concat-hex.js\";\n\n// bytes\n// to\nexport {\n  boolToBytes,\n  hexToBytes,\n  numberToBytes,\n  stringToBytes,\n  toBytes,\n  type BoolToBytesOpts,\n  type HexToBytesOpts,\n  type StringToBytesOpts,\n  type ToBytesParameters,\n} from \"../utils/encoding/to-bytes.js\";\n// from\nexport {\n  bytesToBigInt,\n  bytesToBool,\n  bytesToNumber,\n  bytesToString,\n  fromBytes,\n  type BytesToBigIntOpts,\n  type BytesToBoolOpts,\n  type BytesToNumberOpts,\n  type BytesToStringOpts,\n  type FromBytesParameters,\n  type FromBytesReturnType,\n} from \"../utils/encoding/from-bytes.js\";\n\n// ------------------------------------------------\n// hashing\n// ------------------------------------------------\n\n// keccak256\nexport { keccak256 } from \"../utils/hashing/keccak256.js\";\n\n// sha256\nexport { sha256 } from \"../utils/hashing/sha256.js\";\n\n// ------------------------------------------------\n// address\n// ------------------------------------------------\nexport {\n  getAddress,\n  isAddress,\n  type Address,\n  type AddressInput,\n} from \"../utils/address.js\";\n\n// re-exports of types\nexport type { AbiParameterToPrimitiveType } from \"abitype\";\n", "import { computeClientIdFromSecretKey } from \"../utils/client-id.js\";\nimport type { Prettify } from \"../utils/type-utils.js\";\n\ntype FetchConfig = {\n  requestTimeoutMs?: number;\n  keepalive?: boolean;\n  headers?: HeadersInit;\n};\n\ntype ClientOptions = Prettify<{\n  /**\n   * The configuration options for the client.\n   */\n  config?: {\n    /**\n     * The configuration options for the RPC client.\n     */\n    rpc?: {\n      /**\n       * The configuration options for the fetch function.\n       * @default {}\n       */\n      fetch?: FetchConfig;\n      /**\n       * The maximum number of requests to batch together.\n       * @default 100\n       */\n      maxBatchSize?: number;\n      /**\n       * The maximum time to wait before sending a batch of requests.\n       * @default 0 (no timeout)\n       */\n      batchTimeoutMs?: number;\n    };\n    /**\n     * The configuration options for the storage client.\n     */\n    storage?: {\n      /**\n       * The configuration options for the fetch function.\n       * @default {}\n       */\n      fetch?: FetchConfig;\n      /**\n       * The IPFS gateway URL.\n       * @default \"https://<your_client_id>.ipfscdn.io/ipfs/<cid>\"\n       */\n      gatewayUrl?: string;\n    };\n  };\n}>;\n\nexport type CreateThirdwebClientOptions = Prettify<\n  (\n    | {\n        clientId: string;\n        secretKey?: never;\n      }\n    | {\n        clientId?: never;\n        secretKey: string;\n      }\n  ) &\n    ClientOptions\n>;\n\nexport type ThirdwebClient = {\n  readonly clientId: string;\n  readonly secretKey: string | undefined;\n} & Readonly<ClientOptions>;\n\n/**\n * Creates a Thirdweb client with the provided options.\n * @param options - The options for creating the client.\n * @returns The created Thirdweb client.\n * @throws An error if neither `clientId` nor `secretKey` is provided.\n * @example\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * const client = createThirdwebClient({ clientId: \"...\" });\n * ```\n */\nexport function createThirdwebClient(\n  options: CreateThirdwebClientOptions,\n): ThirdwebClient {\n  const { clientId, secretKey, ...rest } = options;\n  // if secretKey is provided, compute the clientId from it (and ignore any clientId passed in)\n  if (secretKey) {\n    return {\n      ...rest,\n      clientId: computeClientIdFromSecretKey(secretKey),\n      secretKey,\n    } as const;\n  }\n  // otherwise if clientId is provided, use it\n  if (clientId) {\n    return {\n      ...rest,\n      clientId: options.clientId,\n      secretKey: undefined,\n    } as const;\n  }\n\n  // otherwise throw an error\n  throw new Error(\"clientId or secretKey must be provided\");\n}\n", "import { LruMap } from \"./caching/lru.js\";\nimport { stringToBytes } from \"./encoding/to-bytes.js\";\nimport { sha256 } from \"./hashing/sha256.js\";\n\nconst cache = new LruMap<string>(4096);\n\n/**\n * @param secretKey - the secret key to compute the client id from\n * @returns the 32 char hex client id\n * @internal\n */\nexport function computeClientIdFromSecretKey(secretKey: string): string {\n  if (cache.has(secretKey)) {\n    return cache.get(secretKey) as string;\n  }\n  // we slice off the leading `0x` and then take the first 32 chars\n  const cId = sha256(stringToBytes(secretKey)).slice(2, 34);\n  cache.set(secretKey, cId);\n  return cId;\n}\n", "import { sha256 as noble_sha256 } from \"@noble/hashes/sha256\";\nimport {\n  type Hex,\n  hexToUint8Array,\n  isHex,\n  uint8ArrayToHex,\n} from \"../encoding/hex.js\";\n\ntype To = \"hex\" | \"bytes\";\n\nexport type Sha256Hash<TTo extends To> =\n  | (TTo extends \"bytes\" ? Uint8Array : never)\n  | (TTo extends \"hex\" ? Hex : never);\n\n/**\n * Calculates the SHA256 hash of the given value.\n * @param value - The value to hash. It can be either a hexadecimal string or a Uint8Array.\n * @param to - (Optional) The desired output format of the hash. Defaults to 'hex'.\n * @returns The SHA256 hash of the value in the specified format.\n * @example\n * ```ts\n * import { sha256 } from \"thirdweb/utils\";\n * const hash = sha256(\"0x1234\");\n * ```\n * @utils\n */\nexport function sha256<TTo extends To = \"hex\">(\n  value: Hex | Uint8Array,\n  to?: TTo,\n): Sha256Hash<TTo> {\n  const bytes = noble_sha256(\n    isHex(value, { strict: false }) ? hexToUint8Array(value) : value,\n  );\n  if (to === \"bytes\") {\n    return bytes as Sha256Hash<TTo>;\n  }\n  return uint8ArrayToHex(bytes) as Sha256Hash<TTo>;\n}\n", "import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Choice: a ? b : c\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "import type { Address } from \"abitype\";\nimport type { BlockTag, EIP1193RequestFn, EIP1474Methods, Hex } from \"viem\";\nimport { hexToBigInt } from \"../../utils/encoding/hex.js\";\n\ntype GetBalanceParams = {\n  address: Address;\n  blockTag?: BlockTag;\n};\n\n/**\n * Retrieves the balance of the specified Ethereum address.\n * @param request - The EIP1193 request function.\n * @param params - The parameters for retrieving the balance.\n * @returns A promise that resolves to the balance of the address in wei as bigint.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_getBalance } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const balance = await eth_getBalance(rpcRequest, {\n *  address: \"0x...\",\n * });\n * ```\n */\nexport async function eth_getBalance(\n  request: EIP1193RequestFn<EIP1474Methods>,\n  params: GetBalanceParams,\n): Promise<bigint> {\n  const hexBalance = await request({\n    method: \"eth_getBalance\",\n    params: [params.address as Hex, params.blockTag || \"latest\"],\n  });\n  return hexToBigInt(hexBalance);\n}\n", "import {\n  type EIP1193RequestFn,\n  type EIP1474Methods,\n  type GetBlockReturnType,\n  type Hash,\n  formatBlock,\n} from \"viem\";\n\ntype GetBlockByHashParams<TIncludeTransactions extends boolean = false> = {\n  /** Whether or not to include transaction data in the response. */\n  includeTransactions?: TIncludeTransactions;\n} & {\n  /** Hash of the block. */\n  blockHash: Hash;\n};\n\n/**\n * Retrieves a block by its hash.\n * @param request - The EIP1193 request function.\n * @param params - The parameters for the block retrieval.\n * @returns A promise that resolves to the retrieved block.\n * @throws An error if the block is not found.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_getBlockByHash } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const block = await eth_getBlockByHash(rpcRequest, {\n * blockHash: \"0x...\",\n * includeTransactions: true,\n * });\n * ```\n */\nexport async function eth_getBlockByHash<\n  TIncludeTransactions extends boolean = false,\n>(\n  request: EIP1193RequestFn<EIP1474Methods>,\n  params: GetBlockByHashParams<TIncludeTransactions>,\n): Promise<GetBlockReturnType<undefined, TIncludeTransactions>> {\n  const includeTransactions = params.includeTransactions ?? false;\n\n  const block = await request({\n    method: \"eth_getBlockByHash\",\n    params: [params.blockHash, includeTransactions],\n  });\n  if (!block) {\n    throw new Error(\"Block not found\");\n  }\n  return formatBlock(block) as GetBlockReturnType<\n    undefined,\n    TIncludeTransactions\n  >;\n}\n", "import type { Address } from \"abitype\";\nimport {\n  type BlockNumber,\n  type BlockTag,\n  type EIP1193RequestFn,\n  type EIP1474Methods,\n  type Hash,\n  type LogTopic,\n  type RpcLog,\n  formatLog,\n} from \"viem\";\nimport { numberToHex } from \"../../utils/encoding/hex.js\";\n\nexport type GetLogsBlockParams =\n  | {\n      fromBlock?: BlockNumber | BlockTag;\n      toBlock?: BlockNumber | BlockTag;\n      blockHash?: never;\n      blockRange?: never;\n    }\n  | {\n      fromBlock?: never;\n      toBlock?: never;\n      blockHash?: Hash;\n      blockRange?: never;\n    }\n  | {\n      fromBlock?: BlockNumber | \"latest\";\n      toBlock?: never;\n      blockRange: BlockNumber;\n      blockHash?: never;\n    }\n  | {\n      fromBlock?: never;\n      toBlock?: BlockNumber | \"latest\";\n      blockRange: BlockNumber;\n      blockHash?: never;\n    }\n  | {\n      fromBlock?: never;\n      toBlock?: never;\n      blockRange: BlockNumber;\n      blockHash?: never;\n    };\n\nexport type GetLogsParams = {\n  topics?: LogTopic[];\n  address?: Address;\n} & GetLogsBlockParams;\n\n/**\n * Retrieves logs from the Ethereum blockchain based on the specified parameters.\n * @param request - The EIP1193 request function.\n * @param params - The parameters for retrieving logs.\n * @returns A promise that resolves to the retrieved logs.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_getLogs } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const logs = await eth_getLogs(rpcRequest, {\n *  address: \"0x...\",\n *  fromBlock: 123456n,\n *  toBlock: 123456n,\n * });\n * ```\n */\nexport async function eth_getLogs(\n  request: EIP1193RequestFn<EIP1474Methods>,\n  params: GetLogsParams = {},\n) {\n  const topics = params.topics ?? [];\n\n  let logs: RpcLog[];\n  // in the case we have a blockHash\n  if (params.blockHash) {\n    const param: {\n      address?: string | string[];\n      topics: LogTopic[];\n      blockHash: `0x${string}`;\n    } = {\n      topics,\n      blockHash: params.blockHash,\n    };\n    if (params.address) {\n      param.address = params.address;\n    }\n    logs = await request({\n      method: \"eth_getLogs\",\n      params: [param],\n    });\n  }\n  // otherwise\n  else {\n    const param: {\n      address?: string | string[];\n      topics?: LogTopic[];\n    } & (\n      | {\n          fromBlock?: BlockTag | `0x${string}`;\n          toBlock?: BlockTag | `0x${string}`;\n          blockHash?: never;\n        }\n      | {\n          fromBlock?: never;\n          toBlock?: never;\n          blockHash?: `0x${string}`;\n        }\n    ) = { topics };\n    if (params.address) {\n      param.address = params.address;\n    }\n\n    if (params.fromBlock) {\n      param.fromBlock =\n        typeof params.fromBlock === \"bigint\"\n          ? numberToHex(params.fromBlock)\n          : params.fromBlock;\n    }\n    if (params.toBlock) {\n      param.toBlock =\n        typeof params.toBlock === \"bigint\"\n          ? numberToHex(params.toBlock)\n          : params.toBlock;\n    }\n\n    logs = await request({\n      method: \"eth_getLogs\",\n      params: [param],\n    });\n  }\n\n  return logs.map((log) => formatLog(log));\n}\n", "import type { BlockTag, EIP1193RequestFn, EIP1474Methods, Hex } from \"viem\";\n\ntype GetStorageAtParams = {\n  address: string;\n  position: Hex;\n  blockTag?: BlockTag;\n};\n\n/**\n * Retrieves the value stored at a specific position in the storage of a contract.\n * @param request - The EIP1193 request function.\n * @param params - The parameters for the eth_getStorageAt method.\n * @returns A promise that resolves to the value stored at the specified position.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_getStorageAt } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const storageValue = await eth_getStorageAt(rpcRequest, {\n * address: \"0x...\",\n *  position: 0n,\n * });\n * ```\n */\nexport async function eth_getStorageAt(\n  request: EIP1193RequestFn<EIP1474Methods>,\n  params: GetStorageAtParams,\n): Promise<Hex> {\n  return await request({\n    method: \"eth_getStorageAt\",\n    params: [params.address, params.position, params.blockTag ?? \"latest\"],\n  });\n}\n", "import {\n  type EIP1193RequestFn,\n  type EIP1474Methods,\n  type Hash,\n  type Transaction,\n  formatTransaction,\n} from \"viem\";\n\ntype GetTransactionByHashParameters = {\n  hash: Hash;\n};\n\n/**\n * Retrieves a transaction by its hash.\n * @param request - The EIP1193 request function.\n * @param params - The parameters for retrieving the transaction.\n * @returns A promise that resolves to the transaction.\n * @throws An error if the transaction is not found.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_getTransactionByHash } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n *  const transaction = await eth_getTransactionByHash(rpcRequest, {\n *  hash: \"0x...\",\n * });\n * ```\n */\nexport async function eth_getTransactionByHash(\n  request: EIP1193RequestFn<EIP1474Methods>,\n  params: GetTransactionByHashParameters,\n): Promise<Transaction> {\n  const receipt = await request({\n    method: \"eth_getTransactionByHash\",\n    params: [params.hash],\n  });\n\n  if (!receipt) {\n    throw new Error(\"Transaction not found.\");\n  }\n\n  return formatTransaction(receipt);\n}\n", "import type { EIP1193RequestFn, EIP1474Methods, Hex } from \"viem\";\n\n/**\n * Sends a raw transaction to the Ethereum network.\n * @param request - The EIP1193 request function.\n * @param signedTransaction - The signed transaction in hex format.\n * @returns A promise that resolves to the transaction hash.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_sendRawTransaction } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const transactionHash = await eth_sendRawTransaction(rpcRequest, \"0x...\");\n * ```\n */\nexport async function eth_sendRawTransaction(\n  request: EIP1193RequestFn<EIP1474Methods>,\n  signedTransaction: Hex,\n) {\n  return await request({\n    method: \"eth_sendRawTransaction\",\n    params: [signedTransaction],\n  });\n}\n", "import type { Abi, AbiFunction, Address } from \"abitype\";\nimport type { AccessList, Hex } from \"viem\";\nimport type { Chain } from \"../chains/types.js\";\nimport type { ThirdwebClient } from \"../client/client.js\";\nimport type { ThirdwebContract } from \"../contract/contract.js\";\nimport type { PreparedMethod } from \"../utils/abi/prepare-method.js\";\nimport type { PromisedObject } from \"../utils/promise/resolve-promised-value.js\";\n\nexport type StaticPrepareTransactionOptions = {\n  accessList?: AccessList | undefined;\n  to?: Address | undefined;\n  data?: Hex | undefined;\n  value?: bigint | undefined;\n  gas?: bigint | undefined;\n  gasPrice?: bigint | undefined;\n  maxFeePerGas?: bigint | undefined;\n  maxPriorityFeePerGas?: bigint | undefined;\n  maxFeePerBlobGas?: bigint | undefined;\n  nonce?: number | undefined;\n  extraGas?: bigint | undefined;\n  // zksync specific\n  eip712?: EIP721TransactionOptions | undefined;\n  // tw specific\n  chain: Chain;\n  client: ThirdwebClient;\n};\n\nexport type EIP721TransactionOptions = {\n  // constant or user input\n  gasPerPubdata?: bigint | undefined;\n  // optional signature, generated\n  customSignature?: Hex | undefined;\n  // optional, used to deploy contracts with the transaction\n  factoryDeps?: Hex[] | undefined;\n  // optional, paymaster contract address to invoke\n  paymaster?: Address | undefined;\n  // optional, paymaster contract input\n  paymasterInput?: Hex | undefined;\n};\n\nexport type EIP721SerializedTransaction = {\n  txType: bigint;\n  from: bigint;\n  to: bigint;\n  gasLimit: bigint;\n  gasPerPubdataByteLimit: bigint;\n  maxFeePerGas: bigint;\n  maxPriorityFeePerGas: bigint;\n  nonce: bigint;\n  value: bigint;\n  data: Hex;\n  factoryDeps: Hex[];\n  paymaster: bigint;\n  paymasterInput: Hex;\n};\n\nexport type PrepareTransactionOptions = {\n  chain: Chain;\n  client: ThirdwebClient;\n} & PromisedObject<Omit<StaticPrepareTransactionOptions, \"chain\" | \"client\">>;\n\ntype Additional<\n  abi extends Abi = [],\n  abiFn extends AbiFunction = AbiFunction,\n> = {\n  preparedMethod: () => Promise<PreparedMethod<abiFn>>;\n  contract: ThirdwebContract<abi>;\n};\n\nexport type PreparedTransaction<\n  abi extends Abi = [],\n  abiFn extends AbiFunction = AbiFunction,\n  options extends PrepareTransactionOptions = PrepareTransactionOptions,\n> = Readonly<options> & {\n  __preparedMethod?: () => Promise<PreparedMethod<abiFn>>;\n  __contract?: ThirdwebContract<abi>;\n};\n\n/**\n * Prepares a transaction with the given options.\n * @param options - The options for preparing the transaction.\n * @param info - Additional information about the ABI function.\n * @returns The prepared transaction.\n * @transaction\n * @example\n * ```ts\n * import { prepareTransaction, toWei } from \"thirdweb\";\n * import { ethereum } from \"thirdweb/chains\";\n * const transaction = prepareTransaction({\n *  to: \"0x1234567890123456789012345678901234567890\",\n *  chain: ethereum,\n *  client: thirdwebClient,\n *  value: toWei(\"1.0\"),\n *  gasPrice: 30n\n * });\n * ```\n */\nexport function prepareTransaction<\n  const abi extends Abi = [],\n  const abiFn extends AbiFunction = AbiFunction,\n>(options: PrepareTransactionOptions, info?: Additional<abi, abiFn>) {\n  if (info) {\n    // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n    (options as any).__preparedMethod = info.preparedMethod;\n    // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n    (options as any).__contract = info.contract;\n  }\n  return options as PreparedTransaction<abi, abiFn>;\n}\n", "import type {\n  Abi,\n  AbiFunction,\n  AbiParameter,\n  AbiParametersToPrimitiveTypes,\n  ExtractAbiFunction,\n  ParseAbiItem,\n} from \"abitype\";\nimport type { TransactionReceipt as ViemTransactionReceipt } from \"viem\";\nimport type { ThirdwebContract } from \"../contract/contract.js\";\nimport type { Hex } from \"../utils/encoding/hex.js\";\nimport { isObjectWithKeys } from \"../utils/type-guards.js\";\nimport type {\n  PreparedTransaction,\n  StaticPrepareTransactionOptions,\n} from \"./prepare-transaction.js\";\n\nexport type SendTransactionResult = {\n  readonly transactionHash: Hex;\n};\n\nexport type TransactionReceipt = ViemTransactionReceipt;\n\nexport type WithOverrides<T> = T & {\n  overrides?: Omit<\n    StaticPrepareTransactionOptions,\n    \"to\" | \"from\" | \"data\" | \"maxFeePerBlobGas\" | \"chain\" | \"client\"\n  >;\n};\n\nexport type ParamsOption<inputs extends readonly AbiParameter[]> =\n  inputs extends {\n    length: 0;\n  }\n    ? // allow omitting \"params\" if there are no inputs\n      { params?: readonly unknown[] }\n    : {\n        params:\n          | Readonly<AbiParametersToPrimitiveTypes<inputs>>\n          | (() => Promise<Readonly<AbiParametersToPrimitiveTypes<inputs>>>);\n      };\n\nexport type BaseTransactionOptions<\n  T extends object = object,\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n  abi extends Abi = any,\n> = {\n  contract: ThirdwebContract<abi>;\n} & T;\n// type-guard\n/**\n * Checks if the given value is of type TxOpts.\n * @param value - The value to check.\n * @returns True if the value is of type TxOpts, false otherwise.\n * @internal\n */\nexport function isBaseTransactionOptions(\n  value: unknown,\n): value is PreparedTransaction {\n  return (\n    isObjectWithKeys(value, [\"__contract\"]) &&\n    isObjectWithKeys(value.__contract, [\"address\", \"chain\"]) &&\n    typeof value.__contract.address === \"string\"\n  );\n}\n\nexport type ParseMethod<\n  abi extends Abi,\n  method extends\n    | AbiFunction\n    | string\n    | ((contract: ThirdwebContract<abi>) => Promise<AbiFunction>),\n> = method extends AbiFunction // if the method IS an AbiFunction, return it\n  ? method\n  : method extends string // we now know we are in \"string\" territory\n    ? // if the string starts with `function` then we can parse it\n      method extends `function ${string}`\n      ? ParseAbiItem<method> extends AbiFunction\n        ? ParseAbiItem<method>\n        : never\n      : // do we have an ABI to check, check the length\n        abi extends { length: 0 }\n        ? // if not, we return AbiFunction\n          AbiFunction\n        : // if we do have a length, extract the abi function\n          ExtractAbiFunction<abi, method>\n    : // this means its neither have an AbiFunction NOR a string -> never\n      AbiFunction;\n", "import {\n  type Abi,\n  type AbiFunction,\n  type ExtractAbiFunctionNames,\n  parseAbiItem,\n} from \"abitype\";\nimport type { TransactionRequest } from \"viem\";\nimport type { ThirdwebContract } from \"../contract/contract.js\";\nimport { encodeAbiParameters } from \"../utils/abi/encodeAbiParameters.js\";\nimport {\n  type PreparedMethod,\n  prepareMethod,\n} from \"../utils/abi/prepare-method.js\";\nimport { resolvePromisedValue } from \"../utils/promise/resolve-promised-value.js\";\nimport {\n  type PrepareTransactionOptions,\n  prepareTransaction,\n} from \"./prepare-transaction.js\";\nimport type {\n  BaseTransactionOptions,\n  ParamsOption,\n  ParseMethod,\n} from \"./types.js\";\nimport { isAbiFunction } from \"./utils.js\";\n\nexport type PrepareContractCallOptions<\n  TAbi extends Abi = [],\n  TMethod extends\n    | AbiFunction\n    | string\n    | ((\n        contract: ThirdwebContract<TAbi>,\n      ) => Promise<AbiFunction>) = TAbi extends { length: 0 }\n    ? AbiFunction | string\n    : ExtractAbiFunctionNames<TAbi>,\n  TPreparedMethod extends PreparedMethod<\n    ParseMethod<TAbi, TMethod>\n  > = PreparedMethod<ParseMethod<TAbi, TMethod>>,\n> = BaseTransactionOptions<\n  Omit<\n    TransactionRequest,\n    | \"from\"\n    | \"to\"\n    | \"data\"\n    | \"value\"\n    | \"accessList\"\n    | \"gas\"\n    | \"gasPrice\"\n    | \"maxFeePerGas\"\n    | \"maxPriorityFeePerGas\"\n    | \"nonce\"\n  > & {\n    contract: ThirdwebContract<TAbi>;\n    method: TMethod | TPreparedMethod;\n  } & ParamsOption<TPreparedMethod[1]> &\n    Omit<PrepareTransactionOptions, \"to\" | \"data\" | \"chain\" | \"client\">,\n  TAbi\n>;\n\n/**\n * Prepares a contract call by resolving the ABI function, parameters and encoded data. Optionally specify other properties such as value or gas price.\n * @param options - The options for preparing the contract call.\n * @returns A promise that resolves to the prepared transaction.\n * @transaction\n * @example\n * Usage with a human-readable method signature:\n * ```ts\n * import { prepareContractCall } from \"thirdweb\";\n *\n * const transaction = await prepareContractCall({\n *  contract,\n *  method: \"function transfer(address to, uint256 value)\",\n *  params: [to, value],\n * });\n * ```\n * @example\n * Usage with explicit gas price and/or value:\n * ```ts\n * import { prepareContractCall } from \"thirdweb\";\n *\n * const transaction = await prepareContractCall({\n *  contract,\n *  method: \"function transfer(address to, uint256 value)\",\n *  params: [to, value],\n *  maxFeePerGas: 30n,\n *  maxPriorityFeePerGas: 1n,\n *  value: 100000n,\n * });\n * ```\n * @example\n * Usage with a JSON ABI function object:\n * ```ts\n * import { prepareContractCall } from \"thirdweb\";\n *\n * const transaction = await prepareContractCall({\n *  contract,\n *  method: {\n *    name: \"transfer\",\n *    type: \"function\",\n *    inputs: [\n *      { name: \"to\", type: \"address\" },\n *      { name: \"value\", type: \"uint256\" },\n *    ],\n *    outputs: [],\n *    stateMutability: \"payable\"\n *   },\n *  params: [to, value],\n * });\n * ```\n * @example\n * Usage with a the ABI defined on the contract:\n * ```ts\n * import { getContract, prepareContractCall } from \"thirdweb\";\n * const contract = getContract({\n *  ..., // chain, address, client\n *  abi: [...] // ABI with a \"transfer\" method\n * });\n * const transaction = prepareContractCall({\n *  contract,\n *  method: \"transfer\", // <- this gets inferred from the contract\n *  params: [to, value],\n * });\n * ```\n */\nexport function prepareContractCall<\n  const TAbi extends Abi,\n  const TMethod extends TAbi extends {\n    length: 0;\n  }\n    ?\n        | AbiFunction\n        | `function ${string}`\n        | ((contract: ThirdwebContract<TAbi>) => Promise<AbiFunction>)\n    : ExtractAbiFunctionNames<TAbi>,\n  const TPreparedMethod extends PreparedMethod<\n    ParseMethod<TAbi, TMethod>\n  > = PreparedMethod<ParseMethod<TAbi, TMethod>>,\n>(options: PrepareContractCallOptions<TAbi, TMethod, TPreparedMethod>) {\n  type ParsedMethod_ = ParseMethod<TAbi, TMethod>;\n  type PreparedMethod_ = PreparedMethod<ParsedMethod_>;\n  const { contract, method, params, ...rest } = options;\n\n  const preparedMethodPromise = () =>\n    (async () => {\n      if (Array.isArray(method)) {\n        return method as PreparedMethod_;\n      }\n      if (isAbiFunction(method)) {\n        return prepareMethod(method as ParsedMethod_) as PreparedMethod_;\n      }\n\n      if (typeof method === \"function\") {\n        return prepareMethod(\n          // @ts-expect-error - method *is* function in this case\n          (await method(contract)) as ParsedMethod_,\n        ) as PreparedMethod_;\n      }\n      // if the method starts with the string `function ` we always will want to try to parse it\n      if (typeof method === \"string\" && method.startsWith(\"function \")) {\n        // @ts-expect-error - method *is* string in this case\n        const abiItem = parseAbiItem(method);\n        if (abiItem.type === \"function\") {\n          return prepareMethod(abiItem as ParsedMethod_) as PreparedMethod_;\n        }\n        throw new Error(`\"method\" passed is not of type \"function\"`);\n      }\n      // check if we have a \"abi\" on the contract\n      if (contract.abi && contract.abi?.length > 0) {\n        // extract the abiFunction from it\n        const abiFunction = contract.abi?.find(\n          (item) => item.type === \"function\" && item.name === method,\n        );\n        // if we were able to find it -> return it\n        if (abiFunction) {\n          return prepareMethod(abiFunction as ParsedMethod_) as PreparedMethod_;\n        }\n      }\n      throw new Error(`Could not resolve method \"${method}\".`);\n    })();\n\n  return prepareTransaction(\n    {\n      ...rest,\n      // these always inferred from the contract\n      to: contract.address,\n      chain: contract.chain,\n      client: contract.client,\n      data: async () => {\n        let preparedM: PreparedMethod_;\n        if (Array.isArray(method)) {\n          preparedM = method as PreparedMethod_;\n        } else {\n          preparedM = await preparedMethodPromise();\n        }\n\n        if (preparedM[1].length === 0) {\n          // just return the fn sig directly -> no params\n          return preparedM[0];\n        }\n\n        // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n        // we can do this because we know the specific formats of the values\n        return (preparedM[0] +\n          encodeAbiParameters(\n            preparedM[1],\n            // @ts-expect-error - TODO: fix this type issue\n            await resolvePromisedValue(params ?? []),\n          ).slice(2)) as `${(typeof preparedM)[0]}${string}`;\n      },\n    },\n    {\n      preparedMethod: preparedMethodPromise,\n      contract: contract,\n    },\n  );\n}\n", "import type { Abi, AbiFunction } from \"abitype\";\nimport { resolveContractAbi } from \"../contract/actions/resolve-abi.js\";\nimport type { ThirdwebContract } from \"../contract/contract.js\";\n\n/**\n * Resolves and returns the ABI function with the specified method name.\n * Throws an error if the function is not found in the ABI.\n * @template abiFn - The type of the ABI function.\n * @param method - The name of the method to resolve.\n * @returns The resolved ABI function.\n * @throws Error if the function is not found in the ABI.\n * @example\n * ```ts\n * import { resolveMethod, prepareContractCall } from \"thirdweb\";\n * const tx = prepareContractCall({\n *  contract,\n *  // automatically resolves the necessary abi to encode the transaction\n *  method: resolveMethod(\"transfer\"),\n *  // however there is no type completion for params in this case (as the resolution is async and happens at runtime)\n *  params: [to, value],\n * });\n * ```\n * @contract\n */\nexport function resolveMethod<abiFn extends AbiFunction>(method: string) {\n  return async (contract: ThirdwebContract) => {\n    const resolvedAbi = await resolveContractAbi<Abi>(contract);\n    // we try to find the abiFunction in the abi\n    const abiFunction = resolvedAbi.find((item) => {\n      // if the item is not a function we can ignore it\n      if (item.type !== \"function\") {\n        return false;\n      }\n      // if the item is a function we can compare the name\n      return item.name === method;\n    }) as abiFn | undefined;\n\n    if (!abiFunction) {\n      throw new Error(`could not find function with name \"${method}\" in abi`);\n    }\n    return abiFunction;\n  };\n}\n", "import { isOpStackChain } from \"../../chains/constants.js\";\nimport { getGasPrice } from \"../../gas/get-gas-price.js\";\nimport { resolvePromisedValue } from \"../../utils/promise/resolve-promised-value.js\";\nimport { toEther } from \"../../utils/units.js\";\nimport { type EstimateGasOptions, estimateGas } from \"./estimate-gas.js\";\n\nexport type EstimateGasCostResult = {\n  /**\n   * The estimated gas cost in ether.\n   */\n  ether: string;\n  /**\n   * The estimated gas cost in wei.\n   */\n  wei: bigint;\n};\n\n/**\n * Estimate the gas cost of a transaction in ether and wei.\n * @example\n * ```ts\n * import { estimateGasCost } from \"thirdweb\";\n *\n * const gasCost = await estimateGasCost({ transaction });\n * ```\n */\nexport async function estimateGasCost(\n  options: EstimateGasOptions,\n): Promise<EstimateGasCostResult> {\n  const { transaction } = options;\n  const from = options.from ?? options.account?.address ?? undefined;\n  const gasLimit =\n    (await resolvePromisedValue(transaction.gas)) ||\n    (await estimateGas({ transaction, from }));\n  const gasPrice = await getGasPrice({\n    client: transaction.client,\n    chain: transaction.chain,\n  });\n  let l1Fee: bigint;\n  if (isOpStackChain(transaction.chain)) {\n    const { estimateL1Fee } = await import(\"../../gas/estimate-l1-fee.js\");\n    l1Fee = await estimateL1Fee({\n      transaction,\n    });\n  } else {\n    l1Fee = 0n;\n  }\n  const wei = gasLimit * gasPrice + l1Fee;\n  return {\n    ether: toEther(wei),\n    wei,\n  };\n}\n", "import { baseSepolia } from \"./chain-definitions/base-sepolia.js\";\nimport { base } from \"./chain-definitions/base.js\";\nimport { optimismSepolia } from \"./chain-definitions/optimism-sepolia.js\";\nimport { optimism } from \"./chain-definitions/optimism.js\";\nimport { zoraSepolia } from \"./chain-definitions/zora-sepolia.js\";\nimport { zora } from \"./chain-definitions/zora.js\";\nimport type { Chain } from \"./types.js\";\n\nconst opChains = [\n  base.id,\n  baseSepolia.id,\n  optimism.id,\n  optimismSepolia.id,\n  zora.id,\n  zoraSepolia.id,\n  34443, // mode\n  919, // mode testnet\n  42220, // celo\n  44787, // celo testnet\n  204, // opBNB\n  5611, // opBNB testnet\n];\n\n/**\n * TODO this should be in the chain definition itself\n * @internal\n */\nexport function isOpStackChain(chain: Chain) {\n  return opChains.includes(chain.id);\n}\n", "import { defineChain } from \"../utils.js\";\n\nexport const baseSepolia = /* @__PURE__ */ defineChain({\n  id: 84532,\n  name: \"Base Sepolia\",\n  nativeCurrency: { name: \"Sepolia Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Basescan\",\n      url: \"https://sepolia.basescan.org\",\n      apiUrl: \"https://api-sepolia.basescan.org/api\",\n    },\n  ],\n  testnet: true,\n});\n", "import { defineChain } from \"../utils.js\";\n\nexport const base = /* @__PURE__ */ defineChain({\n  id: 8453,\n  name: \"Base\",\n  nativeCurrency: { name: \"Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Basescan\",\n      url: \"https://basescan.org\",\n      apiUrl: \"https://api.basescan.org/api\",\n    },\n  ],\n});\n", "import { defineChain } from \"../utils.js\";\n\nexport const optimismSepolia = /* @__PURE__ */ defineChain({\n  id: 11155420,\n  name: \"OP Sepolia\",\n  nativeCurrency: { name: \"Sepolia Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Blockscout\",\n      url: \"https://optimism-sepolia.blockscout.com\",\n      apiUrl: \"https://optimism-sepolia.blockscout.com/api\",\n    },\n  ],\n  testnet: true,\n});\n", "import { defineChain } from \"../utils.js\";\n\nexport const optimism = /* @__PURE__ */ defineChain({\n  id: 10,\n  name: \"OP Mainnet\",\n  nativeCurrency: { name: \"Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Optimism Explorer\",\n      url: \"https://optimistic.etherscan.io\",\n      apiUrl: \"https://api-optimistic.etherscan.io\",\n    },\n  ],\n});\n", "import { defineChain } from \"../utils.js\";\n\nexport const zoraSepolia = /*@__PURE__*/ defineChain({\n  id: 999999999,\n  name: \"Zora Sepolia\",\n\n  nativeCurrency: {\n    decimals: 18,\n    name: \"Zora Sepolia\",\n    symbol: \"ETH\",\n  },\n  blockExplorers: [\n    {\n      name: \"Zora Sepolia Explorer\",\n      url: \"https://sepolia.explorer.zora.energy/\",\n      apiUrl: \"https://sepolia.explorer.zora.energy/api\",\n    },\n  ],\n  testnet: true,\n});\n", "import { defineChain } from \"../utils.js\";\n\nexport const zora = /*@__PURE__*/ defineChain({\n  id: 7777777,\n  name: \"Zora\",\n  nativeCurrency: {\n    decimals: 18,\n    name: \"Ether\",\n    symbol: \"ETH\",\n  },\n  blockExplorers: [\n    {\n      name: \"Explorer\",\n      url: \"https://explorer.zora.energy\",\n      apiUrl: \"https://explorer.zora.energy/api\",\n    },\n  ],\n});\n", "import type { Account } from \"../../wallets/interfaces/wallet.js\";\nimport type { PreparedTransaction } from \"../prepare-transaction.js\";\nimport type { GaslessOptions } from \"./gasless/types.js\";\nimport { toSerializableTransaction } from \"./to-serializable-transaction.js\";\nimport type { WaitForReceiptOptions } from \"./wait-for-tx-receipt.js\";\n\nexport type SendTransactionOptions = {\n  account: Account;\n  // TODO: update this to `Transaction<\"prepared\">` once the type is available to ensure only prepared transactions are accepted\n  // biome-ignore lint/suspicious/noExplicitAny: library function that accepts any prepared transaction type\n  transaction: PreparedTransaction<any>;\n  gasless?: GaslessOptions;\n};\n\n/**\n * Sends a transaction using the provided wallet.\n * @param options - The options for sending the transaction.\n * @returns A promise that resolves to the transaction hash.\n * @throws An error if the wallet is not connected.\n * @transaction\n * @example\n * ```ts\n * import { sendTransaction } from \"thirdweb\";\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction\n * });\n * ```\n */\nexport async function sendTransaction(\n  options: SendTransactionOptions,\n): Promise<WaitForReceiptOptions> {\n  const { account, transaction, gasless } = options;\n\n  if (account.onTransactionRequested) {\n    await account.onTransactionRequested(transaction);\n  }\n\n  const serializableTransaction = await toSerializableTransaction({\n    transaction: transaction,\n    from: account.address,\n  });\n\n  // branch for gasless transactions\n  if (gasless) {\n    // lazy load the gasless tx function because it's only needed for gasless transactions\n    const { sendGaslessTransaction } = await import(\n      \"./gasless/send-gasless-transaction.js\"\n    );\n    return sendGaslessTransaction({\n      account,\n      transaction,\n      serializableTransaction,\n      gasless,\n    });\n  }\n\n  const result = await account.sendTransaction(serializableTransaction);\n  return { ...result, chain: transaction.chain, client: transaction.client };\n}\n", "import type { TransactionReceipt } from \"../types.js\";\nimport {\n  type SendTransactionOptions,\n  sendTransaction,\n} from \"./send-transaction.js\";\nimport { waitForReceipt } from \"./wait-for-tx-receipt.js\";\n\n/**\n * Sends a transaction using the provided wallet.\n * @param options - The options for sending the transaction.\n * @returns A promise that resolves to the confirmed transaction receipt.\n * @throws An error if the wallet is not connected.\n * @transaction\n * @example\n * ```ts\n * import { sendAndConfirmTransaction } from \"thirdweb\";\n *\n * const transactionReceipt = await sendAndConfirmTransaction({\n *  wallet,\n *  transaction\n * });\n * ```\n */\nexport async function sendAndConfirmTransaction(\n  options: SendTransactionOptions,\n): Promise<TransactionReceipt> {\n  const submittedTx = await sendTransaction(options);\n  return waitForReceipt(submittedTx);\n}\n", "import { resolvePromisedValue } from \"../../utils/promise/resolve-promised-value.js\";\nimport type {\n  Account,\n  SendTransactionOption,\n} from \"../../wallets/interfaces/wallet.js\";\nimport type { PreparedTransaction } from \"../prepare-transaction.js\";\nimport { encode } from \"./encode.js\";\nimport type { WaitForReceiptOptions } from \"./wait-for-tx-receipt.js\";\n\nexport type SendBatchTransactionOptions = {\n  transactions: PreparedTransaction[];\n  account: Account;\n};\n\n/**\n * Sends a batch transaction using the provided options.\n * @param options - The options for sending the batch transaction.\n * @returns A promise that resolves to the options for waiting for the receipt of the first transaction in the batch.\n * @throws An error if the account is not connected, there are no transactions to send, or the account does not implement sendBatchTransaction.\n * @transaction\n * @example\n * ```ts\n * import { sendBatchTransaction } from \"thirdweb\";\n *\n * const waitForReceiptOptions = await sendBatchTransaction({\n *  account,\n *  transactions\n * });\n * ```\n */\nexport async function sendBatchTransaction(\n  options: SendBatchTransactionOptions,\n): Promise<WaitForReceiptOptions> {\n  const { account, transactions } = options;\n  if (!account) {\n    throw new Error(\"not connected\");\n  }\n  if (transactions.length === 0) {\n    throw new Error(\"No transactions to send\");\n  }\n  const firstTx = transactions[0];\n  if (!firstTx) {\n    throw new Error(\"No transactions to send\");\n  }\n  if (account.sendBatchTransaction) {\n    const serializedTxs: SendTransactionOption[] = await Promise.all(\n      transactions.map(async (tx) => {\n        // no need to estimate gas for these, gas will be estimated on the entire batch\n        const [data, to, accessList, value] = await Promise.all([\n          encode(tx),\n          resolvePromisedValue(tx.to),\n          resolvePromisedValue(tx.accessList),\n          resolvePromisedValue(tx.value),\n        ]);\n        const serializedTx: SendTransactionOption = {\n          data,\n          chainId: tx.chain.id,\n          to,\n          value,\n          accessList,\n        };\n        return serializedTx;\n      }),\n    );\n    const result = await account.sendBatchTransaction(serializedTxs);\n    return {\n      ...result,\n      chain: firstTx.chain,\n      client: firstTx.client,\n    };\n  }\n  throw new Error(\"Account doesn't implement sendBatchTransaction\");\n}\n", "import type { Abi, AbiFunction } from \"abitype\";\nimport { decodeAbiParameters, formatTransactionRequest } from \"viem\";\nimport { eth_call } from \"../../rpc/actions/eth_call.js\";\nimport { getRpcClient } from \"../../rpc/rpc.js\";\nimport type { PreparedMethod } from \"../../utils/abi/prepare-method.js\";\nimport { resolvePromisedValue } from \"../../utils/promise/resolve-promised-value.js\";\nimport type { Prettify } from \"../../utils/type-utils.js\";\nimport type { Account } from \"../../wallets/interfaces/wallet.js\";\nimport { extractError } from \"../extract-error.js\";\nimport type { PreparedTransaction } from \"../prepare-transaction.js\";\nimport type { ReadContractResult } from \"../read-contract.js\";\nimport { encode } from \"./encode.js\";\n\nexport type SimulateOptions<\n  abi extends Abi,\n  abiFn extends AbiFunction,\n> = Prettify<\n  {\n    transaction: PreparedTransaction<abi, abiFn>;\n  } & (\n    | {\n        account: Account;\n        from?: never;\n      }\n    | {\n        account?: never;\n        from?: string;\n      }\n  )\n>;\n\n/**\n * Simulates the execution of a transaction.\n * @param options - The options for simulating the transaction.\n * @returns A promise that resolves to the result of the simulation.\n * @transaction\n * @example\n * ```ts\n * import { simulateTransaction } from \"thirdweb\";\n * const result = await simulateTransaction({\n *  transaction,\n * });\n * ```\n */\nexport async function simulateTransaction<\n  const abi extends Abi,\n  const abiFn extends AbiFunction,\n>(options: SimulateOptions<abi, abiFn>) {\n  const [data, to, accessList, value] = await Promise.all([\n    encode(options.transaction),\n    resolvePromisedValue(options.transaction.to),\n    resolvePromisedValue(options.transaction.accessList),\n    resolvePromisedValue(options.transaction.value),\n  ]);\n\n  // from is:\n  // 1. the user specified from address\n  // 2. the passed in account address\n  // 3. the passed in wallet's account address\n  const from = options.from ?? options.account?.address ?? undefined;\n\n  const serializedTx = formatTransactionRequest({\n    data,\n    from,\n    to,\n    value,\n    accessList,\n  });\n\n  const rpcRequest = getRpcClient(options.transaction);\n  try {\n    const result = await eth_call(rpcRequest, serializedTx);\n\n    if (!options.transaction.__preparedMethod) {\n      return result;\n    }\n\n    const prepared = await options.transaction.__preparedMethod();\n\n    const decoded = decodeAbiParameters(prepared[2], result);\n\n    if (Array.isArray(decoded) && decoded.length === 1) {\n      return decoded[0];\n    }\n\n    return decoded as ReadContractResult<PreparedMethod<abiFn>[2]>;\n  } catch (error) {\n    throw await extractError({\n      error,\n      contract: options.transaction.__contract,\n    });\n  }\n}\n", "import type { TransactionSerializable } from \"viem\";\nimport type { Hex } from \"../../utils/encoding/hex.js\";\nimport { keccak256 } from \"../../utils/hashing/keccak256.js\";\nimport { sign } from \"../../utils/signatures/sign.js\";\nimport { serializeTransaction } from \"../serialize-transaction.js\";\n\nexport type SignTransactionOptions = {\n  transaction: TransactionSerializable;\n  privateKey: Hex;\n  // TODO: Add optional custom serializer here\n};\n\n/**\n * Signs a transaction to be sent to a node.\n * @param options The options for signing.\n * @param options.transaction - The transaction object to sign\n * @param options.privateKey - The account private key\n * @returns The signed transaction as a hex string\n * @example\n * ```ts\n * import { signTransaction } from \"thirdweb\";\n * signTransaction({\n *   transaction: {\n *     ...\n *   },\n *   privateKey: \"0x...\",\n * });\n * ```\n * @transaction\n */\nexport function signTransaction({\n  transaction,\n  privateKey,\n}: SignTransactionOptions): Hex {\n  if (transaction.type === \"eip4844\") {\n    transaction = { ...transaction, sidecars: false };\n  }\n\n  const serializedTransaction = serializeTransaction({ transaction });\n\n  const signature = sign({\n    hash: keccak256(serializedTransaction),\n    privateKey: privateKey,\n  });\n  return serializeTransaction({\n    transaction: { ...transaction, ...signature },\n  });\n}\n", "import { secp256k1 } from \"@noble/curves/secp256k1\";\nimport type { Signature } from \"viem\";\n\nimport { type Hex, toHex } from \"../encoding/hex.js\";\n\n/**\n * Options for signing a transaction hash.\n */\nexport type SignOptions = {\n  hash: Hex;\n  privateKey: Hex;\n};\n\n/**\n * Generates the signature for the provided transaction hash.\n * @param options - The options for signing.\n * @param options.hash - The hash to be signed.\n * @param options.privateKey - The private key to sign the hash with.\n * @returns The transaction signature.\n * @example\n * ```ts\n * import { sign } from \"thirdweb/utils\";\n *\n * const signature = sign({\n *   hash: \"0x\",\n *   privateKey: \"0x\",\n * });\n * ```\n * @utils\n */\nexport function sign({ hash, privateKey }: SignOptions): Signature {\n  const { r, s, recovery } = secp256k1.sign(hash.slice(2), privateKey.slice(2));\n  return {\n    r: toHex(r),\n    s: toHex(s),\n    v: recovery ? 28n : 27n,\n    yParity: recovery,\n  };\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean) {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || ut.isBytes(sg)) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport type { CHash } from './utils.js';\nimport { bytesToNumberBE, abytes, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n", "import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n", "import {\n  type ExactPartial,\n  type SerializedTransactionReturnType,\n  type Signature,\n  type TransactionSerializable,\n  type TransactionSerializableEIP1559,\n  type TransactionSerializableEIP2930,\n  type TransactionSerializableEIP4844,\n  type TransactionSerializableLegacy,\n  type TransactionSerializedEIP1559,\n  type TransactionSerializedEIP2930,\n  type TransactionSerializedLegacy,\n  serializeTransaction as _serializeTransaction,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionLegacy,\n  serializeAccessList,\n  toRlp,\n} from \"viem\";\nimport { trim } from \"../utils/encoding/helpers/trim.js\";\nimport { type Hex, toHex } from \"../utils/encoding/hex.js\";\n\nexport type SerializeTransactionOptions<\n  _transaction extends TransactionSerializable,\n> = {\n  transaction: _transaction;\n};\n\n/**\n * Serializes a legacy, EIP-1559, EIP-2930, or EIP-4844 transaction object.\n *\n * @param options - The serialization options.\n * @param options.transaction - The transaction object to be serialized, including the signature parameters if necessary.\n * @returns The serialized transaction.\n * @throws An error if the provided transaction object is invalid.\n * @transaction\n * @example\n * ```ts\n * import { serializeTransaction } from \"thirdweb\";\n *\n * const serializedTransaction = serializeTransaction({ transaction: {\n *    to: \"0x\",\n *    value: 0n,\n *  }\n * });\n * ```\n */\nexport function serializeTransaction<\n  _transaction extends TransactionSerializable,\n>(\n  options: SerializeTransactionOptions<_transaction>,\n): SerializedTransactionReturnType<_transaction> {\n  const { transaction } = options;\n\n  if (\n    transaction.type === \"eip4844\" || // explicit type checks required for viem parity\n    typeof transaction.blobs !== \"undefined\" ||\n    typeof transaction.blobVersionedHashes !== \"undefined\" ||\n    typeof transaction.maxFeePerBlobGas !== \"undefined\" ||\n    typeof transaction.sidecars !== \"undefined\"\n  ) {\n    // default to viem's 4844 serialization until we have blob utilities\n    return _serializeTransaction<TransactionSerializableEIP4844>(\n      transaction,\n    ) as SerializedTransactionReturnType<_transaction>;\n  }\n\n  if (\n    transaction.type === \"eip1559\" ||\n    typeof transaction.maxFeePerGas !== \"undefined\" ||\n    typeof transaction.maxPriorityFeePerGas !== \"undefined\"\n  ) {\n    return serializeEIP1559Transaction({\n      transaction,\n    }) as SerializedTransactionReturnType<_transaction>;\n  }\n\n  if (\n    transaction.type === \"eip2930\" ||\n    (typeof transaction.gasPrice !== \"undefined\" &&\n      typeof transaction.accessList !== \"undefined\")\n  ) {\n    return serializeEIP2930Transaction({\n      transaction,\n    }) as SerializedTransactionReturnType<_transaction>;\n  }\n\n  if (\n    transaction.type === \"legacy\" ||\n    typeof transaction.gasPrice !== \"undefined\"\n  ) {\n    return serializeTransactionLegacy({\n      transaction: transaction as TransactionSerializableLegacy,\n    }) as SerializedTransactionReturnType<_transaction>;\n  }\n\n  throw new Error(\n    `Invalid transaction to serialize.\\n\\n${JSON.stringify(\n      transaction,\n      (_, v) => (typeof v === \"bigint\" ? `${v.toString()}n` : v),\n      2,\n    )}`,\n  );\n}\n\ntype SerializeEIP1559TransactionOptions = {\n  transaction: TransactionSerializableEIP1559;\n};\n\nfunction serializeEIP1559Transaction(\n  options: SerializeEIP1559TransactionOptions,\n): TransactionSerializedEIP1559 {\n  assertTransactionEIP1559(options.transaction);\n\n  const {\n    transaction: {\n      chainId,\n      gas,\n      nonce,\n      to,\n      value,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      accessList,\n      data,\n      r,\n      s,\n      v,\n      yParity,\n    },\n  } = options;\n\n  const serializedAccessList = serializeAccessList(accessList);\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : \"0x\",\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : \"0x\",\n    maxFeePerGas ? toHex(maxFeePerGas) : \"0x\",\n    gas ? toHex(gas) : \"0x\",\n    // To fix when migrating to our own version of TransactionSerializable (the viem type is downgraded from Address to string when importing)\n    (to ?? \"0x\") as Hex,\n    value ? toHex(value) : \"0x\",\n    data ?? \"0x\",\n    serializedAccessList,\n    ...toYParitySignatureArray({ r, s, v, yParity }),\n  ];\n\n  return `0x02${toRlp(serializedTransaction).slice(2)}`;\n}\n\ntype SerializeEIP2930TransactionOptions = {\n  transaction: TransactionSerializableEIP2930;\n};\n\nfunction serializeEIP2930Transaction(\n  options: SerializeEIP2930TransactionOptions,\n): TransactionSerializedEIP2930 {\n  assertTransactionEIP2930(options.transaction);\n\n  const {\n    transaction: {\n      chainId,\n      gas,\n      gasPrice,\n      nonce,\n      to,\n      value,\n      accessList,\n      data,\n      r,\n      s,\n      v,\n      yParity,\n    },\n  } = options;\n\n  const serializedAccessList = serializeAccessList(accessList);\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : \"0x\",\n    gasPrice ? toHex(gasPrice) : \"0x\",\n    gas ? toHex(gas) : \"0x\",\n    (to ?? \"0x\") as Hex,\n    value ? toHex(value) : \"0x\",\n    data ?? \"0x\",\n    serializedAccessList,\n    ...toYParitySignatureArray({ r, s, v, yParity }),\n  ];\n\n  return `0x01${toRlp(serializedTransaction).slice(2)}`;\n}\n\ntype SerializeLegacyTransactionOptions = {\n  transaction: TransactionSerializableLegacy;\n};\n\nfunction serializeTransactionLegacy(\n  options: SerializeLegacyTransactionOptions,\n): TransactionSerializedLegacy {\n  assertTransactionLegacy(options.transaction);\n\n  const {\n    chainId = 0,\n    gas,\n    data,\n    nonce,\n    to,\n    value,\n    gasPrice,\n    r,\n    s,\n    v,\n  } = options.transaction;\n\n  let serializedTransaction = [\n    nonce ? toHex(nonce) : \"0x\",\n    gasPrice ? toHex(gasPrice) : \"0x\",\n    gas ? toHex(gas) : \"0x\",\n    (to ?? \"0x\") as Hex,\n    value ? toHex(value) : \"0x\",\n    data ?? \"0x\",\n  ];\n\n  if (typeof v !== \"undefined\") {\n    const v_ = (() => {\n      // EIP-155 (inferred chainId)\n      if (v >= 35n) {\n        const inferredChainId = (v - 35n) / 2n;\n        if (inferredChainId > 0) return v;\n        return 27n + (v === 35n ? 0n : 1n);\n      }\n\n      // EIP-155 (explicit chainId)\n      if (chainId > 0) return BigInt(chainId * 2) + BigInt(35n + v - 27n);\n\n      // Pre-EIP-155 (no chainId)\n      const v_ = 27n + (v === 27n ? 0n : 1n);\n      if (v !== v_) throw new Error(`Invalid legacy signature value v: ${v}`);\n      return v_;\n    })();\n\n    if (typeof r === \"undefined\")\n      throw new Error(`Invalid legacy signature value r: ${r}`);\n    if (typeof s === \"undefined\")\n      throw new Error(`Invalid legacy signature value s: ${s}`);\n\n    serializedTransaction = [...serializedTransaction, toHex(v_), r, s];\n  } else if (chainId > 0) {\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(chainId),\n      \"0x\",\n      \"0x\",\n    ];\n  }\n\n  return toRlp(serializedTransaction) as TransactionSerializedLegacy;\n}\n\nexport function toYParitySignatureArray(\n  signature: ExactPartial<Signature>,\n): Hex[] {\n  const { r, s, v, yParity } = signature;\n  if (typeof r === \"undefined\") return [];\n  if (typeof s === \"undefined\") return [];\n  if (typeof v === \"undefined\" && typeof yParity === \"undefined\") return [];\n\n  const yParity_ = (() => {\n    if (yParity === 1 || yParity === 0) return yParity ? toHex(1) : \"0x\";\n    if (typeof yParity !== \"undefined\")\n      throw new Error(`Invalid signature value for yParity: ${yParity}`);\n\n    if (v === 0n || v === 27n) return \"0x\";\n    if (v === 1n || v === 28n) return toHex(1);\n    throw new Error(`Invalid signature value v: ${v}`);\n  })();\n  return [yParity_, trim(r), trim(s)];\n}\n", "import type { Hex } from \"./is-hex.js\";\n\ntype TrimOptions = {\n  dir?: \"left\" | \"right\";\n};\nexport type TrimReturnType<TValue extends Uint8Array | Hex> = TValue extends Hex\n  ? Hex\n  : Uint8Array;\n\n/**\n * Trims leading or trailing zeros from a hexadecimal string or byte array.\n *\n * @param hexOrBytes - The hexadecimal string or byte array to trim.\n * @param options - The options for trimming. Default is to trim leading zeros.\n * @returns The trimmed hexadecimal string or byte array.\n * @internal\n */\nexport function trim<TValue extends Uint8Array | Hex>(\n  hexOrBytes: TValue,\n  { dir = \"left\" }: TrimOptions = {},\n): TrimReturnType<TValue> {\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  let data: any =\n    typeof hexOrBytes === \"string\" ? hexOrBytes.replace(\"0x\", \"\") : hexOrBytes;\n\n  let sliceLength = 0;\n  for (let i = 0; i < data.length - 1; i++) {\n    if (data[dir === \"left\" ? i : data.length - i - 1].toString() === \"0\") {\n      sliceLength++;\n    } else {\n      break;\n    }\n  }\n  data =\n    dir === \"left\"\n      ? data.slice(sliceLength)\n      : data.slice(0, data.length - sliceLength);\n\n  if (typeof hexOrBytes === \"string\") {\n    if (data.length === 1 && dir === \"right\") {\n      data = `${data}0`;\n    }\n    return `0x${\n      data.length % 2 === 1 ? `0${data}` : data\n    }` as TrimReturnType<TValue>;\n  }\n  return data as TrimReturnType<TValue>;\n}\n", "import { type AbiEvent, type ParseAbiItem, parseAbiItem } from \"abitype\";\nimport { type Hex, encodeEventTopics, toEventHash } from \"viem\";\nimport type { AbiEventParametersToPrimitiveTypes } from \"./types.js\";\nimport { isAbiEvent } from \"./utils.js\";\n\ntype ParseEvent<event extends AbiEvent | string> =\n  // if the method IS an AbiEvent, return it\n  event extends AbiEvent\n    ? event\n    : event extends string // we now know we are in \"string\" territory\n      ? // if the string starts with `function` then we can parse it\n        event extends `event ${string}`\n        ? ParseAbiItem<event>\n        : // do we have an ABI to check, check the length\n          AbiEvent\n      : // this means its neither have an AbiEvent NOR a string -> never\n        never;\n\ntype EventFilters<abiEvent extends AbiEvent> =\n  AbiEventParametersToPrimitiveTypes<abiEvent[\"inputs\"]>;\n\nexport type PrepareEventOptions<\n  TSignature extends `event ${string}` | AbiEvent,\n> = {\n  signature: TSignature;\n  filters?: Readonly<EventFilters<ParseEvent<TSignature>>>;\n};\n\nexport type PreparedEvent<abiEvent extends AbiEvent> = {\n  abiEvent: abiEvent;\n  hash: Hex;\n  topics: Hex[];\n};\n\n/**\n * Prepares an event by parsing the signature, generating the event hash, and encoding the event topics.\n * @param options - The options for preparing the event.\n * @returns The prepared event object.\n * @example\n * ```ts\n * import { prepareEvent } from \"thirdweb\";\n * const myEvent = prepareEvent({\n *  signature: \"event MyEvent(uint256 myArg)\",\n * });\n * ```\n * @contract\n */\nexport function prepareEvent<TSignature extends `event ${string}` | AbiEvent>(\n  options: PrepareEventOptions<TSignature>,\n): PreparedEvent<ParseEvent<TSignature>> {\n  const { signature } = options;\n  let resolvedSignature: ParseEvent<TSignature>;\n  if (isAbiEvent(signature)) {\n    resolvedSignature = signature as ParseEvent<TSignature>;\n  } else {\n    resolvedSignature = parseAbiItem(signature) as ParseEvent<TSignature>;\n  }\n\n  return {\n    abiEvent: resolvedSignature,\n    hash: toEventHash(resolvedSignature),\n    // @ts-expect-error - TODO: investiagte why this complains, it works fine however\n    topics: encodeEventTopics({\n      abi: [resolvedSignature],\n      args: options.filters,\n    }),\n  };\n}\n", "import type { AbiEvent } from \"abitype\";\n\n/**\n * @internal\n */\nexport function isAbiEvent(item: unknown): item is AbiEvent {\n  return !!(\n    item &&\n    typeof item === \"object\" &&\n    \"type\" in item &&\n    item.type === \"event\"\n  );\n}\n", "/**\n * 1. blockTime + contract (with abi) + no events -> logs with types and parsing *if* contract has abi defined\n * 2. blockTime + contract (no abi) + no events -> logs with NO types but *with* parsing\n * 3. blockTime + no contract + events -> logs with types and parsing (across all \"addresses\") (no contract filter)\n * 4. blockTime + contract + events -> logs with types and parsing (filtered by contract address +  event topics)\n */\n\nimport type {\n  Abi,\n  AbiEvent,\n  ExtractAbiEvent,\n  ExtractAbiEventNames,\n} from \"abitype\";\nimport { resolveContractAbi } from \"../../contract/actions/resolve-abi.js\";\nimport type { ThirdwebContract } from \"../../contract/contract.js\";\nimport { eth_blockNumber } from \"../../rpc/actions/eth_blockNumber.js\";\nimport {\n  type GetLogsBlockParams,\n  type GetLogsParams,\n  eth_getLogs,\n} from \"../../rpc/actions/eth_getLogs.js\";\nimport { getRpcClient } from \"../../rpc/rpc.js\";\nimport type { Prettify } from \"../../utils/type-utils.js\";\nimport { type PreparedEvent, prepareEvent } from \"../prepare-event.js\";\nimport { isAbiEvent } from \"../utils.js\";\nimport { type ParseEventLogsResult, parseEventLogs } from \"./parse-logs.js\";\n\nexport type GetContractEventsOptionsDirect<\n  abi extends Abi,\n  abiEvents extends PreparedEvent<AbiEvent>[],\n  TStrict extends boolean,\n> = {\n  contract: ThirdwebContract<abi>;\n  events?: abiEvents;\n  strict?: TStrict;\n};\n\nexport type GetContractEventsOptions<\n  abi extends Abi,\n  abiEvents extends PreparedEvent<AbiEvent>[],\n  TStrict extends boolean,\n> = Prettify<\n  GetContractEventsOptionsDirect<abi, abiEvents, TStrict> & GetLogsBlockParams\n>;\n\nexport type GetContractEventsResult<\n  abiEvents extends PreparedEvent<AbiEvent>[],\n  TStrict extends boolean,\n> = ParseEventLogsResult<abiEvents, TStrict>;\n\n/**\n * Retrieves events from a contract based on the provided options.\n * @param options - The options for retrieving events.\n * @returns A promise that resolves to an array of parsed event logs.\n * Note: toBlock and fromBlock are both inclusive.\n * @example\n * ```ts\n * import { getContractEvents } from \"thirdweb\";\n * const events = await getContractEvents({\n *  contract: myContract,\n *  fromBlock: 123456n,\n *  toBlock: 123456n,\n *  events: [preparedEvent, preparedEvent2],\n * });\n * ```\n * @example\n * Optionally specify a blockRange as the number of blocks to retrieve. toBlock will default to the current block number.\n * ```ts\n * import { getContractEvents } from \"thirdweb\";\n * const events = await getContractEvents({\n *  contract: myContract,\n *  blockRange: 123456n,\n *  events: [preparedEvent, preparedEvent2],\n * });\n * ```\n * @example\n * Use fromBlock with blockRange for pagination.\n * ```ts\n * import { getContractEvents } from \"thirdweb\";\n * const events = await getContractEvents({\n *  contract: myContract,\n *  fromBlock: lastBlockFetched,\n *  blockRange: 123456n,\n *  events: [preparedEvent, preparedEvent2],\n * });\n * ```\n * @example\n * Retrieve events for a specific block hash.\n * ```ts\n * import { getContractEvents } from \"thirdweb\";\n * const events = await getContractEvents({\n *  contract: myContract,\n *  blockHash: \"0x...\",\n *  events: [preparedEvent, preparedEvent2],\n * });\n * ```\n * @contract\n */\nexport async function getContractEvents<\n  const abi extends Abi,\n  const abiEvents extends PreparedEvent<AbiEvent>[] = PreparedEvent<\n    ExtractAbiEvent<abi, ExtractAbiEventNames<abi>>\n  >[],\n  const TStrict extends boolean = true,\n>(\n  options: GetContractEventsOptions<abi, abiEvents, TStrict>,\n): Promise<GetContractEventsResult<abiEvents, TStrict>> {\n  const { contract, events, blockRange, ...restParams } = options;\n\n  const rpcRequest = getRpcClient(contract);\n\n  if (\n    restParams.blockHash &&\n    (blockRange || restParams.fromBlock || restParams.toBlock)\n  ) {\n    throw new Error(\"Cannot specify blockHash and range simultaneously,\");\n  }\n\n  const latestBlockNumber = await eth_blockNumber(rpcRequest);\n\n  // Compute toBlock and fromBlock if blockRange was passed\n  if (blockRange) {\n    const { fromBlock, toBlock } = restParams;\n\n    // Make sure the inputs were properly defined\n    if (\n      fromBlock &&\n      toBlock &&\n      BigInt(toBlock) - BigInt(fromBlock) !== BigInt(blockRange)\n    ) {\n      throw new Error(\n        \"Incompatible blockRange with specified fromBlock and toBlock. Please only define fromBlock or toBlock when specifying blockRange.\",\n      );\n    }\n\n    if (fromBlock) {\n      restParams.toBlock = BigInt(fromBlock) + BigInt(blockRange) - 1n; // Subtract one because toBlock is inclusive\n    } else if (toBlock) {\n      restParams.fromBlock = BigInt(toBlock) - BigInt(blockRange) + 1n; // Add one because fromBlock is inclusive\n    } else {\n      // If no from or to block specified, use the latest block as the to block\n      restParams.toBlock = latestBlockNumber;\n      restParams.fromBlock = latestBlockNumber - BigInt(blockRange) + 1n; // Add one because fromBlock is inclusive\n    }\n  }\n\n  let resolvedEvents = events ?? [];\n\n  // if we have an abi on the contract, we can encode the topics with it\n  if (!events?.length && !!contract) {\n    // if we have a contract *WITH* an abi we can use that\n    if (contract.abi?.length) {\n      // @ts-expect-error - we can't make typescript happy here, but we know this is an abi event\n      resolvedEvents = contract.abi\n        .filter(isAbiEvent)\n        .map((abiEvent) => prepareEvent({ signature: abiEvent }));\n    } else {\n      const runtimeAbi = await resolveContractAbi(contract);\n      // @ts-expect-error - we can't make typescript happy here, but we know this is an abi event\n      resolvedEvents = runtimeAbi\n        .filter(isAbiEvent)\n        .map((abiEvent) => prepareEvent({ signature: abiEvent }));\n    }\n  }\n\n  const logsParams: GetLogsParams[] =\n    events && events.length > 0\n      ? // if we have events passed in then we use those\n        events.map((e) => ({\n          ...restParams,\n          address: contract?.address,\n          topics: e.topics,\n        }))\n      : // otherwise we want \"all\" events (aka not pass any topics at all)\n        [{ ...restParams, address: contract?.address }];\n\n  const logs = await Promise.all(\n    logsParams.map((ethLogParams) => eth_getLogs(rpcRequest, ethLogParams)),\n  );\n  const flattenLogs = logs\n    .flatMap((log) => log)\n    .sort((a, b) => Number((a.blockNumber ?? 0n) - (b.blockNumber ?? 0n)));\n  return parseEventLogs({\n    logs: flattenLogs,\n    events: resolvedEvents,\n  });\n}\n", "import type { AbiEvent } from \"abitype\";\nimport {\n  type Log,\n  type RpcLog,\n  parseEventLogs as viem_parseEventLogs,\n} from \"viem\";\nimport type { PreparedEvent } from \"../prepare-event.js\";\n\nexport type ParseEventLogsOptions<\n  abiEvents extends PreparedEvent<AbiEvent>[],\n  TStrict extends boolean,\n> = {\n  logs: (Log | RpcLog)[];\n  events: abiEvents;\n  strict?: TStrict;\n};\n\nexport type ParseEventLogsResult<\n  abiEvents extends PreparedEvent<AbiEvent>[],\n  TStrict extends boolean,\n  abiEvent extends AbiEvent = abiEvents[number][\"abiEvent\"],\n> = Array<Log<bigint, number, false, undefined, TStrict, abiEvent[]>>;\n\n/**\n * Parses logs and returns the corresponding events.\n * @param options - The options for parsing logs.\n * @returns The parsed events.\n * @example\n * ```ts\n * import { parseEventLogs } from \"thirdweb\";\n * const events = parseEventLogs({\n *  logs,\n *  events: [preparedEvent, preparedEvent2],\n * });\n * ```\n * @contract\n */\nexport function parseEventLogs<\n  const abiEvents extends PreparedEvent<AbiEvent>[],\n  const TStrict extends boolean = true,\n>(\n  options: ParseEventLogsOptions<abiEvents, TStrict>,\n): ParseEventLogsResult<abiEvents, TStrict> {\n  const { logs, events, strict } = options;\n  return viem_parseEventLogs({\n    logs,\n    abi: events.map((e) => e.abiEvent),\n    strict,\n  }) as unknown as ParseEventLogsResult<abiEvents, TStrict>;\n}\n", "import type { Abi, AbiEvent } from \"abitype\";\nimport {\n  type GetContractEventsOptionsDirect,\n  getContractEvents,\n} from \"./get-events.js\";\n\nimport { watchBlockNumber } from \"../../rpc/watchBlockNumber.js\";\nimport { retry } from \"../../utils/retry.js\";\nimport type { Prettify } from \"../../utils/type-utils.js\";\nimport type { PreparedEvent } from \"../prepare-event.js\";\nimport type { ParseEventLogsResult } from \"./parse-logs.js\";\n\nexport type WatchContractEventsOptions<\n  abi extends Abi,\n  abiEvents extends PreparedEvent<AbiEvent>[],\n  TStrict extends boolean,\n> = Prettify<\n  GetContractEventsOptionsDirect<abi, abiEvents, TStrict> & {\n    onEvents: (events: ParseEventLogsResult<abiEvents, TStrict>) => void;\n    latestBlockNumber?: bigint;\n  }\n>;\n\n/**\n * Listens for  contract events from the blockchain.\n * @param options - The options for retrieving contract events.\n * @returns The unwatch function.\n * @example\n * ### Listen to all events for a contract\n * ```ts\n * import { watchContractEvents } from \"thirdweb\";\n * const unwatch = watchContractEvents({\n *  contract: myContract,\n *  onEvents: (events) => {\n *   // do something with the events\n *  },\n * });\n * ```\n *\n * ### Listen to specific events for a contract\n * ```ts\n * import { prepareEvent, watchContractEvents } from \"thirdweb\";\n * const myEvent = prepareEvent({\n *  event: \"event MyEvent(uint256 myArg)\",\n * });\n * const events = await watchContractEvents({\n *  contract: myContract,\n *  events: [myEvent],\n *  onEvents: (events) => {\n *   // do something with the events\n *  },\n * });\n * ```\n * @contract\n */\nexport function watchContractEvents<\n  const abi extends Abi,\n  const abiEvents extends PreparedEvent<AbiEvent>[],\n  const TStrict extends boolean = true,\n>(options: WatchContractEventsOptions<abi, abiEvents, TStrict>) {\n  // returning this returns the underlying \"unwatch\" function\n  return watchBlockNumber({\n    ...options.contract,\n\n    /**\n     * This function is called every time a new block is mined.\n     * @param blockNumber - The block number of the new block.\n     * @returns A promise that resolves when the function is finished.\n     * @internal\n     */\n    onNewBlockNumber: async (blockNumber) => {\n      const logs = await retry(\n        async () =>\n          getContractEvents({\n            ...options,\n            // fromBlock is inclusive\n            fromBlock: blockNumber,\n            // toBlock is inclusive\n            toBlock: blockNumber,\n          }),\n        {\n          retries: 3,\n          delay: 500,\n        },\n      );\n      // if there were any logs associated with our event(s)\n      if (logs.length) {\n        options.onEvents(logs);\n      }\n    },\n    latestBlockNumber: options.latestBlockNumber,\n  });\n}\n", "/**\n * Attempts to execute a function that returns a promise and retries if the function throws an error.\n *\n * @param {Function} fn - A function that returns a promise to be executed.\n * @param {Object} options - Configuration options for the retry behavior.\n * @param {number} [options.retries=1] - The number of times to retry the function before failing.\n * @param {number} [options.delay=0] - The delay in milliseconds between retries.\n * @returns {Promise<void>} The result of the function execution if successful.\n */\n\nexport async function retry<T>(\n  fn: () => Promise<T>,\n  options: { retries?: number; delay?: number },\n): Promise<T> {\n  const retries = options.retries ?? 1;\n  const delay = options.delay ?? 0;\n  let lastError: Error | null = null;\n  for (let i = 0; i < retries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      if (delay > 0) {\n        await new Promise((resolve) => setTimeout(resolve, delay));\n      }\n    }\n  }\n  throw lastError;\n}\n", "import type { Hash } from \"viem\";\nimport { getCachedChain } from \"../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport {\n  type ApproveParams,\n  approve,\n} from \"../../extensions/erc20/write/approve.js\";\nimport type { PrepareTransactionOptions } from \"../../transaction/prepare-transaction.js\";\nimport type { BaseTransactionOptions } from \"../../transaction/types.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { getPayBuyWithCryptoQuoteEndpoint } from \"../utils/definitions.js\";\n\n// TODO: add JSDoc description for all properties\n\n/**\n * The parameters for [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) function\n * It includes information about which tokens to swap, the amount of tokens to swap, slippage, etc.\n */\nexport type GetBuyWithCryptoQuoteParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   */\n  client: ThirdwebClient;\n\n  /**\n   * This is only relevant if the buy-with-crypto transaction is part of buy-with-fiat flow.\n   *\n   * When a swap is required after an onramp transaction, the intentId is used to link the buy-with-crypto transaction to the onramp transaction.\n   * Refer to [`getPostOnRampQuote`](https://portal.thirdweb.com/references/typescript/v5/getPostOnRampQuote) for more information.`\n   *\n   */\n  intentId?: string;\n\n  /**\n   * The address of the wallet from which the tokens will be sent.\n   */\n  fromAddress: string;\n\n  // source token\n\n  /**\n   * The chain id of the source token.\n   */\n  fromChainId: number;\n\n  /**\n   * The token address of the source token.\n   */\n  fromTokenAddress: string;\n\n  // to\n\n  /**\n   * The chain id of the destination token.\n   */\n  toChainId: number;\n\n  /**\n   * The token address of the destination token.\n   */\n  toTokenAddress: string;\n\n  /**\n   * The maximum slippage in basis points (bps) allowed for the swap.\n   * For example, if you want to allow a maximum slippage of 0.5%, you should specify `50` bps.\n   */\n  maxSlippageBPS?: number;\n} & (\n  | {\n      /**\n       * The amount of source token to be swapped.\n       * This is useful if you want to swap a certain amount of source token\n       *\n       * If you want a certain amount of destination token, you can provide `toAmount` instead of `fromAmount`.\n       */\n      fromAmount: string;\n      toAmount?: never;\n    }\n  | {\n      /**\n       * The amount of destination token to be received.\n       * This is useful if you want to get a certain amount of destination token.\n       *\n       * If you want to swap a certain amount of source token, you can provide `fromAmount` instead of `toAmount`.\n       */\n      toAmount: string;\n      fromAmount?: never;\n    }\n);\n\nexport type QuoteTokenInfo = {\n  chainId: number;\n  tokenAddress: string;\n  decimals: number;\n  priceUSDCents: number;\n  name?: string;\n  symbol?: string;\n};\n\ntype QuotePaymentToken = {\n  token: QuoteTokenInfo;\n  amountWei: string;\n  amount: string;\n  amountUSDCents: number;\n};\n\ntype QuoteTransactionRequest = {\n  data: string;\n  to: string;\n  value: string;\n  from: string;\n  chainId: number;\n  gasPrice: string;\n  gasLimit: string;\n};\n\ntype BuyWithCryptoQuoteRouteResponse = {\n  transactionRequest: QuoteTransactionRequest;\n  approval?: {\n    chainId: number;\n    tokenAddress: string;\n    spenderAddress: string;\n    amountWei: string;\n  };\n\n  fromAddress: string;\n  toAddress: string;\n\n  fromToken: QuoteTokenInfo;\n  toToken: QuoteTokenInfo;\n\n  fromAmountWei: string;\n  fromAmount: string;\n\n  toAmountMinWei: string;\n  toAmountMin: string;\n  toAmountWei: string;\n  toAmount: string;\n\n  paymentTokens: QuotePaymentToken[];\n  processingFees: QuotePaymentToken[];\n\n  estimated: {\n    fromAmountUSDCents: number;\n    toAmountMinUSDCents: number;\n    toAmountUSDCents: number;\n    slippageBPS: number;\n    feesUSDCents: number;\n    gasCostUSDCents?: number;\n    durationSeconds?: number;\n  };\n\n  maxSlippageBPS: number;\n  bridge?: string;\n};\n\nexport type QuoteApprovalParams = BaseTransactionOptions<ApproveParams>;\n\nexport type BuyWithCryptoQuote = {\n  transactionRequest: PrepareTransactionOptions;\n  approval?: PrepareTransactionOptions;\n\n  swapDetails: {\n    fromAddress: string;\n    toAddress: string;\n\n    fromToken: QuoteTokenInfo;\n    toToken: QuoteTokenInfo;\n\n    fromAmount: string;\n    fromAmountWei: string;\n\n    toAmountMinWei: string;\n    toAmountMin: string;\n    toAmount: string;\n    toAmountWei: string;\n\n    estimated: {\n      fromAmountUSDCents: number;\n      toAmountMinUSDCents: number;\n      toAmountUSDCents: number;\n      slippageBPS: number;\n      feesUSDCents: number;\n      gasCostUSDCents?: number;\n      durationSeconds?: number;\n    };\n\n    maxSlippageBPS: number;\n  };\n\n  paymentTokens: QuotePaymentToken[];\n  processingFees: QuotePaymentToken[];\n  client: ThirdwebClient;\n};\n\n/**\n * Get a quote of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) to buy any given token with crypto.\n * This quote contains the information about the swap such as token amounts, processing fees, estimated time etc.\n *\n * Once you have the quote, you can use `prepareTransaction` and prepare the transaction for submission.\n * @param params - object of type [`GetBuyWithCryptoQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithCryptoQuoteParams)\n * @returns Object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @example\n *\n * ```ts\n * import { getBuyWithCryptoQuote } from \"thirdweb/pay\";\n *\n * const quote = await getBuyWithCryptoQuote({\n *  client,\n *  fromAddress: \"0x...\", // wallet address\n *  fromChainId: 137, // chain id of the source token\n *  fromTokenAddress: \"0x...\", // token address of the source token\n *  fromAmount: \"10\", // amount of source token to swap\n *  // optionally, you can use `toAmount` instead if you only want a certain amount of destination token\n *  toChainId: 10, // chain id of the destination token\n *  toTokenAddress: \"0x...\", // token address of the destination token\n *  toAddress: \"0x...\", // optional: send the tokens to a different address\n *  maxSlippageBPS: 50, // optional: max 0.5% slippage\n * });\n * ```\n * @buyCrypto\n */\nexport async function getBuyWithCryptoQuote(\n  params: GetBuyWithCryptoQuoteParams,\n): Promise<BuyWithCryptoQuote> {\n  try {\n    const queryParams = new URLSearchParams({\n      fromAddress: params.fromAddress,\n      fromChainId: params.fromChainId.toString(),\n      fromTokenAddress: params.fromTokenAddress.toLowerCase(),\n      toChainId: params.toChainId.toString(),\n      toTokenAddress: params.toTokenAddress.toLowerCase(),\n    });\n\n    if (\"fromAmount\" in params && params.fromAmount) {\n      queryParams.append(\"fromAmount\", params.fromAmount);\n    }\n\n    if (\"toAmount\" in params && params.toAmount) {\n      queryParams.append(\"toAmount\", params.toAmount);\n    }\n\n    if (params.maxSlippageBPS) {\n      queryParams.append(\"maxSlippageBPS\", params.maxSlippageBPS.toString());\n    }\n\n    if (params.intentId) {\n      queryParams.append(\"intentId\", params.intentId);\n    }\n\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyWithCryptoQuoteEndpoint()}?${queryString}`;\n\n    const response = await getClientFetch(params.client)(url);\n\n    // Assuming the response directly matches the SwapResponse interface\n    if (!response.ok) {\n      const errorObj = await response.json();\n      if (\n        errorObj &&\n        \"error\" in errorObj &&\n        typeof errorObj.error === \"object\" &&\n        \"message\" in errorObj.error\n      ) {\n        throw new Error(errorObj.error.message);\n      }\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data: BuyWithCryptoQuoteRouteResponse = (await response.json())\n      .result;\n\n    const swapRoute: BuyWithCryptoQuote = {\n      transactionRequest: {\n        chain: getCachedChain(data.transactionRequest.chainId),\n        client: params.client,\n        data: data.transactionRequest.data as Hash,\n        to: data.transactionRequest.to,\n        value: BigInt(data.transactionRequest.value),\n        gas: BigInt(data.transactionRequest.gasLimit),\n        gasPrice: BigInt(data.transactionRequest.gasPrice),\n      },\n      approval: data.approval\n        ? approve({\n            contract: getContract({\n              client: params.client,\n              address: data.approval.tokenAddress,\n              chain: getCachedChain(data.approval.chainId),\n            }),\n            spender: data.approval?.spenderAddress,\n            amountWei: BigInt(data.approval.amountWei),\n          })\n        : undefined,\n      swapDetails: {\n        fromAddress: data.fromAddress,\n        toAddress: data.toAddress,\n\n        fromToken: data.fromToken,\n        toToken: data.toToken,\n\n        fromAmount: data.fromAmount,\n        fromAmountWei: data.fromAmountWei,\n\n        toAmountMinWei: data.toAmountMinWei,\n        toAmountMin: data.toAmountMin,\n\n        toAmountWei: data.toAmountWei,\n        toAmount: data.toAmount,\n        estimated: data.estimated,\n\n        maxSlippageBPS: data.maxSlippageBPS,\n      },\n\n      paymentTokens: data.paymentTokens,\n      processingFees: data.processingFees,\n      client: params.client,\n    };\n\n    return swapRoute;\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n", "import type { Address } from \"abitype\";\nimport type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport type { Prettify } from \"../../../utils/type-utils.js\";\nimport { toUnits } from \"../../../utils/units.js\";\nimport { approve as generatedApprove } from \"../__generated__/IERC20/write/approve.js\";\n\n/**\n * Represents the parameters for the `approve` function.\n */\nexport type ApproveParams = Prettify<\n  { spender: Address } & (\n    | {\n        amount: number | string;\n      }\n    | {\n        amountWei: bigint;\n      }\n  )\n>;\n\n/**\n * Approves the spending of tokens by a specific address.\n * @param options - The transaction options.\n * @returns A prepared transaction object.\n * @extension ERC20\n * @example\n * ```ts\n * import { approve } from \"thirdweb/extensions/erc20\";\n * const tx = await approve({\n *  contract,\n *  spender: \"0x...\",\n *  amount: 100,\n * });\n * ```\n */\nexport function approve(options: BaseTransactionOptions<ApproveParams>) {\n  return generatedApprove({\n    contract: options.contract,\n    asyncParams: async () => {\n      let amount: bigint;\n      if (\"amount\" in options) {\n        // if we need to parse the amount from ether to gwei then we pull in the decimals extension\n        const { decimals } = await import(\"../read/decimals.js\");\n        // if this fails we fall back to `18` decimals\n        const d = await decimals(options).catch(() => 18);\n        // turn ether into gwei\n        amount = toUnits(options.amount.toString(), d);\n      } else {\n        amount = options.amountWei;\n      }\n      return {\n        spender: options.spender,\n        value: amount,\n      } as const;\n    },\n  });\n}\n", "import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport type {\n  BaseTransactionOptions,\n  WithOverrides,\n} from \"../../../../../transaction/types.js\";\nimport { prepareContractCall } from \"../../../../../transaction/prepare-contract-call.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { once } from \"../../../../../utils/promise/once.js\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"approve\" function.\n */\nexport type ApproveParams = WithOverrides<{\n  spender: AbiParameterToPrimitiveType<{ type: \"address\"; name: \"spender\" }>;\n  value: AbiParameterToPrimitiveType<{ type: \"uint256\"; name: \"value\" }>;\n}>;\n\nexport const FN_SELECTOR = \"0x095ea7b3\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"address\",\n    name: \"spender\",\n  },\n  {\n    type: \"uint256\",\n    name: \"value\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"bool\",\n  },\n] as const;\n\n/**\n * Checks if the `approve` method is supported by the given contract.\n * @param contract The ThirdwebContract.\n * @returns A promise that resolves to a boolean indicating if the `approve` method is supported.\n * @extension ERC20\n * @example\n * ```ts\n * import { isApproveSupported } from \"thirdweb/extensions/erc20\";\n *\n * const supported = await isApproveSupported(contract);\n * ```\n */\nexport async function isApproveSupported(contract: ThirdwebContract<any>) {\n  return detectMethod({\n    contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"approve\" function.\n * @param options - The options for the approve function.\n * @returns The encoded ABI parameters.\n * @extension ERC20\n * @example\n * ```ts\n * import { encodeApproveParams } \"thirdweb/extensions/erc20\";\n * const result = encodeApproveParams({\n *  spender: ...,\n *  value: ...,\n * });\n * ```\n */\nexport function encodeApproveParams(options: ApproveParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.spender, options.value]);\n}\n\n/**\n * Encodes the \"approve\" function into a Hex string with its parameters.\n * @param options - The options for the approve function.\n * @returns The encoded hexadecimal string.\n * @extension ERC20\n * @example\n * ```ts\n * import { encodeApprove } \"thirdweb/extensions/erc20\";\n * const result = encodeApprove({\n *  spender: ...,\n *  value: ...,\n * });\n * ```\n */\nexport function encodeApprove(options: ApproveParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeApproveParams(options).slice(2)) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Prepares a transaction to call the \"approve\" function on the contract.\n * @param options - The options for the \"approve\" function.\n * @returns A prepared transaction object.\n * @extension ERC20\n * @example\n * ```ts\n * import { approve } from \"thirdweb/extensions/erc20\";\n *\n * const transaction = approve({\n *  contract,\n *  spender: ...,\n *  value: ...,\n *  overrides: {\n *    ...\n *  }\n * });\n *\n * // Send the transaction\n * ...\n *\n * ```\n */\nexport function approve(\n  options: BaseTransactionOptions<\n    | ApproveParams\n    | {\n        asyncParams: () => Promise<ApproveParams>;\n      }\n  >,\n) {\n  const asyncOptions = once(async () => {\n    return \"asyncParams\" in options ? await options.asyncParams() : options;\n  });\n\n  return prepareContractCall({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: async () => {\n      const resolvedOptions = await asyncOptions();\n      return [resolvedOptions.spender, resolvedOptions.value] as const;\n    },\n    value: async () => (await asyncOptions()).overrides?.value,\n    accessList: async () => (await asyncOptions()).overrides?.accessList,\n    gas: async () => (await asyncOptions()).overrides?.gas,\n    gasPrice: async () => (await asyncOptions()).overrides?.gasPrice,\n    maxFeePerGas: async () => (await asyncOptions()).overrides?.maxFeePerGas,\n    maxPriorityFeePerGas: async () =>\n      (await asyncOptions()).overrides?.maxPriorityFeePerGas,\n    nonce: async () => (await asyncOptions()).overrides?.nonce,\n    extraGas: async () => (await asyncOptions()).overrides?.extraGas,\n  });\n}\n", "type OnceFn<T> = () => Promise<T>;\n\nexport function once<const T>(fn: OnceFn<T>): OnceFn<T> {\n  let result: Promise<T>;\n  return () => {\n    if (!result) {\n      result = fn();\n    }\n    return result;\n  };\n}\n", "import { getThirdwebDomains } from \"../../utils/domains.js\";\n\n/**\n * Endpoint to get the status of a \"Buy with Crypto\" quote.\n * @internal\n */\nexport const getPayBuyWithCryptoStatusUrl = () =>\n  `https://${getThirdwebDomains().pay}/buy-with-crypto/status/v1`;\n/**\n * Endpoint to get \"Buy with Crypto\" quote.\n * @internal\n */\nexport const getPayBuyWithCryptoQuoteEndpoint = () =>\n  `https://${getThirdwebDomains().pay}/buy-with-crypto/quote/v1`;\n\n/**\n * Endpoint to get a \"Buy with Fiat\" quote.\n * @internal\n */\nexport const getPayBuyWithFiatQuoteEndpoint = () =>\n  `https://${getThirdwebDomains().pay}/buy-with-fiat/quote/v1`;\n\n/**\n * Endpoint to get the status of a \"Buy with Fiat\" transaction status.\n * @internal\n */\nexport const getPayBuyWithFiatStatusEndpoint = () =>\n  `https://${getThirdwebDomains().pay}/buy-with-fiat/status/v1`;\n\n/**\n * Endpoint to get history of \"Buy with Fiat\" transactions for given wallet address.\n * @internal\n */\nexport const getPayBuyWithFiatHistoryEndpoint = () =>\n  `https://${getThirdwebDomains().pay}/buy-with-fiat/history/v1`;\n\n/**\n * Endpoint to get a \"Buy with Crypto\" transaction history for a given wallet address.\n * @internal\n */\nexport const getPayBuyWithCryptoHistoryEndpoint = () =>\n  `https://${getThirdwebDomains().pay}/buy-with-crypto/history/v1`;\n\n/**\n * Endpoint to get a list of supported destination chains and tokens for thirdweb pay.\n * @internal\n */\nexport const getPaySupportedDestinations = () =>\n  `https://${getThirdwebDomains().pay}/destination-tokens/v1`;\n\n/**\n * Endpoint to get a list of supported source chains + tokens for thirdweb pay.\n * @internal\n */\nexport const getPaySupportedSources = () =>\n  `https://${getThirdwebDomains().pay}/buy-with-crypto/source-tokens/v1`;\n\n/**\n * Endpoint to get buy history for a given wallet address.\n * This includes both \"Buy with Crypto\" and \"Buy with Fiat\" transactions.\n * @internal\n */\nexport const getPayBuyHistoryEndpoint = () =>\n  `https://${getThirdwebDomains().pay}/wallet/history/v1`;\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport type {\n  PayOnChainTransactionDetails,\n  PayTokenInfo,\n} from \"../utils/commonTypes.js\";\nimport { getPayBuyWithCryptoStatusUrl } from \"../utils/definitions.js\";\n\n// TODO: add JSDoc description for all properties\n\nexport type BuyWithCryptoQuoteSummary = {\n  fromToken: PayTokenInfo;\n  toToken: PayTokenInfo;\n\n  fromAmountWei: string;\n  fromAmount: string;\n\n  toAmountWei: string;\n  toAmount: string;\n\n  toAmountMin: string;\n  toAmountMinWei: string;\n\n  estimated: {\n    fromAmountUSDCents: number;\n    toAmountMinUSDCents: number;\n    toAmountUSDCents: number;\n    slippageBPS: number;\n    feesUSDCents: number;\n    gasCostUSDCents?: number;\n    durationSeconds?: number;\n  }; // SAME AS QUOTE\n\n  createdAt: string; // ISO DATE\n};\n\nexport type BuyWithCryptoTransaction = {\n  client: ThirdwebClient;\n  transactionHash: string;\n};\n\nexport type BuyWithCryptoStatuses = \"NONE\" | \"PENDING\" | \"FAILED\" | \"COMPLETED\";\n\nexport type BuyWithCryptoSubStatuses =\n  | \"NONE\"\n  | \"WAITING_BRIDGE\"\n  | \"REVERTED_ON_CHAIN\"\n  | \"SUCCESS\"\n  | \"PARTIAL_SUCCESS\"\n  | \"UNKNOWN_ERROR\";\n\nexport type SwapType = \"SAME_CHAIN\" | \"CROSS_CHAIN\";\n\n/**\n * The object returned by the [`getBuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoStatus) function to represent the status of a quoted transaction\n * @buyCrypto\n */\nexport type BuyWithCryptoStatus =\n  | {\n      status: \"NOT_FOUND\";\n    }\n  | {\n      quote: BuyWithCryptoQuoteSummary;\n      swapType: SwapType;\n      source?: PayOnChainTransactionDetails;\n      destination?: PayOnChainTransactionDetails;\n      status: BuyWithCryptoStatuses;\n      subStatus: BuyWithCryptoSubStatuses;\n      fromAddress: string;\n      toAddress: string;\n      failureMessage?: string;\n      bridge?: string;\n    };\n\nexport type ValidBuyWithCryptoStatus = Exclude<\n  BuyWithCryptoStatus,\n  { status: \"NOT_FOUND\" }\n>;\n\n/**\n * Gets the status of a buy with crypto transaction\n * @param buyWithCryptoTransaction - Object of type [`BuyWithCryptoTransaction`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransaction)\n * @example\n *\n * ```ts\n * import { sendTransaction } from \"thirdweb\";\n * import { getBuyWithCryptoStatus, getBuyWithCryptoQuote } from \"thirdweb/pay\";\n *\n * // get a quote between two tokens\n * const quote = await getBuyWithCryptoQuote(quoteParams);\n *\n * // if approval is required, send the approval transaction\n * if (quote.approval) {\n *  const txResult = await sendTransaction({\n *    transaction: quote.approval,\n *    account: account, // account from connected wallet\n *  });\n *\n *  await waitForReceipt(txResult);\n * }\n *\n * // send the quoted transaction\n * const swapTxResult = await sendTransaction({\n *    transaction: quote.transactionRequest,\n *    account: account, // account from connected wallet\n *  });\n *\n * await waitForReceipt(swapTxResult);\n *\n * // keep polling the status of the quoted transaction until it returns a success or failure status\n * const status = await getBuyWithCryptoStatus({\n *    client,\n *    transactionHash: swapTxResult.transactionHash,\n * }});\n * ```\n * @returns Object of type [`BuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoStatus)\n * @buyCrypto\n */\nexport async function getBuyWithCryptoStatus(\n  buyWithCryptoTransaction: BuyWithCryptoTransaction,\n): Promise<BuyWithCryptoStatus> {\n  try {\n    if (!buyWithCryptoTransaction.transactionHash) {\n      throw new Error(\"Transaction hash is required\");\n    }\n    const queryString = new URLSearchParams({\n      transactionHash: buyWithCryptoTransaction.transactionHash,\n    }).toString();\n    const url = `${getPayBuyWithCryptoStatusUrl()}?${queryString}`;\n\n    const response = await getClientFetch(buyWithCryptoTransaction.client)(url);\n\n    // Assuming the response directly matches the BuyWithCryptoStatus interface\n    if (!response.ok) {\n      response.body?.cancel();\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data: BuyWithCryptoStatus = (await response.json()).result;\n    return data;\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { getPayBuyWithCryptoHistoryEndpoint } from \"../utils/definitions.js\";\nimport type { BuyWithCryptoStatus } from \"./getStatus.js\";\n\n/**\n * The parameters for [`getBuyWithCryptoHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoHistory) function\n * It takes the wallet history address and optional cursor and page size. for paginated results.\n * @buyCrypto\n */\nexport type BuyWithCryptoHistoryParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   */\n  client: ThirdwebClient;\n  /**\n   * The address of the wallet to get the wallet history for\n   */\n  walletAddress: string;\n  /**\n   * The number of results to return in a single page. The default value is 10.\n   */\n  count: number;\n  /**\n   * The cursor for the page of results to return. The default value is `undefined`.\n   */\n  start: number;\n};\n\n/**\n * The results for [`getBuyWithCryptoHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoHistory) function\n * It includes information about transactions that the wallet address has made through thirdweb buy with crypto.\n * @buyCrypto\n */\nexport type BuyWithCryptoHistoryData = {\n  page: BuyWithCryptoStatus[];\n  hasNextPage: boolean;\n};\n\n/**\n * Gets the History of purchases for a given wallet address\n * @param params Object of type [`BuyWithCryptoHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoHistoryParams)\n * @example\n *\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * import { BuyWithCryptoHistoryData } from \"thirdweb/pay\";\n *\n * const client = createThirdwebClient({ clientId: \"...\" });\n * const walletAddress = \"0x...\";\n * const params = {\n *  client,\n *  walletAddress,\n * };\n *\n * // grabs the history of purchase transactions for the wallet address\n * const status = await getBuyWithCryptoHistory(params)\n * ```\n * @returns Object of type [`BuyWithCryptoHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoHistoryData)\n * @buyCrypto\n */\nexport async function getBuyWithCryptoHistory(\n  params: BuyWithCryptoHistoryParams,\n): Promise<BuyWithCryptoHistoryData> {\n  try {\n    const queryParams = new URLSearchParams();\n    queryParams.append(\"walletAddress\", params.walletAddress);\n    queryParams.append(\"start\", params.start.toString());\n    queryParams.append(\"count\", params.count.toString());\n\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyWithCryptoHistoryEndpoint()}?${queryString}`;\n\n    const response = await getClientFetch(params.client)(url);\n\n    // Assuming the response directly matches the SwapResponse interface\n    if (!response.ok) {\n      response.body?.cancel();\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data: BuyWithCryptoHistoryData = (await response.json()).result;\n    return data;\n  } catch (error) {\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n", "import type { Hex } from \"./is-hex.js\";\n\n/**\n * Concatenates an array of hexadecimal values into a single hexadecimal value.\n *\n * @param values - An array of hexadecimal values to concatenate.\n * @returns The concatenated hexadecimal value.\n * @utils\n */\nexport function concatHex(values: readonly Hex[]): Hex {\n  return `0x${(values as Hex[]).reduce(\n    (acc, x) => acc + x.replace(\"0x\", \"\"),\n    \"\",\n  )}`;\n}\n", "import { assertSize } from \"./helpers/assert-size.js\";\nimport type { Hex } from \"./helpers/is-hex.js\";\nimport { trim } from \"./helpers/trim.js\";\nimport { hexToBigInt, hexToNumber, uint8ArrayToHex } from \"./hex.js\";\n\nexport type FromBytesParameters<\n  TTo extends \"string\" | \"hex\" | \"bigint\" | \"number\" | \"boolean\",\n> =\n  | TTo\n  | {\n      /** Size of the bytes. */\n      size?: number;\n      /** Type to convert to. */\n      to: TTo;\n    };\n\nexport type FromBytesReturnType<TTo> = TTo extends \"string\"\n  ? string\n  : TTo extends \"hex\"\n    ? Hex\n    : TTo extends \"bigint\"\n      ? bigint\n      : TTo extends \"number\"\n        ? number\n        : TTo extends \"boolean\"\n          ? boolean\n          : never;\n\n/**\n * Converts a Uint8Array to the specified type.\n * @param bytes - The Uint8Array to convert.\n * @param toOrOpts - The target type or conversion options.\n * @returns The converted value of the specified type.\n * @example\n * ```ts\n * import { fromBytes } from \"thirdweb/utils\";\n * const bytes = new Uint8Array([1, 164]);\n * const number = fromBytes(bytes, \"number\");\n * console.log(number); // 420\n * ```\n * @utils\n */\nexport function fromBytes<\n  TTo extends \"string\" | \"hex\" | \"bigint\" | \"number\" | \"boolean\",\n>(\n  bytes: Uint8Array,\n  toOrOpts: FromBytesParameters<TTo>,\n): FromBytesReturnType<TTo> {\n  const opts = typeof toOrOpts === \"string\" ? { to: toOrOpts } : toOrOpts;\n  switch (opts.to) {\n    case \"number\":\n      return bytesToNumber(bytes, opts) as FromBytesReturnType<TTo>;\n    case \"bigint\":\n      return bytesToBigInt(bytes, opts) as FromBytesReturnType<TTo>;\n    case \"boolean\":\n      return bytesToBool(bytes, opts) as FromBytesReturnType<TTo>;\n    case \"string\":\n      return bytesToString(bytes, opts) as FromBytesReturnType<TTo>;\n    default:\n      return uint8ArrayToHex(bytes, opts) as FromBytesReturnType<TTo>;\n  }\n}\n\nexport type BytesToBigIntOpts = {\n  /** Whether or not the number of a signed representation. */\n  signed?: boolean;\n  /** Size of the bytes. */\n  size?: number;\n};\n\n/**\n * Converts a Uint8Array of bytes to a bigint.\n * @param bytes - The Uint8Array of bytes to convert.\n * @param opts - Optional parameters for the conversion.\n * @returns The converted bigint.\n * @example\n * ```ts\n * import { bytesToBigInt } from \"thirdweb/utils\";\n * const bytes = new Uint8Array([1, 164]);\n * const bigInt = bytesToBigInt(bytes);\n * console.log(bigInt); // 420n\n * ```\n * @utils\n */\nexport function bytesToBigInt(\n  bytes: Uint8Array,\n  opts: BytesToBigIntOpts = {},\n): bigint {\n  if (typeof opts.size !== \"undefined\") {\n    assertSize(bytes, { size: opts.size });\n  }\n  const hex = uint8ArrayToHex(bytes, opts);\n  return hexToBigInt(hex, opts);\n}\n\nexport type BytesToBoolOpts = {\n  /** Size of the bytes. */\n  size?: number;\n};\n\n/**\n * Converts a byte array to a boolean value.\n * @param bytes_ - The byte array to convert.\n * @param opts - Optional parameters for the conversion.\n * @returns The boolean value converted from the byte array.\n * @throws Error if the byte array is invalid or the boolean representation is invalid.\n * @example\n * ```ts\n * import { bytesToBool } from \"thirdweb/utils\";\n * const bytes = new Uint8Array([1]);\n * const bool = bytesToBool(bytes);\n * console.log(bool); // true\n * ```\n * @utils\n */\nexport function bytesToBool(\n  bytes_: Uint8Array,\n  opts: BytesToBoolOpts = {},\n): boolean {\n  let bytes = bytes_;\n  if (typeof opts.size !== \"undefined\") {\n    assertSize(bytes, { size: opts.size });\n    bytes = trim(bytes);\n  }\n\n  if (bytes.length > 1 || (bytes[0] && bytes[0] > 1)) {\n    throw new Error(`Invalid boolean representation: ${bytes}`);\n  }\n  return Boolean(bytes[0]);\n}\n\nexport type BytesToNumberOpts = BytesToBigIntOpts;\n\n/**\n * Converts a Uint8Array of bytes to a number.\n * @param bytes - The Uint8Array of bytes to convert.\n * @param opts - Optional configuration options.\n * @returns The converted number.\n * @example\n * ```ts\n * import { bytesToNumber } from \"thirdweb/utils\";\n * const bytes = new Uint8Array([1, 164]);\n * const number = bytesToNumber(bytes);\n * console.log(number); // 420\n * ```\n * @utils\n */\nexport function bytesToNumber(\n  bytes: Uint8Array,\n  opts: BytesToNumberOpts = {},\n): number {\n  if (typeof opts.size !== \"undefined\") {\n    assertSize(bytes, { size: opts.size });\n  }\n  const hex = uint8ArrayToHex(bytes, opts);\n  return hexToNumber(hex, opts);\n}\n\nexport type BytesToStringOpts = {\n  /** Size of the bytes. */\n  size?: number;\n};\n\n/**\n * Converts an array of bytes to a string using UTF-8 encoding.\n * @param bytes_ - The array of bytes to convert.\n * @param opts - Optional parameters for the conversion.\n * @returns The resulting string.\n * @example\n * ```ts\n * import { bytesToString } from \"thirdweb/utils\";\n * const bytes = new Uint8Array([72, 101, 108, 108, 111]);\n * const string = bytesToString(bytes);\n * console.log(string); // \"Hello\"\n * ```\n * @utils\n */\nexport function bytesToString(\n  bytes_: Uint8Array,\n  opts: BytesToStringOpts = {},\n): string {\n  let bytes = bytes_;\n  if (typeof opts.size !== \"undefined\") {\n    assertSize(bytes, { size: opts.size });\n    bytes = trim(bytes, { dir: \"right\" });\n  }\n  return new TextDecoder().decode(bytes);\n}\n", "export {\n  getBuyWithCryptoQuote,\n  type BuyWithCryptoQuote,\n  type QuoteApprovalParams,\n  type QuoteTokenInfo,\n  type GetBuyWithCryptoQuoteParams,\n} from \"../pay/buyWithCrypto/getQuote.js\";\n\nexport {\n  getBuyWithCryptoStatus,\n  type BuyWithCryptoStatus,\n  type BuyWithCryptoTransaction,\n} from \"../pay/buyWithCrypto/getStatus.js\";\n\nexport {\n  getBuyWithCryptoHistory,\n  type BuyWithCryptoHistoryData,\n  type BuyWithCryptoHistoryParams,\n} from \"../pay/buyWithCrypto/getHistory.js\";\n\n// fiat ------------------------------------------------\n\nexport {\n  getBuyWithFiatQuote,\n  type BuyWithFiatQuote,\n  type GetBuyWithFiatQuoteParams,\n} from \"../pay/buyWithFiat/getQuote.js\";\n\nexport {\n  getBuyWithFiatStatus,\n  type BuyWithFiatStatus,\n  type GetBuyWithFiatStatusParams,\n} from \"../pay/buyWithFiat/getStatus.js\";\n\nexport {\n  getBuyWithFiatHistory,\n  type BuyWithFiatHistoryData,\n  type BuyWithFiatHistoryParams,\n} from \"../pay/buyWithFiat/getHistory.js\";\n\nexport {\n  getPostOnRampQuote,\n  type GetPostOnRampQuoteParams,\n} from \"../pay/buyWithFiat/getPostOnRampQuote.js\";\n\nexport {\n  getBuyHistory,\n  type BuyHistoryData,\n  type BuyHistoryParams,\n} from \"../pay/getBuyHistory.js\";\n\nexport { isSwapRequiredPostOnramp } from \"../pay/buyWithFiat/isSwapRequiredPostOnramp.js\";\n\n// types ------------------------------------------------\n\nexport type {\n  PayTokenInfo,\n  PayOnChainTransactionDetails,\n} from \"../pay/utils/commonTypes.js\";\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { getPayBuyWithFiatQuoteEndpoint } from \"../utils/definitions.js\";\n\n/**\n * Parameters for [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function\n */\nexport type GetBuyWithFiatQuoteParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   */\n  client: ThirdwebClient;\n\n  /**\n   * The address of the wallet to which the tokens will be sent.\n   */\n  toAddress: string;\n\n  /**\n   * Chain id of the token to buy.\n   */\n  toChainId: number;\n\n  /**\n   * Token address of the token to buy.\n   */\n  toTokenAddress: string;\n\n  /**\n   * Symbol of the fiat currency to buy the token with.\n   */\n  fromCurrencySymbol: \"USD\" | \"CAD\" | \"GBP\" | \"EUR\";\n\n  /**\n   * The maximum slippage in basis points (bps) allowed for the transaction.\n   * For example, if you want to allow a maximum slippage of 0.5%, you should specify `50` bps.\n   */\n  maxSlippageBPS?: number;\n\n  /**\n   * The amount of fiat currency to spend to buy the token.\n   * This is useful if you want to buy whatever amount of token you can get for a certain amount of fiat currency.\n   *\n   * If you want a certain amount of token, you can provide `toAmount` instead of `fromAmount`.\n   */\n  fromAmount?: string;\n\n  /**\n   * The amount of token to buy\n   * This is useful if you want to get a certain amount of token.\n   *\n   * If you want to buy however much token you can get for a certain amount of fiat currency, you can provide `fromAmount` instead of `toAmount`.\n   */\n  toAmount?: string;\n\n  /**\n   * Whether to use on-ramp provider in test mode for testing purpose or not.\n   *\n   * Defaults to `false`\n   */\n  isTestMode?: boolean;\n};\n\n/**\n * The response object returned by the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function.\n *\n * This includes various information for buying a token using a fiat currency:\n * - on-ramp provider UI link\n * - The estimated time for the transaction to complete.\n * - The on-ramp and destination token information.\n * - Processing fees\n */\nexport type BuyWithFiatQuote = {\n  /**\n   * Estimated time for the transaction to complete in seconds.\n   */\n  estimatedDurationSeconds: number;\n  /**\n   * Minimum amount of token that is expected to be received in units.\n   */\n  estimatedToAmountMin: string;\n  /**\n   * Minimum amount of token that is expected to be received in wei.\n   */\n  estimatedToAmountMinWei: string;\n  /**\n   * Amount of token that is expected to be received in units.\n   *\n   * (estimatedToAmountMinWei - maxSlippageWei)\n   */\n  toAmountMinWei: string;\n  /**\n   * Amount of token that is expected to be received in wei.\n   *\n   * (estimatedToAmountMin - maxSlippageWei)\n   */\n  toAmountMin: string;\n  /**\n   * fiat currency used to buy the token - excluding the fees.\n   */\n  fromCurrency: {\n    amount: string;\n    amountUnits: string;\n    decimals: number;\n    currencySymbol: string;\n  };\n  /**\n   * Fiat currency used to buy the token - including the fees.\n   */\n  fromCurrencyWithFees: {\n    amount: string;\n    amountUnits: string;\n    decimals: number;\n    currencySymbol: string;\n  };\n  /**\n   * Token information for the desired token. (token the user wants to buy)\n   */\n  toToken: {\n    symbol?: string | undefined;\n    priceUSDCents?: number | undefined;\n    name?: string | undefined;\n    chainId: number;\n    tokenAddress: string;\n    decimals: number;\n  };\n  /**\n   * Address of the wallet to which the tokens will be sent.\n   */\n  toAddress: string;\n  /**\n   * The maximum slippage in basis points (bps) allowed for the transaction.\n   */\n  maxSlippageBPS: number;\n  /**\n   * Id of transaction\n   */\n  intentId: string;\n  /**\n   * Array of processing fees for the transaction.\n   *\n   * This includes the processing fees for on-ramp and swap (if required).\n   */\n  processingFees: {\n    amount: string;\n    amountUnits: string;\n    decimals: number;\n    currencySymbol: string;\n    feeType: \"ON_RAMP\" | \"NETWORK\";\n  }[];\n  /**\n   * Token that will be sent to the user's wallet address by the on-ramp provider.\n   *\n   * If the token is same as `toToken` - the user can directly buy the token from the on-ramp provider.\n   * If not, the user will receive this token and a swap is required to convert it `toToken`.\n   */\n  onRampToken: {\n    amount: string;\n    amountWei: string;\n    amountUSDCents: number;\n    token: {\n      chainId: number;\n      decimals: number;\n      name: string;\n      priceUSDCents: number;\n      symbol: string;\n      tokenAddress: string;\n    };\n  };\n\n  /**\n   * Link to the on-ramp provider UI that will prompt the user to buy the token with fiat currency.\n   *\n   * This link should be opened in a new tab.\n   * @example\n   * ```ts\n   * window.open(quote.onRampLink, \"_blank\");\n   * ```\n   *\n   */\n  onRampLink: string;\n};\n\n/**\n * Get a quote of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) to buy given token with fiat currency.\n * This quote contains the information about the swap such as token amounts, processing fees, estimated time etc.\n *\n * ### Rendering the On-Ramp provider UI\n * Once you have the `quote`, you can open the `quote.onRampLink` in a new tab - This will prompt the user to buy the token with fiat currency\n *\n * ### Determining the steps required\n * If `quote.onRampToken.token` is same as `quote.toToken` ( same chain + same token address ) - This means that the token can be directly bought from the on-ramp provider.\n * But if they are different, On-ramp provider will send the `quote.onRampToken` to the user's wallet address and a swap is required to swap it to the desired token onchain.\n *\n * You can use the [`isSwapRequiredPostOnramp`](https://portal.thirdweb.com/references/typescript/v5/isSwapRequiredPostOnramp) utility function to check if a swap is required after the on-ramp is done.\n *\n * ### Polling for the status\n * Once you open the `quote.onRampLink` in a new tab, you can start polling for the status using [`getBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatStatus) to get the status of the transaction.\n *\n * `getBuyWithFiatStatus` returns a status object of type [`BuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatStatus).\n *\n * - If no swap is required - the status will become `\"ON_RAMP_TRANSFER_COMPLETED\"` once the on-ramp provider has sent the desired token to the user's wallet address. Once you receive this status, the process is complete.\n * - If a swap is required - the status will become `\"CRYPTO_SWAP_REQUIRED\"` once the on-ramp provider has sent the tokens to the user's wallet address. Once you receive this status, you need to start the swap process.\n *\n * ### Swap Process\n * On receiving the `\"CRYPTO_SWAP_REQUIRED\"` status, you can use the [`getPostOnRampQuote`](https://portal.thirdweb.com/references/typescript/v5/getPostOnRampQuote) function to get the quote for the swap of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote).\n *\n * Once you have this quote - You can follow the same steps as mentioned in the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) documentation to perform the swap.\n *\n * @param params - object of type [`GetBuyWithFiatQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithFiatQuoteParams)\n * @returns Object of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @example\n * Get a quote for buying 10 USDC on polygon chain (chainId: 137) with USD fiat currency:\n *\n * ```ts\n * import { getBuyWithFiatQuote } from \"thirdweb/pay\";\n *\n * const quote = await getBuyWithFiatQuote({\n *  client: client, // thirdweb client\n *  fromCurrencySymbol: \"USD\", // fiat currency symbol\n *  toChainId: 137, // polygon chain id\n *  toAmount: \"10\", // amount of USDC to buy\n *  toTokenAddress: \"0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359\" // USDC token address in polygon chain\n *  toAddress: \"0x...\", // user's wallet address\n *  isTestMode: false, // whether to use onramp in test mode for testing purpose (defaults to false)\n * });\n *\n * window.open(quote.onRampLink, \"_blank\");\n * ```\n * @buyCrypto\n */\nexport async function getBuyWithFiatQuote(\n  params: GetBuyWithFiatQuoteParams,\n): Promise<BuyWithFiatQuote> {\n  try {\n    const queryParams = new URLSearchParams({\n      toAddress: params.toAddress,\n      fromCurrencySymbol: params.fromCurrencySymbol,\n      toChainId: params.toChainId.toString(),\n      toTokenAddress: params.toTokenAddress.toLowerCase(),\n    });\n\n    if (params.fromAmount) {\n      queryParams.append(\"fromAmount\", params.fromAmount);\n    }\n\n    if (params.toAmount) {\n      queryParams.append(\"toAmount\", params.toAmount);\n    }\n\n    if (params.maxSlippageBPS) {\n      queryParams.append(\"maxSlippageBPS\", params.maxSlippageBPS.toString());\n    }\n\n    if (params.isTestMode) {\n      queryParams.append(\"isTestMode\", params.isTestMode.toString());\n    }\n\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyWithFiatQuoteEndpoint()}?${queryString}`;\n\n    const response = await getClientFetch(params.client)(url);\n\n    // Assuming the response directly matches the SwapResponse interface\n    if (!response.ok) {\n      const errorObj = await response.json();\n      if (errorObj && \"error\" in errorObj) {\n        throw errorObj;\n      }\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return (await response.json()).result;\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw error;\n  }\n}\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport type {\n  PayOnChainTransactionDetails,\n  PayTokenInfo,\n} from \"../utils/commonTypes.js\";\nimport { getPayBuyWithFiatStatusEndpoint } from \"../utils/definitions.js\";\n\n/**\n * Parameters for the [`getBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatStatus) function\n */\nexport type GetBuyWithFiatStatusParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   */\n  client: ThirdwebClient;\n  /**\n   * Intent ID of the \"Buy with fiat\" transaction. You can get the intent ID from the quote object returned by the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function\n   */\n  intentId: string;\n};\n\nexport type ValidBuyWithFiatStatus = Exclude<\n  BuyWithFiatStatus,\n  { status: \"NOT_FOUND\" }\n>;\n\n/**\n * The returned object from [`getBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatStatus) function\n *\n * If the in invalid intentId is provided, the object will have a status of \"NOT_FOUND\" and no other fields.\n */\nexport type BuyWithFiatStatus =\n  | {\n      status: \"NOT_FOUND\";\n    }\n  | {\n      /**\n       * Intent ID of the \"Buy with fiat\" transaction. You can get the intent ID from the quote object returned by the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function\n       */\n      intentId: string;\n      /**\n       * The status of the transaction\n       * - `NONE` - No status\n       * - `PENDING_PAYMENT` - Payment is not done yet in the on-ramp provider\n       * - `PAYMENT_FAILED` - Payment failed in the on-ramp provider\n       * - `PENDING_ON_RAMP_TRANSFER` - Payment is done but the on-ramp provider is yet to transfer the tokens to the user's wallet\n       * - `ON_RAMP_TRANSFER_IN_PROGRESS` - On-ramp provider is transferring the tokens to the user's wallet\n       * - `ON_RAMP_TRANSFER_COMPLETED` - On-ramp provider has transferred the tokens to the user's wallet\n       * - `ON_RAMP_TRANSFER_FAILED` - On-ramp provider failed to transfer the tokens to the user's wallet\n       * - `CRYPTO_SWAP_REQUIRED` - On-ramp provider has sent the tokens to the user's wallet but a swap is required to convert it to the desired token\n       * - `CRYPTO_SWAP_IN_PROGRESS` - Swap is in progress\n       * - `CRYPTO_SWAP_COMPLETED` - Swap is completed and the user has received the desired token\n       * - `CRYPTO_SWAP_FALLBACK` - Swap failed and the user has received a fallback token which is not the desired token\n       */\n      status:\n        | \"NONE\"\n        | \"PENDING_PAYMENT\"\n        | \"PAYMENT_FAILED\"\n        | \"PENDING_ON_RAMP_TRANSFER\"\n        | \"ON_RAMP_TRANSFER_IN_PROGRESS\"\n        | \"ON_RAMP_TRANSFER_COMPLETED\"\n        | \"ON_RAMP_TRANSFER_FAILED\"\n        | \"CRYPTO_SWAP_REQUIRED\"\n        | \"CRYPTO_SWAP_COMPLETED\"\n        | \"CRYPTO_SWAP_FALLBACK\"\n        | \"CRYPTO_SWAP_IN_PROGRESS\"\n        | \"CRYPTO_SWAP_FAILED\";\n      /**\n       * The wallet address to which the tokens are sent to\n       */\n      toAddress: string;\n      /**\n       * The quote object for the transaction\n       */\n      quote: {\n        estimatedOnRampAmount: string;\n        estimatedOnRampAmountWei: string;\n\n        estimatedToTokenAmount: string;\n        estimatedToTokenAmountWei: string;\n\n        fromCurrency: {\n          amount: string;\n          amountUnits: string;\n          decimals: number;\n          currencySymbol: string;\n        };\n        fromCurrencyWithFees: {\n          amount: string;\n          amountUnits: string;\n          decimals: number;\n          currencySymbol: string;\n        };\n        onRampToken: PayTokenInfo;\n        toToken: PayTokenInfo;\n        estimatedDurationSeconds?: number;\n        createdAt: string;\n      };\n      /**\n       * The on-ramp transaction details\n       *\n       * This field is only present when on-ramp transaction is completed or failed\n       */\n      source?: PayOnChainTransactionDetails;\n      /**\n       * The destination transaction details\n       *\n       * This field is only present when swap transaction is completed or failed\n       */\n      destination?: PayOnChainTransactionDetails;\n      /**\n       * Message indicating the reason for failure\n       */\n      failureMessage?: string;\n    };\n\n/**\n * Once you get a `quote` from [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote)\n * and open the `quote.onRampLink` in a new tab, you can start polling for the transaction status using `getBuyWithFiatStatus`\n *\n * You should keep calling this function at regular intervals while the status is in one of the pending states such as - \"PENDING_PAYMENT\", \"PENDING_ON_RAMP_TRANSFER\", \"ON_RAMP_TRANSFER_IN_PROGRESS\", \"CRYPTO_SWAP_IN_PROGRESS\" etc..\n *\n * If `quote.onRampToken` is same as `quote.toToken` (same chain + same token address) - This means that the token can be directly bought from the on-ramp provider.\n * But if they are different - On-ramp provider will send the `quote.onRampToken` to the user's wallet address and a swap is required to convert it to the desired token.\n * You can use the [`isSwapRequiredPostOnramp`](https://portal.thirdweb.com/references/typescript/v5/isSwapRequiredPostOnramp) utility function to check if a swap is required after the on-ramp is done.\n *\n * #### When no swap is required\n * If there is no swap required - the status will become `\"ON_RAMP_TRANSFER_COMPLETED\"` once the on-ramp provider has sent the tokens to the user's wallet address.\n * Once you receive this status, the process is complete.\n *\n * ### When a swap is required\n * If a swap is required - the status will become `\"CRYPTO_SWAP_REQUIRED\"` once the on-ramp provider has sent the tokens to the user's wallet address.\n * Once you receive this status, you need to start the swap process.\n *\n * On receiving the `\"CRYPTO_SWAP_REQUIRED\"` status, you can use the [`getPostOnRampQuote`](https://portal.thirdweb.com/references/typescript/v5/getPostOnRampQuote) function to get the quote for the swap of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote).\n *\n * Once you have this quote - You can follow the same steps as mentioned in the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) documentation to perform the swap.\n *\n * @param params - Object of type [`GetBuyWithFiatStatusParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithFiatStatusParams)\n * @example\n * ```ts\n * // step 1 - get a quote\n * const fiatQuote = await getBuyWithFiatQuote(fiatQuoteParams)\n *\n * // step 2 - open the on-ramp provider UI\n * window.open(quote.onRampLink, \"_blank\");\n *\n * // step 3 - keep calling getBuyWithFiatStatus while the status is in one of the pending states\n * const fiatStatus = await getBuyWithFiatStatus({\n *    client,\n *    intentId: fiatQuote.intentId,\n * })\n *\n * // when the fiatStatus.status is \"ON_RAMP_TRANSFER_COMPLETED\" - the process is complete\n * // when the fiatStatus.status is \"CRYPTO_SWAP_REQUIRED\" - start the swap process\n * ```\n * @buyCrypto\n */\nexport async function getBuyWithFiatStatus(\n  params: GetBuyWithFiatStatusParams,\n): Promise<BuyWithFiatStatus> {\n  try {\n    const queryParams = new URLSearchParams({\n      intentId: params.intentId,\n    });\n\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyWithFiatStatusEndpoint()}?${queryString}`;\n\n    const response = await getClientFetch(params.client)(url);\n\n    if (!response.ok) {\n      response.body?.cancel();\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return (await response.json()).result;\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { getPayBuyWithFiatHistoryEndpoint } from \"../utils/definitions.js\";\nimport type { BuyWithFiatStatus } from \"./getStatus.js\";\n\n/**\n * The parameters for [`getBuyWithFiatHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatHistory) function\n * @buyCrypto\n */\nexport type BuyWithFiatHistoryParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   */\n  client: ThirdwebClient;\n  /**\n   * The address of the wallet to get the wallet history for\n   */\n  walletAddress: string;\n  /**\n   * The number of results to return in a single page. The default value is `10`.\n   */\n  count: number;\n  /**\n   * index of the first result to return. The default value is `0`.\n   *\n   * If you want to start the list from nth item, you can set the start value to (n-1).\n   */\n  start: number;\n};\n\n/**\n * The results for [`getBuyWithFiatHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatHistory) function\n * @buyCrypto\n */\nexport type BuyWithFiatHistoryData = {\n  page: BuyWithFiatStatus[];\n  hasNextPage: boolean;\n};\n\n/**\n * Get the \"Buy with fiat\" transaction history for a given wallet address\n * @param params Object of type [`BuyWithFiatHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryParams)\n * @example\n *\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * import { getBuyWithFiatHistory } from \"thirdweb/pay\";\n *\n * const client = createThirdwebClient({ clientId: \"...\" });\n *\n * // get the 10 latest \"Buy with fiat\" transactions dony by the wallet\n * const history = await getBuyWithFiatHistory({\n *  client: client,\n *  walletAddress: '0x...',\n *  start: 0,\n *  count: 10,\n * })\n * ```\n * @returns Object of type [`BuyWithFiatHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryData)\n * @buyCrypto\n */\nexport async function getBuyWithFiatHistory(\n  params: BuyWithFiatHistoryParams,\n): Promise<BuyWithFiatHistoryData> {\n  try {\n    const queryParams = new URLSearchParams();\n    queryParams.append(\"walletAddress\", params.walletAddress);\n    queryParams.append(\"start\", params.start.toString());\n    queryParams.append(\"count\", params.count.toString());\n\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyWithFiatHistoryEndpoint()}?${queryString}`;\n\n    const response = await getClientFetch(params.client)(url);\n\n    // Assuming the response directly matches the BuyWithFiatStatus response interface\n    if (!response.ok) {\n      response.body?.cancel();\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data: BuyWithFiatHistoryData = (await response.json()).result;\n    return data;\n  } catch (error) {\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport {\n  type BuyWithCryptoQuote,\n  getBuyWithCryptoQuote,\n} from \"../buyWithCrypto/getQuote.js\";\nimport type { BuyWithFiatStatus } from \"./getStatus.js\";\n\n/**\n * The parameters for [`getPostOnRampQuote`](https://portal.thirdweb.com/references/typescript/v5/getPostOnRampQuote) function\n */\nexport type GetPostOnRampQuoteParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   */\n  client: ThirdwebClient;\n  /**\n   * The \"Buy with fiat\" transaction status object returned by [`getBuyWithFiatStatus`](https://portal.thirdweb.com/typescript/v5/getBuyWithFiatStatus) function\n   */\n  buyWithFiatStatus: BuyWithFiatStatus;\n};\n\n/**\n * When buying a token with fiat currency - It only involes doing on-ramp if the on-ramp provider supports buying the given destination token directly.\n *\n * If the on-ramp provider does not support buying the destination token directly, user can be sent an intermediate token with fiat currency from the on-ramp provider which\n * can be swapped to destination token onchain.\n *\n * `getPostOnRampQuote` function is used to get the quote for swapping the on-ramp token to destination token.\n *\n * When you get a \"Buy with Fiat\" status of type \"CRYPTO_SWAP_REQUIRED\" from the [`getBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatStatus) function,\n *  you can use `getPostOnRampQuote` function to get the quote of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) for swapping the on-ramp token to destination token\n *\n * Once you have the quote, you can start the Swap process by following the same steps as mentioned in the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) documentation.\n *\n * @param params - object of type [`GetPostOnRampQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetPostOnRampQuoteParams)\n * @returns Object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @example\n * ```ts\n * import { getPostOnRampQuote, getBuyWithFiatStatus } from \"thirdweb/pay\";\n *\n * // previous steps\n * const fiatQuote = await getBuyWithFiatQuote(fiatQuoteParams);\n * window.open(fiatQuote.onRampLink, \"_blank\");\n * const buyWithFiatStatus = await getBuyWithFiatStatus({ client, intentId }); // keep calling this until status is \"settled\" state\n *\n * // when a swap is required after onramp\n * if (buyWithFiatStatus.status === \"CRYPTO_SWAP_REQUIRED\") {\n *  const buyWithCryptoQuote = await getPostOnRampQuote({\n *    client,\n *    buyWithFiatStatus\n *  });\n * }\n * ```\n * @buyCrypto\n */\nexport async function getPostOnRampQuote({\n  client,\n  buyWithFiatStatus,\n}: GetPostOnRampQuoteParams): Promise<BuyWithCryptoQuote> {\n  if (buyWithFiatStatus.status === \"NOT_FOUND\") {\n    throw new Error(\"Invalid buyWithFiatStatus\");\n  }\n\n  return getBuyWithCryptoQuote({\n    client,\n    intentId: buyWithFiatStatus.intentId,\n    fromAddress: buyWithFiatStatus.toAddress,\n    fromChainId: buyWithFiatStatus.quote.onRampToken.chainId,\n    fromTokenAddress: buyWithFiatStatus.quote.onRampToken.tokenAddress,\n    toChainId: buyWithFiatStatus.quote.toToken.chainId,\n    toTokenAddress: buyWithFiatStatus.quote.toToken.tokenAddress,\n    toAmount: buyWithFiatStatus.quote.estimatedToTokenAmount,\n  });\n}\n", "import type { ThirdwebClient } from \"../client/client.js\";\nimport { getClientFetch } from \"../utils/fetch.js\";\nimport type { BuyWithCryptoStatus } from \"./buyWithCrypto/getStatus.js\";\nimport type { BuyWithFiatStatus } from \"./buyWithFiat/getStatus.js\";\nimport { getPayBuyHistoryEndpoint } from \"./utils/definitions.js\";\n\n/**\n * The parameters for [`getBuyHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyHistory) function\n */\nexport type BuyHistoryParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   */\n  client: ThirdwebClient;\n  /**\n   * The wallet address to get the buy history for.\n   */\n  walletAddress: string;\n  /**\n   * The number of results to return.\n   *\n   * The default value is `10`.\n   */\n  count: number;\n  /**\n   * Index of the first result to return. The default value is `0`.\n   */\n  start: number;\n};\n\n/**\n * The result for [`getBuyHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoHistory) function\n *\n * It includes both \"Buy with Crypto\" and \"Buy with Fiat\" transactions\n */\nexport type BuyHistoryData = {\n  /**\n   * The list of buy transactions.\n   */\n  page: Array<\n    | {\n        buyWithFiatStatus: BuyWithFiatStatus;\n      }\n    | {\n        buyWithCryptoStatus: BuyWithCryptoStatus;\n      }\n  >;\n  /**\n   * Whether there are more pages of results.\n   */\n  hasNextPage: boolean;\n};\n\n/**\n * Get Buy transaction history for a given wallet address.\n *\n * This includes both \"Buy with Cryto\" and \"Buy with Fiat\" transactions\n *\n * @param params Object of type [`BuyHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyHistoryParams)\n * @example\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * import { getBuyHistory } from \"thirdweb/pay\";\n *\n * const client = createThirdwebClient({ clientId: \"...\" });\n *\n * const history = await getBuyHistory({\n *  client,\n *  walletAddress: \"0x...\",\n * })\n * ```\n */\nexport async function getBuyHistory(\n  params: BuyHistoryParams,\n): Promise<BuyHistoryData> {\n  try {\n    const queryParams = new URLSearchParams();\n    queryParams.append(\"walletAddress\", params.walletAddress);\n    queryParams.append(\"start\", params.start.toString());\n    queryParams.append(\"count\", params.count.toString());\n\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyHistoryEndpoint()}?${queryString}`;\n\n    const response = await getClientFetch(params.client)(url);\n\n    // Assuming the response directly matches the SwapResponse interface\n    if (!response.ok) {\n      response.body?.cancel();\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data: BuyHistoryData = (await response.json()).result;\n    return data;\n  } catch (error) {\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n", "import { getAddress } from \"../../utils/address.js\";\nimport type { BuyWithFiatQuote } from \"./getQuote.js\";\n\n/**\n * Check if a Swap is required after on-ramp when buying a token with fiat currency.\n *\n * If `quote.toToken` and `quote.onRampToken` are the same (same token and chain),\n * it means on-ramp provider can directly send the desired token to the user's wallet and no swap is required.\n *\n * If `quote.toToken` and `quote.onRampToken` are different (different token or chain), A swap is required to swap the on-ramp token to the desired token.\n *\n * @param buyWithFiatQuote - The quote of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) returned\n * by the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function.\n * @buyCrypto\n */\nexport function isSwapRequiredPostOnramp(\n  buyWithFiatQuote: Pick<BuyWithFiatQuote, \"toToken\" | \"onRampToken\">,\n) {\n  const sameChain =\n    buyWithFiatQuote.toToken.chainId ===\n    buyWithFiatQuote.onRampToken.token.chainId;\n\n  const sameToken =\n    getAddress(buyWithFiatQuote.toToken.tokenAddress) ===\n    getAddress(buyWithFiatQuote.onRampToken.token.tokenAddress);\n\n  return !(sameChain && sameToken);\n}\n", "// bytecode\nexport { detectMethod } from \"../utils/bytecode/detectExtension.js\";\nexport { extractIPFSUri } from \"../utils/bytecode/extractIPFS.js\";\nexport { extractMinimalProxyImplementationAddress } from \"../utils/bytecode/extractMnimalProxyImplementationAddress.js\";\nexport { isContractDeployed } from \"../utils/bytecode/is-contract-deployed.js\";\nexport { ensureBytecodePrefix } from \"../utils/bytecode/prefix.js\";\nexport { resolveImplementation } from \"../utils/bytecode/resolveImplementation.js\";\n\n// units\nexport { toEther, toTokens, toUnits, toWei, fromGwei } from \"../utils/units.js\";\n\n// any-evm utils\nexport {\n  deployCreate2Factory,\n  getDeployedCreate2Factory,\n  computeCreate2FactoryAddress,\n} from \"../contract/deployment/utils/create-2-factory.js\";\nexport { computeDeploymentAddress } from \"../utils/any-evm/compute-deployment-address.js\";\nexport { getInitBytecodeWithSalt } from \"../utils/any-evm/get-init-bytecode-with-salt.js\";\nexport { getSaltHash } from \"../utils/any-evm/get-salt-hash.js\";\nexport { isEIP155Enforced } from \"../utils/any-evm/is-eip155-enforced.js\";\nexport { keccakId } from \"../utils/any-evm/keccak-id.js\";\nexport { getKeylessTransaction } from \"../utils/any-evm/keyless-transaction.js\";\n\n//signatures\nexport {\n  resolveSignature,\n  resolveSignatures,\n} from \"../utils/signatures/resolve-signature.js\";\nexport { type SignOptions, sign } from \"../utils/signatures/sign.js\";\nexport { signatureToHex } from \"../utils/signatures/signature-to-hex.js\";\nexport {\n  type SignMessageOptions,\n  signMessage,\n} from \"../utils/signatures/sign-message.js\";\nexport {\n  type SignTypedDataOptions,\n  signTypedData,\n} from \"../utils/signatures/sign-typed-data.js\";\n\n// ------------------------------------------------\n// encoding\n// ------------------------------------------------\n\n// hex\nexport {\n  boolToHex,\n  // from\n  fromHex,\n  hexToBigInt,\n  hexToBool,\n  hexToNumber,\n  hexToString,\n  hexToUint8Array,\n  // util\n  isHex,\n  numberToHex,\n  padHex,\n  stringToHex,\n  // to\n  toHex,\n  uint8ArrayToHex,\n  type BoolToHexOpts,\n  type FromHexParameters,\n  type FromHexReturnType,\n  type HexToBigIntOpts,\n  type HexToBoolOpts,\n  type HexToNumberOpts,\n  type HexToStringOpts,\n  type HexToUint8ArrayOpts,\n  type IsHexOptions,\n  type NumberToHexOpts,\n  type StringToHexOpts,\n  type ToHexParameters,\n  type Uint8ArrayToHexOpts,\n} from \"../utils/encoding/hex.js\";\nexport { concatHex } from \"../utils/encoding/helpers/concat-hex.js\";\n\n// bytes\n// to\nexport {\n  boolToBytes,\n  hexToBytes,\n  numberToBytes,\n  stringToBytes,\n  toBytes,\n  type BoolToBytesOpts,\n  type HexToBytesOpts,\n  type StringToBytesOpts,\n  type ToBytesParameters,\n} from \"../utils/encoding/to-bytes.js\";\n// from\nexport {\n  bytesToBigInt,\n  bytesToBool,\n  bytesToNumber,\n  bytesToString,\n  fromBytes,\n  type BytesToBigIntOpts,\n  type BytesToBoolOpts,\n  type BytesToNumberOpts,\n  type BytesToStringOpts,\n  type FromBytesParameters,\n  type FromBytesReturnType,\n} from \"../utils/encoding/from-bytes.js\";\n\n// ------------------------------------------------\n// hashing\n// ------------------------------------------------\n\n// keccak256\nexport { keccak256 } from \"../utils/hashing/keccak256.js\";\n\n// sha256\nexport { sha256 } from \"../utils/hashing/sha256.js\";\n\n// Ethereum Signed Message hashing\nexport { hashMessage } from \"../utils/hashing/hashMessage.js\";\n\n// ------------------------------------------------\n// address\n// ------------------------------------------------\nexport {\n  checksumAddress,\n  getAddress,\n  isAddress,\n  shortenAddress,\n  type Address,\n  type AddressInput,\n} from \"../utils/address.js\";\n\n// ------------------------------------------------\n// abi\n// ------------------------------------------------\nexport { encodeAbiParameters } from \"../utils/abi/encodeAbiParameters.js\";\nexport { encodePacked } from \"viem\";\n\n// Useful helpers\nexport { setThirdwebDomains } from \"../utils/domains.js\";\nexport { resolvePromisedValue } from \"../utils/promise/resolve-promised-value.js\";\n\n// ------------------------------------------------\n// json\n// ------------------------------------------------\nexport { stringify } from \"../utils/json.js\";\n\n// ------------------------------------------------\n// values\n// ------------------------------------------------\nexport { maxUint256 } from \"viem\";\n", "/**\n * Extracts the implementation address from a given bytecode string if it matches any of the known minimal proxy patterns.\n * @param bytecode The bytecode string to extract the implementation address from.\n * @returns The implementation address as a string if a match is found, otherwise undefined.\n * @example\n * ```ts\n * import { extractMinimalProxyImplementationAddress } from \"thirdweb/utils\";\n * const bytecode = \"0x363d3d373d3d3d363d73...\";\n * const implementationAddress = extractMinimalProxyImplementationAddress(bytecode);\n * ```\n * @utils\n */\nexport function extractMinimalProxyImplementationAddress(\n  bytecode: string,\n): string | undefined {\n  if (!bytecode.startsWith(\"0x\")) {\n    // biome-ignore lint/style/noParameterAssign: perf\n    bytecode = `0x${bytecode}`;\n  }\n  // EIP-1167 clone minimal proxy - https://eips.ethereum.org/EIPS/eip-1167\n  if (bytecode.startsWith(\"0x363d3d373d3d3d363d73\")) {\n    const implementationAddress = bytecode.slice(22, 62);\n    return `0x${implementationAddress}`;\n  }\n\n  // Minimal Proxy with receive() from 0xSplits - https://github.com/0xSplits/splits-contracts/blob/c7b741926ec9746182d0d1e2c4c2046102e5d337/contracts/libraries/Clones.sol\n  if (bytecode.startsWith(\"0x36603057343d5230\")) {\n    // +40 = size of addr\n    const implementationAddress = bytecode.slice(122, 122 + 40);\n    return `0x${implementationAddress}`;\n  }\n\n  // 0age's minimal proxy - https://medium.com/coinmonks/the-more-minimal-proxy-5756ae08ee48\n  if (bytecode.startsWith(\"0x3d3d3d3d363d3d37363d73\")) {\n    // +40 = size of addr\n    const implementationAddress = bytecode.slice(24, 24 + 40);\n    return `0x${implementationAddress}`;\n  }\n\n  // vyper's minimal proxy (uniswap v1) - https://etherscan.io/address/0x09cabec1ead1c0ba254b09efb3ee13841712be14#code\n  if (bytecode.startsWith(\"0x366000600037611000600036600073\")) {\n    const implementationAddress = bytecode.slice(32, 32 + 40);\n    return `0x${implementationAddress}`;\n  }\n\n  if (bytecode.startsWith(\"0x36600080376020600036600073\")) {\n    const implementationAddress = bytecode.slice(28, 28 + 40);\n    return `0x${implementationAddress}`;\n  }\n\n  // EIP-7511 minimal proxy with PUSH0 opcode - https://eips.ethereum.org/EIPS/eip-7511\n  if (bytecode.startsWith(\"0x365f5f375f5f365f73\")) {\n    const implementationAddress = bytecode.slice(20, 60);\n    return `0x${implementationAddress}`;\n  }\n\n  return undefined;\n}\n", "import { getBytecode } from \"../../contract/actions/get-bytecode.js\";\nimport type { ThirdwebContract } from \"../../contract/contract.js\";\n\n// we use a weak set to cache *if* a contract *is* deployed\n// aka: we add it to this set if it's deployed, and only if it is deployed\n// instead of using a map with: true only (because we only want to cache if it's deployed)\nconst cache = new WeakSet<ThirdwebContract>();\n\n/**\n * Checks if a contract is deployed by verifying its bytecode.\n * @param contract - The contract to check.\n * @returns A promise that resolves to a boolean indicating whether the contract is deployed or not.\n * @example\n * ```ts\n * import { getContract } from \"thirdweb/contract\";\n * import { isContractDeployed } from \"thirdweb/contract/utils\";\n *\n * const contract = getContract({ ... });\n * const isDeployed = await isContractDeployed(contract);\n * console.log(isDeployed);\n * ```\n * @contract\n */\nexport async function isContractDeployed(\n  contract: ThirdwebContract,\n): Promise<boolean> {\n  if (cache.has(contract)) {\n    // it's only in there if it's deployed\n    return true;\n  }\n  // this already dedupes requests for the same contract\n  const bytecode = await getBytecode(contract);\n  const isDeployed = bytecode !== \"0x\";\n  // if it's deployed, we add it to the cache\n  if (isDeployed) {\n    cache.add(contract);\n  }\n  return isDeployed;\n}\n", "import { getBytecode } from \"../../contract/actions/get-bytecode.js\";\nimport type { ThirdwebContract } from \"../../contract/contract.js\";\nimport { eth_getStorageAt } from \"../../rpc/actions/eth_getStorageAt.js\";\nimport { getRpcClient } from \"../../rpc/rpc.js\";\nimport { readContract } from \"../../transaction/read-contract.js\";\nimport { isAddress } from \"../address.js\";\nimport { extractMinimalProxyImplementationAddress } from \"./extractMnimalProxyImplementationAddress.js\";\n\n// TODO: move to const exports\nconst AddressZero = \"0x0000000000000000000000000000000000000000\";\n\n/**\n * Resolves the implementation address and bytecode for a given proxy contract.\n * @param contract The contract to resolve the implementation for.\n * @returns A promise that resolves to an object containing the implementation address and bytecode.\n * @example\n * ```ts\n * import { resolveImplementation } from \"thirdweb\";\n * const implementation = await resolveImplementation(contract);\n * ```\n * @contract\n */\nexport async function resolveImplementation(\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  contract: ThirdwebContract<any>,\n): Promise<{ address: string; bytecode: string }> {\n  const [originalBytecode, beacon] = await Promise.all([\n    getBytecode(contract),\n    getBeaconFromStorageSlot(contract),\n  ]);\n  // check minimal proxy first synchronously\n  const minimalProxyImplementationAddress =\n    extractMinimalProxyImplementationAddress(originalBytecode);\n  if (minimalProxyImplementationAddress) {\n    return {\n      address: minimalProxyImplementationAddress,\n      bytecode: await getBytecode({\n        ...contract,\n        address: minimalProxyImplementationAddress,\n      }),\n    };\n  }\n\n  // check other proxy types\n  if (beacon && beacon !== AddressZero) {\n    // In case of a BeaconProxy, it is setup as BeaconProxy --> Beacon --> Implementation\n    // Hence we replace the proxy address with Beacon address, and continue further resolving below\n    // biome-ignore lint/style/noParameterAssign: we purposefully mutate the contract object here\n    contract = { ...contract, address: beacon };\n  }\n  const implementations = await Promise.all([\n    getImplementationFromStorageSlot(contract),\n    getImplementationFromContractCall(contract),\n  ]);\n  // this seems inefficient\n  for (const implementationAddress of implementations) {\n    if (\n      implementationAddress &&\n      isAddress(implementationAddress) &&\n      implementationAddress !== AddressZero\n    ) {\n      const implementationBytecode = await getBytecode({\n        ...contract,\n        address: implementationAddress,\n      });\n      // return the original contract bytecode if the implementation bytecode is empty\n      if (implementationBytecode === \"0x\") {\n        return {\n          address: contract.address,\n          bytecode: originalBytecode,\n        };\n      }\n\n      return {\n        address: implementationAddress,\n        bytecode: implementationBytecode,\n      };\n    }\n  }\n\n  return { address: contract.address, bytecode: originalBytecode };\n}\n\nasync function getBeaconFromStorageSlot(\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  contract: ThirdwebContract<any>,\n): Promise<string | undefined> {\n  /**\n   * The storage slot of the Beacon as defined in EIP-1967\n   * See https://eips.ethereum.org/EIPS/eip-1967#beacon-contract-address\n   *\n   * bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1))\n   */\n  const rpcRequest = getRpcClient({\n    client: contract.client,\n    chain: contract.chain,\n  });\n\n  try {\n    const proxyStorage = await eth_getStorageAt(rpcRequest, {\n      address: contract.address,\n      position:\n        \"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50\",\n    });\n    return `0x${proxyStorage.slice(-40)}`;\n  } catch {\n    return undefined;\n  }\n}\n\nasync function getImplementationFromStorageSlot(\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  contract: ThirdwebContract<any>,\n): Promise<string | undefined> {\n  const rpcRequest = getRpcClient({\n    client: contract.client,\n    chain: contract.chain,\n  });\n\n  try {\n    const proxyStorage = await eth_getStorageAt(rpcRequest, {\n      address: contract.address,\n      position:\n        \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\",\n    });\n    return `0x${proxyStorage.slice(-40)}`;\n  } catch {\n    return undefined;\n  }\n}\n\nconst UPGRADEABLE_PROXY_ABI = {\n  type: \"function\",\n  name: \"implementation\",\n  inputs: [],\n  outputs: [\n    {\n      type: \"address\",\n      name: \"\",\n      internalType: \"address\",\n    },\n  ],\n  stateMutability: \"view\",\n} as const;\n\nasync function getImplementationFromContractCall(\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  contract: ThirdwebContract<any>,\n): Promise<string | undefined> {\n  try {\n    return await readContract({ contract, method: UPGRADEABLE_PROXY_ABI });\n  } catch {\n    return undefined;\n  }\n}\n", "import { getContractAddress } from \"viem\";\nimport { getGasPrice } from \"../../../gas/get-gas-price.js\";\nimport { eth_getBalance } from \"../../../rpc/actions/eth_getBalance.js\";\nimport { eth_sendRawTransaction } from \"../../../rpc/actions/eth_sendRawTransaction.js\";\nimport { getRpcClient } from \"../../../rpc/rpc.js\";\nimport { sendTransaction } from \"../../../transaction/actions/send-transaction.js\";\nimport { waitForReceipt } from \"../../../transaction/actions/wait-for-tx-receipt.js\";\nimport { prepareTransaction } from \"../../../transaction/prepare-transaction.js\";\nimport { isEIP155Enforced } from \"../../../utils/any-evm/is-eip155-enforced.js\";\nimport { getKeylessTransaction } from \"../../../utils/any-evm/keyless-transaction.js\";\nimport { isContractDeployed } from \"../../../utils/bytecode/is-contract-deployed.js\";\nimport type {\n  ClientAndChain,\n  ClientAndChainAndAccount,\n} from \"../../../utils/types.js\";\nimport { getContract } from \"../../contract.js\";\n\nconst COMMON_FACTORY_ADDRESS = \"0x4e59b44847b379578588920cA78FbF26c0B4956C\"; // for pre-eip-155 supporting chains\n\n/**\n * @internal\n */\nconst CREATE2_FACTORY_BYTECODE =\n  \"0x604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3\";\n/**\n * @internal\n */\nconst SIGNATURE = {\n  v: 27n,\n  r: \"0x2222222222222222222222222222222222222222222222222222222222222222\",\n  s: \"0x2222222222222222222222222222222222222222222222222222222222222222\",\n} as const;\n\n/**\n * Computes the address of the Create2 factory contract and checks if it is deployed.\n * @param options - The options for retrieving the Create2 factory address.\n * @returns whether the Create2 factory is deployed.\n * @internal\n */\nexport async function computeCreate2FactoryAddress(\n  options: ClientAndChain,\n): Promise<string> {\n  const chainId = options.chain.id;\n\n  // special handling for chains with hardcoded gasPrice and gasLimit\n  if (CUSTOM_GAS_FOR_CHAIN[chainId]) {\n    const enforceEip155 = await isEIP155Enforced(options);\n    const eipChain = enforceEip155 ? chainId : 0;\n    const gasPrice = CUSTOM_GAS_FOR_CHAIN[chainId.toString()]?.gasPrice;\n    const gasLimit = CUSTOM_GAS_FOR_CHAIN[chainId.toString()]?.gasLimit;\n\n    const deploymentInfo = await _getCreate2FactoryDeploymentInfo(eipChain, {\n      gasPrice,\n      gasLimit,\n    });\n\n    return deploymentInfo.predictedAddress;\n  }\n\n  // default flow\n  const allBinsInfo = await Promise.all([\n    // to generate EIP-155 transaction\n    ...CUSTOM_GAS_BINS.map((b) => {\n      return _getCreate2FactoryDeploymentInfo(chainId, { gasPrice: b });\n    }),\n\n    // to generate pre EIP-155 transaction, hence chainId 0\n    ...CUSTOM_GAS_BINS.map((b) => {\n      return _getCreate2FactoryDeploymentInfo(0, { gasPrice: b });\n    }),\n  ]);\n\n  const allFactories = await Promise.all(\n    allBinsInfo.map((b) => {\n      const tempFactory = getContract({\n        ...options,\n        address: b.predictedAddress,\n      });\n      return isContractDeployed(tempFactory);\n    }),\n  );\n\n  const indexOfCommonFactory = allBinsInfo.findIndex(\n    (b) => b.predictedAddress === COMMON_FACTORY_ADDRESS,\n  );\n  if (indexOfCommonFactory && allFactories[indexOfCommonFactory]) {\n    return COMMON_FACTORY_ADDRESS;\n  }\n\n  const indexOfExistingDeployment = allFactories.findIndex((b) => b);\n  if (\n    indexOfExistingDeployment &&\n    allBinsInfo &&\n    allBinsInfo[indexOfExistingDeployment]?.predictedAddress\n  ) {\n    // TODO: cleanup\n    return allBinsInfo[indexOfExistingDeployment]?.predictedAddress as string;\n  }\n\n  const [enforceEip155, gasPriceFetched] = await Promise.all([\n    isEIP155Enforced(options),\n    getGasPrice(options),\n  ]);\n  const eipChain = enforceEip155 ? chainId : 0;\n  const bin = _getNearestGasPriceBin(gasPriceFetched);\n\n  const deploymentInfo = await _getCreate2FactoryDeploymentInfo(eipChain, {\n    gasPrice: bin,\n  });\n\n  return deploymentInfo.predictedAddress;\n}\n\n/**\n * @internal\n */\nexport async function getDeployedCreate2Factory(options: ClientAndChain) {\n  const address = await computeCreate2FactoryAddress(options);\n  const factory = getContract({\n    ...options,\n    address,\n  });\n  const isDeployed = await isContractDeployed(factory);\n  if (!isDeployed) {\n    return null;\n  }\n  return factory;\n}\n\n/**\n * Deploys the Create2 factory contract using a keyless transaction.\n * @internal\n */\nexport async function deployCreate2Factory(options: ClientAndChainAndAccount) {\n  const { client, chain, account } = options;\n  const enforceEip155 = await isEIP155Enforced(options);\n  const chainId = options.chain.id;\n  const eipChain = enforceEip155 ? chainId : 0;\n\n  const rpcRequest = getRpcClient({\n    client: client,\n    chain,\n  });\n\n  const gasPriceFetched = await getGasPrice(options);\n  const bin = _getNearestGasPriceBin(gasPriceFetched);\n  const deploymentInfo = await _getCreate2FactoryDeploymentInfo(eipChain, {\n    gasPrice: bin,\n  });\n\n  const balance = await eth_getBalance(rpcRequest, {\n    address: deploymentInfo.signerAddress,\n  });\n  if (balance < deploymentInfo.valueToSend) {\n    const transaction = prepareTransaction({\n      chain,\n      client,\n      to: deploymentInfo.signerAddress,\n      value: deploymentInfo.valueToSend,\n    });\n    const res = await sendTransaction({ transaction, account });\n    await waitForReceipt(res);\n  }\n  const transactionHash = await eth_sendRawTransaction(\n    rpcRequest,\n    deploymentInfo.transaction,\n  );\n  return {\n    transactionHash,\n  };\n}\n\n/**\n * Retrieves the deployment information for the Create2 factory contract.\n * @param chainId - The chain ID.\n * @param gasOptions - The gas options for the deployment transaction.\n * @returns The deployment information, including the deployment transaction and the create2 factory address.\n * @internal\n */\nasync function _getCreate2FactoryDeploymentInfo(\n  chainId: number,\n  gasOptions: { gasPrice?: bigint; gasLimit?: bigint },\n) {\n  // 100000 is default deployment gas limit and 100 gwei is default gas price for create2 factory deployment\n  // (See: https://github.com/Arachnid/deterministic-deployment-proxy?tab=readme-ov-file#deployment-gas-limit)\n  const gasPrice = gasOptions.gasPrice ? gasOptions.gasPrice : 100n * 10n ** 9n;\n  const gas = gasOptions.gasLimit ? gasOptions.gasLimit : 100000n;\n  const deploymentTransaction = await getKeylessTransaction({\n    transaction: {\n      gasPrice,\n      gas,\n      nonce: 0,\n      data: CREATE2_FACTORY_BYTECODE,\n      chainId: chainId !== 0 ? Number(chainId) : undefined,\n    },\n    signature: SIGNATURE,\n  });\n  const create2FactoryAddress = getContractAddress({\n    from: deploymentTransaction.signerAddress,\n    nonce: 0n,\n  });\n\n  return {\n    ...deploymentTransaction,\n    valueToSend: gasPrice * gas,\n    predictedAddress: create2FactoryAddress,\n  };\n}\n\nfunction _getNearestGasPriceBin(gasPrice: bigint): bigint {\n  return CUSTOM_GAS_BINS.find((e) => e >= gasPrice) || gasPrice;\n}\n\n// TODO: move this somewhere else\ntype CustomChain = {\n  name: string;\n  gasPrice?: bigint;\n  gasLimit?: bigint;\n};\n\nconst CUSTOM_GAS_FOR_CHAIN: Record<string, CustomChain> = {\n  \"5001\": {\n    name: \"Mantle Testnet\",\n    gasPrice: 1n,\n  },\n  \"71402\": {\n    name: \"Godwoken Mainnet\",\n    gasPrice: 40000n * 10n ** 9n,\n  },\n  \"1351057110\": {\n    name: \"Chaos (SKALE Testnet)\",\n    gasPrice: 100000n,\n  },\n  \"361\": {\n    name: \"Theta Mainnet\",\n    gasPrice: 4000n * 10n ** 9n,\n  },\n  \"365\": {\n    name: \"Theta Testnet\",\n    gasPrice: 4000n * 10n ** 9n,\n  },\n  \"7700\": {\n    name: \"Canto\",\n    gasPrice: 1000n * 10n ** 9n,\n  },\n  \"7701\": {\n    name: \"Canto Testnet\",\n    gasPrice: 1000n * 10n ** 9n,\n  },\n  \"338\": {\n    name: \"Cronos Testnet\",\n    gasPrice: 2000n * 10n ** 9n,\n  },\n  \"199\": {\n    name: \"BitTorrent Chain\",\n    gasPrice: 300000n * 10n ** 9n,\n  },\n  \"88882\": {\n    name: \"Spicy Chain\",\n    gasPrice: 2500n * 10n ** 9n,\n    gasLimit: 200000n,\n  },\n  \"88888\": {\n    name: \"Chiliz Chain\",\n    gasPrice: 2500n * 10n ** 9n,\n    gasLimit: 200000n,\n  },\n};\n\nconst CUSTOM_GAS_BINS = [\n  1n,\n  1n * 10n ** 9n,\n  100n * 10n ** 9n,\n  500n * 10n ** 9n,\n  1000n * 10n ** 9n,\n  2500n * 10n ** 9n,\n  5000n * 10n ** 9n,\n  7500n * 10n ** 9n,\n  10_000n * 10n ** 9n,\n  25_000n * 10n ** 9n,\n  50_000n * 10n ** 9n,\n  75_000n * 10n ** 9n,\n  100_000n * 10n ** 9n,\n  250_000n * 10n ** 9n,\n  500_000n * 10n ** 9n,\n  750_000n * 10n ** 9n,\n  1_000_000n * 10n ** 9n,\n];\n", "import type { Chain } from \"../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { eth_sendRawTransaction } from \"../../rpc/actions/eth_sendRawTransaction.js\";\nimport { getRpcClient } from \"../../rpc/rpc.js\";\n\n// it's OK to cache this forever because:\n// 1. the results can't change\n// 2. the total size can be max <number of chains> * boolean\nconst EIP_ENFORCED_CACHE = new Map<number, boolean>();\n\ntype IsEIP155EnforcedOptions = {\n  chain: Chain;\n  client: ThirdwebClient;\n};\n\n/**\n * Checks whether EIP-155 is enforced by sending a random transaction of legacy type (pre-EIP-155)\n * and parsing the error message.\n * @param options - The options for checking EIP-155 enforcement.\n * @returns A promise that resolves to a boolean indicating whether EIP-155 is enforced.\n * @example\n * ```ts\n * import { isEIP155Enforced } from \"thirdweb/utils\";\n * const isEIP155 = await isEIP155Enforced({ chain, client });\n * ```\n * @utils\n */\nexport async function isEIP155Enforced(\n  options: IsEIP155EnforcedOptions,\n): Promise<boolean> {\n  const chainId = options.chain.id;\n  // cache because the result cannot change\n  if (EIP_ENFORCED_CACHE.has(chainId)) {\n    return EIP_ENFORCED_CACHE.get(chainId) as boolean;\n  }\n  let result = false;\n  try {\n    // TODO: Find a better way to check this.\n\n    // Send a random transaction of legacy type (pre-eip-155).\n    // It will fail. Parse the error message to check whether eip-155 is enforced.\n    const rpcRequest = getRpcClient(options);\n    await eth_sendRawTransaction(\n      rpcRequest,\n      \"0xf8a58085174876e800830186a08080b853604580600e600039806000f350fe7fffffffffffffffafffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222\",\n    );\n    // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n  } catch (e: any) {\n    const errorMsg = e.toString().toLowerCase();\n    const errorJson = JSON.stringify(e).toLowerCase();\n\n    if (matchError(errorMsg) || matchError(errorJson)) {\n      result = true;\n    }\n  }\n  EIP_ENFORCED_CACHE.set(chainId, result);\n  return result;\n}\n\nconst ERROR_SUBSTRINGS_COMPOSITE = [\n  [\"account\", \"not found\"],\n  [\"wrong\", \"chainid\"],\n];\nconst ERROR_SUBSTRINGS = [\n  \"eip-155\",\n  \"eip155\",\n  \"protected\",\n  \"invalid chain id for signer\",\n  \"chain id none\",\n  \"chain_id mismatch\",\n  \"recovered sender mismatch\",\n  \"transaction hash mismatch\",\n  \"chainid no support\",\n  \"chainid (0)\",\n  \"chainid(0)\",\n  \"invalid sender\",\n];\n\nfunction matchError(error: string): boolean {\n  const hasError = ERROR_SUBSTRINGS.some((substring) =>\n    error.includes(substring),\n  );\n  // can early exit if we find a match\n  if (hasError) {\n    return true;\n  }\n\n  // otherwise return true if any of the composite substrings are found\n  return ERROR_SUBSTRINGS_COMPOSITE.some((arr) => {\n    return arr.some((substring) => error.includes(substring));\n  });\n}\n", "import {\n  type Signature,\n  type TransactionSerializable,\n  recoverAddress,\n  serializeTransaction,\n  signatureToHex,\n} from \"viem\";\nimport { keccak256 } from \"../hashing/keccak256.js\";\n\ntype GetKeylessTransactionOptions = {\n  transaction: TransactionSerializable;\n  signature: Signature;\n};\n\n/**\n * Retrieves the keyless transaction information.\n *\n * @param options - The options for retrieving the keyless transaction.\n * @returns An object containing the signer address and the signed serialized transaction string.\n * @internal\n */\nexport async function getKeylessTransaction(\n  options: GetKeylessTransactionOptions,\n) {\n  // 1. Create serialized txn string\n  const hash = keccak256(serializeTransaction(options.transaction));\n\n  // 2. Determine signer address from custom signature + txn\n  const address = await recoverAddress({\n    hash,\n    signature: signatureToHex(options.signature),\n  });\n\n  // 3. Create the signed serialized txn string.\n  // To be sent directly to the chain using a provider.\n  const transaction = serializeTransaction(\n    options.transaction,\n    options.signature,\n  );\n\n  return {\n    signerAddress: address,\n    transaction,\n  };\n}\n", "import { type Hex, encodePacked } from \"viem\";\nimport { ensureBytecodePrefix } from \"../bytecode/prefix.js\";\nimport { keccak256 } from \"../hashing/keccak256.js\";\nimport { getSaltHash } from \"./get-salt-hash.js\";\nimport { keccakId } from \"./keccak-id.js\";\n\ntype ComputeDeploymentAddressOptions = {\n  bytecode: string;\n  encodedArgs: Hex;\n  create2FactoryAddress: string;\n  salt?: string;\n};\n\n/**\n * Computes the deployment address for a contract based on the given options.\n * @param options - The options for computing the deployment address.\n * @returns The computed deployment address.\n * @example\n * ```ts\n * import { computeDeploymentAddress } from \"thirdweb/utils\";\n * const deploymentAddress = computeDeploymentAddress({\n *  bytecode,\n *  encodedArgs,\n *  create2FactoryAddress,\n *  salt,\n * });\n * ```\n * @utils\n */\nexport function computeDeploymentAddress(\n  options: ComputeDeploymentAddressOptions,\n) {\n  const bytecode = ensureBytecodePrefix(options.bytecode);\n  const saltHash = options.salt\n    ? keccakId(options.salt)\n    : getSaltHash(bytecode);\n\n  // 1. create init bytecode hash with contract's bytecode and encoded args\n  const initBytecode = encodePacked(\n    [\"bytes\", \"bytes\"],\n    [bytecode, options.encodedArgs],\n  );\n\n  // 2. abi-encode pack the deployer address, salt, and bytecode hash\n  const deployInfoPacked = encodePacked(\n    [\"bytes1\", \"address\", \"bytes32\", \"bytes32\"],\n    [\n      \"0xff\",\n      options.create2FactoryAddress,\n      saltHash,\n      keccak256(encodePacked([\"bytes\"], [initBytecode])),\n    ],\n  );\n\n  // 3. hash the packed deploy info\n  const hashedDeployInfo = keccak256(\n    encodePacked([\"bytes\"], [deployInfoPacked]),\n  );\n\n  // 4. return last 20 bytes (40 characters) of the hash -- this is the predicted address\n  return `0x${hashedDeployInfo.slice(26)}`;\n}\n", "import { ensureBytecodePrefix } from \"../bytecode/prefix.js\";\nimport type { Hex } from \"../encoding/hex.js\";\n\nimport { keccakId } from \"./keccak-id.js\";\n\n/**\n * Calculates the salt hash for a given bytecode.\n * @param bytecode - The bytecode to calculate the salt hash for.\n * @returns The salt hash of the bytecode.\n * @example\n * ```ts\n * import { getSaltHash } from \"thirdweb\";\n * const saltHash = getSaltHash(bytecode);\n * ```\n * @utils\n */\nexport function getSaltHash(bytecode: string): Hex {\n  const bytecodeHash = keccakId(ensureBytecodePrefix(bytecode));\n  const salt = `tw.${bytecodeHash}`;\n  return keccakId(salt);\n}\n", "import type { Hex } from \"../encoding/hex.js\";\nimport { stringToBytes } from \"../encoding/to-bytes.js\";\nimport { keccak256 } from \"../hashing/keccak256.js\";\n\n/**\n * Calculates the keccak ID of the given input.\n * @param input - The input value to calculate the keccak ID for.\n * @returns The keccak ID as a Hex string.\n * @example\n * ```ts\n * import { keccackId } from \"thirdweb/utils\";\n * const keccakId = keccackId(input);\n * ```\n * @utils\n */\nexport function keccakId(input: string): Hex {\n  return keccak256(stringToBytes(input));\n}\n", "import { type Hex, encodePacked } from \"viem\";\nimport { ensureBytecodePrefix } from \"../bytecode/prefix.js\";\nimport { uint8ArrayToHex } from \"../encoding/hex.js\";\nimport { getSaltHash } from \"./get-salt-hash.js\";\nimport { keccakId } from \"./keccak-id.js\";\n\ntype GetInitiBytecodeWithSaltOptions = {\n  bytecode: string;\n  encodedArgs: Hex | Uint8Array;\n  salt?: string;\n};\n\n/**\n * Generates the initialization bytecode with salt for a contract deployment.\n * @param options - The options for generating the initialization bytecode.\n * @returns The initialization bytecode with salt.\n * @example\n * ```ts\n * import { getInitBytecodeWithSalt } from \"thirdweb/utils\";\n * const initBytecodeWithSalt = getInitBytecodeWithSalt({\n *  bytecode,\n *  encodedArgs,\n *  salt,\n * });\n * ```\n * @utils\n */\nexport function getInitBytecodeWithSalt(\n  options: GetInitiBytecodeWithSaltOptions,\n): Hex {\n  const bytecode = ensureBytecodePrefix(options.bytecode);\n  const saltHash = options.salt\n    ? keccakId(options.salt)\n    : getSaltHash(bytecode);\n\n  const encodedArgs =\n    typeof options.encodedArgs === \"string\"\n      ? options.encodedArgs\n      : uint8ArrayToHex(options.encodedArgs);\n\n  return encodePacked(\n    [\"bytes32\", \"bytes\", \"bytes\"],\n    [saltHash, bytecode, encodedArgs],\n  );\n}\n", "const function_cache = new Map<string, string>();\nconst event_cache = new Map<string, string>();\n\ntype FunctionString = `function ${string}`;\ntype EventString = `event ${string}`;\n\n// TODO: investigate a better source for this\nconst SIGNATURE_API = \"https://www.4byte.directory/api/v1\";\n\nasync function resolveFunctionSignature(\n  hexSig: string,\n): Promise<FunctionString | null> {\n  if (function_cache.has(hexSig)) {\n    return function_cache.get(hexSig) as FunctionString;\n  }\n  const res = await fetch(\n    `${SIGNATURE_API}/signatures/?format=json&hex_signature=${hexSig}`,\n  );\n  if (!res.ok) {\n    res.body?.cancel();\n    console.log(res.statusText);\n    return null;\n  }\n  const data = await res.json();\n  if (data.count === 0) {\n    return null;\n  }\n  const signature = `function ${data.results[0].text_signature}` as const;\n  function_cache.set(hexSig, signature);\n  return signature;\n}\n\nasync function resolveEventSignature(\n  hexSig: string,\n): Promise<EventString | null> {\n  if (event_cache.has(hexSig)) {\n    return event_cache.get(hexSig) as EventString;\n  }\n  const res = await fetch(\n    `${SIGNATURE_API}/event-signatures/?format=json&hex_signature=${hexSig}`,\n  );\n  if (!res.ok) {\n    res.body?.cancel();\n    console.log(res.statusText);\n    return null;\n  }\n  const data = await res.json();\n  if (data.count === 0) {\n    return null;\n  }\n\n  const signature = `event ${uppercaseFirstLetter(\n    data.results[0].text_signature,\n  )}` as const;\n  event_cache.set(hexSig, signature);\n  return signature;\n}\n// helper\nfunction uppercaseFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Resolves a signature by converting a hexadecimal string into a function or event signature.\n * @param hexSig The hexadecimal signature to resolve.\n * @returns A promise that resolves to an object containing the function and event signatures.\n * @example\n * ```ts\n * import { resolveSignature } from \"thirdweb/utils\";\n * const res = await resolveSignature(\"0x1f931c1c\");\n * console.log(res);\n * ```\n * @utils\n */\nexport async function resolveSignature(hexSig: string): Promise<{\n  function: FunctionString | null;\n  event: EventString | null;\n}> {\n  if (hexSig.startsWith(\"0x\")) {\n    // biome-ignore lint/style/noParameterAssign: modifying in-place for performance\n    hexSig = hexSig.slice(2);\n  }\n  const all = await Promise.all([\n    resolveFunctionSignature(hexSig),\n    resolveEventSignature(hexSig),\n  ]);\n  return {\n    function: all[0],\n    event: all[1],\n  };\n}\n\n/**\n * Resolves the signatures of the given hexadecimal signatures.\n * @param hexSigs An array of hexadecimal signatures.\n * @returns A promise that resolves to an object containing the resolved functions and events.\n * @example\n * ```ts\n * import { resolveSignatures } from \"thirdweb/utils\";\n * const res = await resolveSignatures([\"0x1f931c1c\", \"0x1f931c1c\"]);\n * console.log(res);\n * ```\n * @utils\n */\nexport async function resolveSignatures(hexSigs: string[]): Promise<{\n  functions: FunctionString[];\n  events: EventString[];\n}> {\n  // dedupe hexSigs\n  // biome-ignore lint/style/noParameterAssign: modifying in-place for performance\n  hexSigs = Array.from(new Set(hexSigs));\n  const all = await Promise.all(\n    hexSigs.map((hexSig) => resolveSignature(hexSig)),\n  );\n  return {\n    functions: all\n      .map((x) => x.function)\n      .filter((x) => x !== null)\n      .sort() as FunctionString[],\n    events: all\n      .map((x) => x.event)\n      .filter((x) => x !== null)\n      .sort() as EventString[],\n  };\n}\n\n/**\n * @internal\n */\nexport function clearCache() {\n  function_cache.clear();\n  event_cache.clear();\n}\n", "import { secp256k1 } from \"@noble/curves/secp256k1\";\nimport type { Signature } from \"viem\";\nimport { type Hex, hexToBigInt } from \"../encoding/hex.js\";\n\n/**\n * Converts a signature to a hex string.\n * @param signature The signature to convert.\n * @returns The hex string representation of the signature.\n * @example\n * ```ts\n * import { signatureToHex } from \"thirdweb/utils\";\n *\n * const hex = signatureToHex({\n * r: toHex(\n * 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * ),\n * s: toHex(\n * 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * ),\n * v: 28n,\n * });\n *\n * console.log(hex);\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n * ```\n * @utils\n */\nexport function signatureToHex(signature: Signature): Hex {\n  const { r, s, v } = signature;\n  const vHex = (() => {\n    if (v === 27n) {\n      return \"1b\";\n    }\n    if (v === 28n) {\n      return \"1c\";\n    }\n    throw new Error(\"Invalid v value\");\n  })();\n\n  return `0x${new secp256k1.Signature(\n    hexToBigInt(r),\n    hexToBigInt(s),\n  ).toCompactHex()}${vHex}`;\n}\n", "import type { Hex } from \"../encoding/hex.js\";\nimport { hashMessage } from \"../hashing/hashMessage.js\";\nimport type { Prettify } from \"../type-utils.js\";\nimport { sign } from \"./sign.js\";\nimport { signatureToHex } from \"./signature-to-hex.js\";\n\nexport type SignMessageOptions = {\n  message: Prettify<\n    | string\n    | {\n        raw: Hex | Uint8Array;\n      }\n  >;\n  privateKey: Hex;\n};\n\n/**\n * Signs a string message with a given private key.\n * @param options The options for signing.\n * @param options.message The message to be signed as a string or object containing raw hex or bytes\n * @param options.privateKey The private key to be used\n * @returns The signature as a hex string\n * @example\n * ```ts\n * import { signMessage } from \"thirdweb/utils\";\n * signMessage({\n *   message: \"Hello, world!\",\n *   privateKey: \"0x...\",\n * });\n * ```\n * @utils\n */\nexport function signMessage({ message, privateKey }: SignMessageOptions): Hex {\n  const signature = sign({ hash: hashMessage(message), privateKey });\n  return signatureToHex(signature);\n}\n", "import { type ByteArray, type SignableMessage, concat } from \"viem\";\nimport type { Hex } from \"../encoding/hex.js\";\nimport { stringToBytes, toBytes } from \"../encoding/to-bytes.js\";\nimport { keccak256 } from \"./keccak256.js\";\n\nconst presignMessagePrefix = \"\\x19Ethereum Signed Message:\\n\";\ntype To = \"hex\" | \"bytes\";\n\nexport type HashMessage<TTo extends To> =\n  | (TTo extends \"bytes\" ? ByteArray : never)\n  | (TTo extends \"hex\" ? Hex : never);\n\n/**\n * Ethereum Signed Message hashing\n * @param message - The message to hash, either as a string, a Uint8Array, or an object with a `raw` property containing a Uint8Array.\n * @param to_ - The desired output format of the hash (optional). Defaults to 'hex'.\n * @example\n * ```ts\n * import { hashMessage } from \"thirdweb/utils\";\n * const hash = hashMessage(\"hello world\");\n * ```\n * @returns The Ethereum Signed Message hash of the message in the specified format.\n * @utils\n */\nexport function hashMessage<TTo extends To = \"hex\">(\n  message: SignableMessage,\n  to_?: TTo,\n): HashMessage<TTo> {\n  const messageBytes = (() => {\n    if (typeof message === \"string\") {\n      return stringToBytes(message);\n    }\n    if (message.raw instanceof Uint8Array) {\n      return message.raw;\n    }\n    return toBytes(message.raw);\n  })();\n  const prefixBytes = stringToBytes(\n    `${presignMessagePrefix}${messageBytes.length}`,\n  );\n  return keccak256(concat([prefixBytes, messageBytes]), to_);\n}\n", "import type { TypedData } from \"abitype\";\nimport { type TypedDataDefinition, hashTypedData } from \"viem\";\nimport type { Hex } from \"../encoding/hex.js\";\nimport { parseTypedData } from \"./helpers/parseTypedData.js\";\nimport { sign } from \"./sign.js\";\nimport { signatureToHex } from \"./signature-to-hex.js\";\n\nexport type SignTypedDataOptions<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | \"EIP712Domain\" = keyof typedData,\n> = TypedDataDefinition<typedData, primaryType> & {\n  privateKey: Hex;\n};\n\n/**\n * Signs a typed data object with a given private key according to EIP712.\n * @param options The typed data is passed within options alongside the private key\n * @param options.privateKey The private key to sign the typed data with\n * @returns The signature as a hex string\n * @example\n * ```ts\n * import { signTypedData } from \"thirdweb/utils\";\n * signTypedData({\n *   privateKey: \"0x...\",\n *   ...typedData\n * });\n * ```\n * @utils\n */\nexport function signTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | \"EIP712Domain\",\n>(options: SignTypedDataOptions<typedData, primaryType>): Hex {\n  const { privateKey, ...typedData } =\n    options as unknown as SignTypedDataOptions;\n\n  const parsedTypeData = parseTypedData(typedData);\n\n  const signature = sign({\n    hash: hashTypedData(parsedTypeData), // TODO: Implement native hashTypedData\n    privateKey,\n  });\n  return signatureToHex(signature);\n}\n", "import type { TypedData } from \"abitype\";\nimport type { TypedDataDefinition } from \"viem\";\nimport { type Hex, hexToNumber, isHex } from \"../../encoding/hex.js\";\n\ntype UnknownDomain = unknown & { chainId?: unknown }; // TODO: create our own typed data types so this is cleaner\ntype HexDomain = unknown & { chainId: Hex }; // TODO: create our own typed data types so this is cleaner\n\n/**\n * @internal\n */\nexport function parseTypedData<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | \"EIP712Domain\" = keyof typedData,\n>(\n  typedData: TypedDataDefinition<typedData, primaryType>,\n): TypedDataDefinition<typedData, primaryType> {\n  const domain = typedData.domain as UnknownDomain;\n  if (domain?.chainId !== undefined && isHex(domain.chainId)) {\n    typedData.domain = {\n      ...(typedData.domain as HexDomain),\n      chainId: hexToNumber((typedData.domain as unknown as HexDomain).chainId),\n    } as unknown as TypedDataDefinition<typedData, primaryType>[\"domain\"];\n  }\n  return typedData;\n}\n", "import { d3 as createLruCache, b3 as getSignerAndProvider, aL as resolveAddress, ak as getCompositeABI, bj as AbiSchema, j as getContractTypeForRemoteName, h as PREBUILT_CONTRACTS_MAP } from './index-33cd3415.browser.esm.js';\nimport { ThirdwebStorage } from '@thirdweb-dev/storage';\nimport { Contract, utils } from 'ethers';\n\nlet STORAGE_CACHE = new ThirdwebStorage();\nconst CONTRACT_CACHE = /* @__PURE__ */createLruCache(10);\nfunction getContractCacheKey(address, chainId) {\n  return `${address}-${chainId}`;\n}\nfunction inContractCache(address, chainId) {\n  const cacheKey = getContractCacheKey(address, chainId);\n  return CONTRACT_CACHE.has(cacheKey);\n}\nfunction getCachedContract(address, chainId) {\n  if (!inContractCache(address, chainId)) {\n    throw new Error(`Contract ${address} was not found in cache`);\n  }\n  const cacheKey = getContractCacheKey(address, chainId);\n  return CONTRACT_CACHE.get(cacheKey);\n}\nfunction cacheContract(contract, address, chainId) {\n  const cacheKey = getContractCacheKey(address, chainId);\n  CONTRACT_CACHE.put(cacheKey, contract);\n}\nfunction getCachedStorage(storage) {\n  return storage || STORAGE_CACHE;\n}\n\nasync function getContractFromAbi(params) {\n  const [signer, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n  const [resolvedAddress, {\n    chainId\n  }, {\n    SmartContract\n  }] = await Promise.all([resolveAddress(params.address), provider.getNetwork(), import('./smart-contract-ac432d60.browser.esm.js')]);\n  if (inContractCache(resolvedAddress, chainId)) {\n    return getCachedContract(resolvedAddress, chainId);\n  }\n  const parsedAbi = typeof params.abi === \"string\" ? JSON.parse(params.abi) : params.abi;\n  const contract = new SmartContract(signer || provider, resolvedAddress, await getCompositeABI(resolvedAddress, AbiSchema.parse(parsedAbi), provider, params.sdkOptions, getCachedStorage(params.storage)), getCachedStorage(params.storage), params.sdkOptions, chainId);\n  cacheContract(contract, resolvedAddress, chainId);\n  return contract;\n}\n\nasync function resolveContractType(params) {\n  try {\n    const IThirdwebContractABI = (await import('@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json')).default;\n    const contract = new Contract(params.address, IThirdwebContractABI, params.provider);\n    const remoteContractType = utils.toUtf8String(await contract.contractType())\n    // eslint-disable-next-line no-control-regex\n    .replace(/\\x00/g, \"\");\n    return getContractTypeForRemoteName(remoteContractType);\n  } catch (err) {\n    return \"custom\";\n  }\n}\n\nasync function getContract(params) {\n  const [signer, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n  const [resolvedAddress, {\n    chainId\n  }, {\n    ContractPublisher\n  }] = await Promise.all([resolveAddress(params.address), provider.getNetwork(), import('./contract-publisher-01e4eba8.browser.esm.js').then(function (n) { return n.c; })]);\n  if (inContractCache(resolvedAddress, chainId)) {\n    return getCachedContract(resolvedAddress, chainId);\n  }\n  if (!params.contractTypeOrAbi || params.contractTypeOrAbi === \"custom\") {\n    const contractType = await resolveContractType({\n      address: resolvedAddress,\n      provider\n    });\n    if (contractType === \"custom\") {\n      const publisher = new ContractPublisher(params.network, params.sdkOptions, getCachedStorage(params.storage));\n      try {\n        const metadata = await publisher.fetchCompilerMetadataFromAddress(resolvedAddress);\n        return getContractFromAbi({\n          ...params,\n          address: resolvedAddress,\n          abi: metadata.abi\n        });\n      } catch {\n        throw new Error(`No ABI found for this contract. Try importing it by visiting: https://thirdweb.com/${chainId}/${resolvedAddress}`);\n      }\n    } else {\n      const abi = await PREBUILT_CONTRACTS_MAP[contractType].getAbi(resolvedAddress, provider, getCachedStorage(params.storage));\n      return getContractFromAbi({\n        ...params,\n        address: resolvedAddress,\n        abi\n      });\n    }\n  } else if (typeof params.contractTypeOrAbi === \"string\" && params.contractTypeOrAbi in PREBUILT_CONTRACTS_MAP) {\n    const contract = await PREBUILT_CONTRACTS_MAP[params.contractTypeOrAbi].initialize(signer || provider, resolvedAddress, getCachedStorage(params.storage), params.sdkOptions);\n    cacheContract(contract, resolvedAddress, chainId);\n    return contract;\n  } else {\n    return getContractFromAbi({\n      ...params,\n      address: resolvedAddress,\n      abi: params.contractTypeOrAbi\n    });\n  }\n}\n\n// weakmap because if we GC the provider somewhere else we don't need to hold onto the promise anymore\nconst CHAIN_ID_CACHE = new WeakMap();\n\n/**\n * A function that returns the chainId for a given network input + sdk options combination.\n * This function will cache the promise for the chainId so that it can be reused.\n * You can call this function multiple times with the same params and it will only make one request to the provider.\n *\n * @returns The ChainId\n * @internal\n */\nasync function getChainId(params) {\n  const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n  let chainIdPromise;\n  // if we already have a promise for the chainId, use that\n  if (CHAIN_ID_CACHE.has(provider)) {\n    chainIdPromise = CHAIN_ID_CACHE.get(provider);\n  } else {\n    chainIdPromise = provider.getNetwork()\n    // we only want the chainId\n    .then(network => network.chainId).catch(err => {\n      // in the case where the provider fails we should remove the promise from the cache so we can try again\n      CHAIN_ID_CACHE.delete(provider);\n      // also re-throw the error so downstream can handle it\n      throw err;\n    });\n    CHAIN_ID_CACHE.set(provider, chainIdPromise);\n  }\n\n  // finally await the promise (will resolve immediately if already in cache and resolved)\n  return await chainIdPromise;\n}\n\n/**\n * Get the latest block number from a given network.\n *\n * @example\n * ```javascript\n * const block = await getBlockNumber({\n *  network: \"ethereum\"\n * });\n * ```\n * @returns The latest block number\n * @public\n */\nasync function getBlockNumber(params) {\n  const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n  return provider.getBlockNumber();\n}\nconst BLOCK_PROMISE_CACHE = new Map();\n/**\n * Get a specific block from a given network.\n *\n * @example\n * ```javascript\n * const block = await getBlock({\n *  network: \"ethereum\",\n *  block: 12345678\n * });\n * ```\n *\n * @returns The block for the given block number / block tag\n * @public\n */\nasync function getBlock(params) {\n  // first off get the chainId so we can check if we have something in cache for the blockNumber already\n  // this is 1 extra call once per possible provider\n  const chainId = await getChainId(params);\n  const blockTag = params.block;\n  const cacheKey = `${chainId}_${blockTag}`;\n  let blockPromise;\n  if (BLOCK_PROMISE_CACHE.has(cacheKey)) {\n    blockPromise = BLOCK_PROMISE_CACHE.get(cacheKey);\n  } else {\n    const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n    blockPromise = provider.getBlock(blockTag).catch(err => {\n      // in the case where the call fails we should remove the promise from the cache so we can try again\n      BLOCK_PROMISE_CACHE.delete(cacheKey);\n      // also re-throw the error so downstream can handle it\n      throw err;\n    });\n    BLOCK_PROMISE_CACHE.set(cacheKey, blockPromise);\n  }\n\n  // finally await the promise (will resolve immediately if already in cache and resolved)\n  return await blockPromise;\n}\nconst BLOCK_WITH_TRANSACTIONS_PROMISE_CACHE = new Map();\n/**\n * Get a specific block (with the transactions contained in it) from a given network.\n *\n * @example\n * ```javascript\n * const block = await getBlockWithTransactions({\n *  network: \"ethereum\",\n *  block: 12345678\n * });\n * ```\n *\n * @returns The block for the given block number / block tag\n * @public\n */\nasync function getBlockWithTransactions(params) {\n  // first off get the chainId so we can check if we have something in cache for the blockNumber already\n  // this is 1 extra call once per possible provider\n  const chainId = await getChainId(params);\n  const blockTag = params.block;\n  const cacheKey = `${chainId}_${blockTag}`;\n  let blockPromise;\n  if (BLOCK_PROMISE_CACHE.has(cacheKey)) {\n    blockPromise = BLOCK_WITH_TRANSACTIONS_PROMISE_CACHE.get(cacheKey);\n  } else {\n    const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n    blockPromise = provider.getBlockWithTransactions(blockTag).catch(err => {\n      // in the case where the call fails we should remove the promise from the cache so we can try again\n      BLOCK_WITH_TRANSACTIONS_PROMISE_CACHE.delete(cacheKey);\n      // also re-throw the error so downstream can handle it\n      throw err;\n    });\n    BLOCK_WITH_TRANSACTIONS_PROMISE_CACHE.set(cacheKey, blockPromise);\n  }\n\n  // finally await the promise (will resolve immediately if already in cache and resolved)\n  return await blockPromise;\n}\n\n/**\n * Watch for a new block number on a given network.\n *\n * @example\n * ```javascript\n * // this will log out the new block number every time a new block is finalized\n * const unsubscribe = watchBlockNumber({\n *   network: \"ethereum\",\n *   onBlockNumber: (blockNumber) => {\n *     console.log(\"new block number\", blockNumber);\n *   }\n * });\n * // later on you can call unsubscribe to stop listening for new blocks\n * unsubscribe();\n * ```\n *\n * @returns An unsubscribe function that will stop listening for new blocks when called\n * @public\n */\nfunction watchBlockNumber(params) {\n  const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n  // start listening\n  provider.on(\"block\", params.onBlockNumber);\n  // return a function that unsubscribes the listener\n  return () => {\n    provider.off(\"block\", params.onBlockNumber);\n  };\n}\n/**\n * Watch for new blocks on a given network.\n *\n * @example\n * ```javascript\n * // this will log out the new block every time a new block is finalized\n * const unsubscribe = watchBlock({\n *   network: \"ethereum\",\n *   onBlock: (block) => {\n *     console.log(\"new block\", block);\n *   }\n * });\n * // later on you can call unsubscribe to stop listening for new blocks\n * unsubscribe();\n * ```\n *\n * @returns An unsubscribe function that will stop listening for new blocks when called\n * @public\n */\nfunction watchBlock(_ref) {\n  let {\n    onBlock,\n    ...sharedBlockParams\n  } = _ref;\n  async function onBlockNumber(blockNumber) {\n    try {\n      onBlock(await getBlock({\n        block: blockNumber,\n        ...sharedBlockParams\n      }));\n    } catch (err) {\n      // skip the block I guess?\n    }\n  }\n  // start listening and return the unsubscribe function from within watchBlockNumber\n  return watchBlockNumber({\n    ...sharedBlockParams,\n    onBlockNumber\n  });\n}\n/**\n * Watch for new blocks on a given network. (Includes parsed transactions)\n *\n * @example\n * ```javascript\n * // this will log out the new block every time a new block is finalized\n * const unsubscribe = watchBlockWithTransactions({\n *   network: \"ethereum\",\n *   onBlock: (block) => {\n *     console.log(\"new block\", block);\n *     console.log(\"new transactions\", block.transactions)\n *   }\n * });\n * // later on you can call unsubscribe to stop listening for new blocks\n * unsubscribe();\n * ```\n *\n * @returns An unsubscribe function that will stop listening for new blocks when called\n * @public\n */\nfunction watchBlockWithTransactions(_ref2) {\n  let {\n    onBlock,\n    ...sharedBlockParams\n  } = _ref2;\n  async function onBlockNumber(blockNumber) {\n    try {\n      onBlock(await getBlockWithTransactions({\n        block: blockNumber,\n        ...sharedBlockParams\n      }));\n    } catch (err) {\n      // skip the block I guess?\n    }\n  }\n  // start listening and return the unsubscribe function from within watchBlockNumber\n  return watchBlockNumber({\n    ...sharedBlockParams,\n    onBlockNumber\n  });\n}\n\n/**\n * Watch for transactions to or from a given address.\n *\n * @example\n * ```javascript\n * // this will log out the new transactions every time a new block is finalized\n * const unsubscribe = watchTransactions({\n *   network: \"ethereum\",\n *   address: \"0x1234\",\n *   onTransactions: (transactions) => {\n *     console.log(\"new transactions\", transactions);\n *   }\n * });\n * // later on you can call unsubscribe to stop listening for new transactions\n * unsubscribe();\n * ```\n *\n * @returns An unsubscribe function that will stop listening for new transactions when called\n * @public\n */\nfunction watchTransactions(_ref) {\n  let {\n    address,\n    onTransactions,\n    ...sharedBlockParams\n  } = _ref;\n  // compute the toLowerCase address once so we don't have to do it on every block / transaction\n  const lcAddress = address.toLowerCase();\n  function onBlock(block) {\n    const transactions = block.transactions.filter(tx => {\n      // match on from first because it's guaranteed to exist\n      if (tx.from.toLowerCase() === lcAddress) {\n        // if we have a from address match on that then return true and early exit\n        return true;\n      }\n      // if we have a to address match on that and if it doesn't match then we want to return false anyways :)\n      return tx.to?.toLowerCase() === lcAddress;\n    });\n    // only call the callback if we have transactions to report\n    if (transactions.length > 0) {\n      onTransactions(transactions);\n    }\n  }\n  return watchBlockWithTransactions({\n    ...sharedBlockParams,\n    onBlock\n  });\n}\n\nexport { getContractFromAbi as a, getChainId as b, getBlock as c, getBlockNumber as d, getBlockWithTransactions as e, watchBlockNumber as f, getContract as g, watchBlockWithTransactions as h, watchTransactions as i, watchBlock as w };\n"],
  "mappings": "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",
  "names": ["import_dist", "import_dist", "import_dist", "implementation", "ContractFactory", "THIRDWEB_DEPLOYER", "paramValues", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "sha256", "bytes", "sha256", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "utils_exports", "concatBytes", "import_dist", "bytes", "_0n", "_1n", "_2n", "Fp", "ge", "_0n", "_1n", "bitLen", "_0n", "_1n", "bytes", "_1n", "import_dist", "import_dist", "_0n", "_1n", "base", "Fp", "utils_exports", "s", "_0n", "_1n", "_2n", "_3n", "_4n", "toBytes", "concatBytes", "fromBytes", "bytes", "Point", "a", "z", "modN", "hash", "randomBytes", "sign", "verify", "r", "tv5", "c1", "c2", "import_dist", "concatBytes", "hash", "Point", "import_dist", "import_dist", "hash", "hash", "_1n", "_2n", "_3n", "_0n", "concatBytes", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "approve", "import_dist", "approve", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "lib_exports", "toUnits", "ProposalState", "getBuyWithCryptoHistory", "getBuyWithCryptoQuote", "getBuyWithCryptoStatus", "import_dist", "getContract", "ContractPublisher", "watchBlockNumber", "import_utils"]
}
