{
  "version": 3,
  "sources": ["../../@thirdweb-dev/wallets/evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js"],
  "sourcesContent": ["import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { U as UserRejectedRequestError, S as SwitchChainError } from '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-dff6dced.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nconst chainsToRequest = new Set([1, 137, 10, 42161, 56]);\nconst NAMESPACE = \"eip155\";\nconst REQUESTED_CHAINS_KEY = \"wagmi.requestedChains\";\nconst ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nconst LAST_USED_CHAIN_ID = \"last-used-chain-id\";\nclass WalletConnectConnector extends WagmiConnector {\n  constructor(config) {\n    super({\n      ...config,\n      options: {\n        isNewChainsStale: true,\n        ...config.options\n      }\n    });\n    _defineProperty(this, \"id\", walletIds.walletConnect);\n    _defineProperty(this, \"name\", \"WalletConnect\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        if (accounts[0]) {\n          this.emit(\"change\", {\n            account: utils.getAddress(accounts[0])\n          });\n        }\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", async chainId => {\n      const id = Number(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      await this._storage.setItem(LAST_USED_CHAIN_ID, String(chainId));\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      await this._setRequestedChainsIds([]);\n      await this._storage.removeItem(LAST_USED_CHAIN_ID);\n      this.emit(\"disconnect\");\n    });\n    _defineProperty(this, \"onDisplayUri\", uri => {\n      this.emit(\"message\", {\n        type: \"display_uri\",\n        data: uri\n      });\n    });\n    _defineProperty(this, \"onConnect\", () => {\n      this.emit(\"connect\", {\n        provider: this._provider\n      });\n    });\n    this._storage = config.options.storage;\n    this._createProvider();\n    this.filteredChains = this.chains.length > 50 ? this.chains.filter(c => {\n      return chainsToRequest.has(c.chainId);\n    }) : this.chains;\n    this.showWalletConnectModal = this.options.qrcode !== false;\n  }\n  async connect() {\n    let {\n      chainId: chainIdP,\n      pairingTopic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      let targetChainId = chainIdP;\n      if (!targetChainId) {\n        const lastUsedChainIdStr = await this._storage.getItem(LAST_USED_CHAIN_ID);\n        const lastUsedChainId = lastUsedChainIdStr ? parseInt(lastUsedChainIdStr) : undefined;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) {\n          targetChainId = lastUsedChainId;\n        } else {\n          targetChainId = this.filteredChains[0]?.chainId;\n        }\n      }\n      if (!targetChainId) {\n        throw new Error(\"No chains found on connector.\");\n      }\n      const provider = await this.getProvider();\n      this.setupListeners();\n      if (provider.session) {\n        await provider.disconnect();\n        const optionalChains = this.filteredChains.filter(chain => chain.chainId !== targetChainId).map(optionalChain => optionalChain.chainId);\n        this.emit(\"message\", {\n          type: \"connecting\"\n        });\n        await provider.connect({\n          pairingTopic,\n          chains: [targetChainId],\n          optionalChains: optionalChains.length > 0 ? optionalChains : [targetChainId]\n        });\n        await this._setRequestedChainsIds(this.filteredChains.map(_ref => {\n          let {\n            chainId\n          } = _ref;\n          return chainId;\n        }));\n      }\n\n      // If session exists and chains are authorized, enable provider for required chain\n      const accounts = await provider.enable();\n      if (!accounts[0]) {\n        throw new Error(\"No accounts found on provider.\");\n      }\n      const account = utils.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider: new providers.Web3Provider(provider)\n      };\n    } catch (error) {\n      if (/user rejected/i.test(error?.message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const cleanup = () => {\n      if (typeof localStorage === \"undefined\") {\n        return;\n      }\n      for (const key in localStorage) {\n        if (key.startsWith(\"wc@2\")) {\n          localStorage.removeItem(key);\n        }\n      }\n    };\n    cleanup();\n    const provider = await this.getProvider();\n    const disconnectProvider = async () => {\n      try {\n        await provider.disconnect();\n      } catch (error) {\n        if (!/No matching key/i.test(error.message)) {\n          throw error;\n        }\n      } finally {\n        this._removeListeners();\n        await this._setRequestedChainsIds([]);\n        cleanup();\n      }\n    };\n    disconnectProvider();\n  }\n  async getAccount() {\n    const {\n      accounts\n    } = await this.getProvider();\n    if (!accounts[0]) {\n      throw new Error(\"No accounts found on provider.\");\n    }\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const {\n      chainId\n    } = await this.getProvider();\n    return chainId;\n  }\n  async getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this._provider) {\n      await this._createProvider();\n    }\n    if (chainId) {\n      await this.switchChain(chainId);\n    }\n    if (!this._provider) {\n      throw new Error(\"No provider found.\");\n    }\n    return this._provider;\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider({\n      chainId\n    }), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const [account, provider] = await Promise.all([this.getAccount(), this.getProvider()]);\n      const isChainsStale = await this._isChainsStale();\n\n      // If an account does not exist on the session, then the connector is unauthorized.\n      if (!account) {\n        return false;\n      }\n\n      // If the chains are stale on the session, then the connector is unauthorized.\n      if (isChainsStale && provider.session) {\n        try {\n          await provider.disconnect();\n        } catch {} // eslint-disable-line no-empty\n        return false;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const chain = this.chains.find(chain_ => chain_.chainId === chainId);\n    if (!chain) {\n      throw new SwitchChainError(`Chain with ID: ${chainId}, not found on connector.`);\n    }\n    try {\n      const provider = await this.getProvider();\n      const namespaceChains = this._getNamespaceChainsIds();\n      const namespaceMethods = this._getNamespaceMethods();\n      const isChainApproved = namespaceChains.includes(chainId);\n      if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n        const firstExplorer = chain.explorers && chain.explorers[0];\n        const blockExplorerUrls = firstExplorer ? {\n          blockExplorerUrls: [firstExplorer.url]\n        } : {};\n        await provider.request({\n          method: ADD_ETH_CHAIN_METHOD,\n          params: [{\n            chainId: utils.hexValue(chain.chainId),\n            chainName: chain.name,\n            nativeCurrency: chain.nativeCurrency,\n            rpcUrls: getValidPublicRPCUrl(chain),\n            // no clientId on purpose\n            ...blockExplorerUrls\n          }]\n        });\n        const requestedChains = await this._getRequestedChainsIds();\n        requestedChains.push(chainId);\n        await this._setRequestedChainsIds(requestedChains);\n      }\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: utils.hexValue(chainId)\n        }]\n      });\n      return chain;\n    } catch (error) {\n      const message = typeof error === \"string\" ? error : error?.message;\n      if (/user rejected request/i.test(message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async _createProvider() {\n    if (!this._initProviderPromise && \"object\" !== \"undefined\") {\n      this._initProviderPromise = this.initProvider();\n    }\n    return this._initProviderPromise;\n  }\n  async initProvider() {\n    const {\n      default: EthereumProvider,\n      OPTIONAL_EVENTS,\n      OPTIONAL_METHODS\n    } = await import('@walletconnect/ethereum-provider');\n    const [defaultChain, ...optionalChains] = this.filteredChains.map(_ref2 => {\n      let {\n        chainId\n      } = _ref2;\n      return chainId;\n    });\n    if (defaultChain) {\n      // EthereumProvider populates & deduplicates required methods and events internally\n      this._provider = await EthereumProvider.init({\n        showQrModal: this.showWalletConnectModal,\n        projectId: this.options.projectId,\n        methods: [\"eth_sendTransaction\", \"personal_sign\", \"eth_signTypedData_v4\"],\n        optionalMethods: OPTIONAL_METHODS,\n        optionalEvents: OPTIONAL_EVENTS,\n        chains: [defaultChain],\n        optionalChains: optionalChains,\n        metadata: {\n          name: this.options.dappMetadata.name,\n          description: this.options.dappMetadata.description || \"\",\n          url: this.options.dappMetadata.url,\n          icons: [this.options.dappMetadata.logoUrl || \"\"]\n        },\n        rpcMap: Object.fromEntries(this.filteredChains.map(chain => [chain.chainId, chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n        ])),\n        qrModalOptions: this.options.qrModalOptions\n      });\n    }\n  }\n\n  /**\n   * Checks if the target chains match the chains that were\n   * initially requested by the connector for the WalletConnect session.\n   * If there is a mismatch, this means that the chains on the connector\n   * are considered stale, and need to be revalidated at a later point (via\n   * connection).\n   *\n   * There may be a scenario where a dapp adds a chain to the\n   * connector later on, however, this chain will not have been approved or rejected\n   * by the wallet. In this case, the chain is considered stale.\n   *\n   * There are exceptions however:\n   * -  If the wallet supports dynamic chain addition via `eth_addEthereumChain`,\n   *    then the chain is not considered stale.\n   * -  If the `isNewChainsStale` flag is falsy on the connector, then the chain is\n   *    not considered stale.\n   *\n   * For the above cases, chain validation occurs dynamically when the user\n   * attempts to switch chain.\n   *\n   * Also check that dapp supports at least 1 chain from previously approved session.\n   */\n  async _isChainsStale() {\n    const namespaceMethods = this._getNamespaceMethods();\n    if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n      return false;\n    }\n    if (!this.options.isNewChainsStale) {\n      return false;\n    }\n    const requestedChains = await this._getRequestedChainsIds();\n    const connectorChains = this.filteredChains.map(_ref3 => {\n      let {\n        chainId\n      } = _ref3;\n      return chainId;\n    });\n    const namespaceChains = this._getNamespaceChainsIds();\n    if (namespaceChains.length && !namespaceChains.some(id => connectorChains.includes(id))) {\n      return false;\n    }\n    return !connectorChains.every(id => requestedChains.includes(id));\n  }\n  async setupListeners() {\n    if (!this._provider) {\n      return;\n    }\n    this._removeListeners();\n    this._provider.on(\"accountsChanged\", this.onAccountsChanged);\n    this._provider.on(\"chainChanged\", this.onChainChanged);\n    this._provider.on(\"disconnect\", this.onDisconnect);\n    this._provider.on(\"session_delete\", this.onDisconnect);\n    this._provider.on(\"display_uri\", this.onDisplayUri);\n    this._provider.on(\"connect\", this.onConnect);\n  }\n  _removeListeners() {\n    if (!this._provider) {\n      return;\n    }\n    this._provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    this._provider.removeListener(\"chainChanged\", this.onChainChanged);\n    this._provider.removeListener(\"disconnect\", this.onDisconnect);\n    this._provider.removeListener(\"session_delete\", this.onDisconnect);\n    this._provider.removeListener(\"display_uri\", this.onDisplayUri);\n    this._provider.removeListener(\"connect\", this.onConnect);\n  }\n  async _setRequestedChainsIds(chains) {\n    await this._storage.setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));\n  }\n  async _getRequestedChainsIds() {\n    const data = await this._storage.getItem(REQUESTED_CHAINS_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n  _getNamespaceChainsIds() {\n    if (!this._provider) {\n      return [];\n    }\n    const chainIds = this._provider.session?.namespaces[NAMESPACE]?.chains?.map(chain => parseInt(chain.split(\":\")[1] || \"\"));\n    return chainIds ?? [];\n  }\n  _getNamespaceMethods() {\n    if (!this._provider) {\n      return [];\n    }\n    const methods = this._provider.session?.namespaces[NAMESPACE]?.methods;\n    return methods ?? [];\n  }\n}\n\nexport { WalletConnectConnector };\n"],
  "mappings": "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",
  "names": ["import_dist"]
}
