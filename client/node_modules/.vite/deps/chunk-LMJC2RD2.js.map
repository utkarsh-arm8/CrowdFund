{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/domains.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/fetch.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/version.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/caching/lru.ts"],
  "sourcesContent": ["type DomainOverrides = {\n  /**\n   * The base URL for the RPC server.\n   * @default \"rpc.thirdweb.com\"\n   */\n  rpc?: string;\n  /**\n   * The base URL for the in-app wallet service\n   * @default \"embedded-wallet.thirdweb.com\"\n   */\n  inAppWallet?: string;\n  /**\n   * The base URL for the payment server.\n   * @default \"interstate.thirdweb.com\"\n   */\n  pay?: string;\n  /**\n   * The base URL for the storage server.\n   * @default \"storage.thirdweb.com\"\n   */\n  storage?: string;\n  /**\n   * The base URL for the bundler server.\n   * @default \"bundler.thirdweb.com\"\n   */\n  bundler?: string;\n};\n\nexport const DEFAULT_RPC_URL = \"rpc.thirdweb.com\";\nconst DEFAULT_IN_APP_WALLET_URL = \"embedded-wallet.thirdweb.com\";\nconst DEFAULT_PAY_URL = \"pay.thirdweb.com\";\nconst DEFAULT_STORAGE_URL = \"storage.thirdweb.com\";\nconst DEFAULT_BUNDLER_URL = \"bundler.thirdweb.com\";\n\nlet domains: { [k in keyof DomainOverrides]-?: string } = {\n  rpc: DEFAULT_RPC_URL,\n  inAppWallet: DEFAULT_IN_APP_WALLET_URL,\n  pay: DEFAULT_PAY_URL,\n  storage: DEFAULT_STORAGE_URL,\n  bundler: DEFAULT_BUNDLER_URL,\n};\n\n/**\n * @internal\n */\nexport const setThirdwebDomains = (DomainOverrides: DomainOverrides) => {\n  domains = {\n    rpc: DomainOverrides.rpc ?? DEFAULT_RPC_URL,\n    inAppWallet: DomainOverrides.inAppWallet ?? DEFAULT_IN_APP_WALLET_URL,\n    pay: DomainOverrides.pay ?? DEFAULT_PAY_URL,\n    storage: DomainOverrides.storage ?? DEFAULT_STORAGE_URL,\n    bundler: DomainOverrides.bundler ?? DEFAULT_BUNDLER_URL,\n  };\n};\n\n/**\n * @internal\n */\nexport const getThirdwebDomains = () => {\n  return domains;\n};\n\n/**\n * @internal\n */\nexport const getThirdwebBaseUrl = (service: keyof DomainOverrides) => {\n  const origin = domains[service];\n  if (origin.startsWith(\"localhost\")) {\n    return `http://${origin}`;\n  }\n  return `https://${origin}`;\n};\n", "import type { ThirdwebClient } from \"../client/client.js\";\nimport { version } from \"../version.js\";\nimport { LruMap } from \"./caching/lru.js\";\nimport {\n  type OperatingSystem,\n  detectOS,\n  detectPlatform,\n} from \"./detect-platform.js\";\n\nconst DEFAULT_REQUEST_TIMEOUT = 60000;\n\nconst FETCH_CACHE = new WeakMap<\n  ThirdwebClient,\n  (url: string, init?: RequestInit) => Promise<Response>\n>();\n\n/**\n * @internal\n */\nexport function getClientFetch(client: ThirdwebClient) {\n  if (FETCH_CACHE.has(client)) {\n    // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set\n    return FETCH_CACHE.get(client)!;\n  }\n\n  /**\n   * @internal\n   */\n  async function fetchWithHeaders(\n    url: string,\n    init?: Omit<RequestInit, \"signal\"> & { requestTimeoutMs?: number },\n  ): Promise<Response> {\n    const { requestTimeoutMs = DEFAULT_REQUEST_TIMEOUT, ...restInit } =\n      init || {};\n\n    let headers = restInit.headers ? new Headers(restInit.headers) : undefined;\n\n    // check if we are making a request to a thirdweb service (we don't want to send any headers to non-thirdweb services)\n    if (isThirdwebUrl(url)) {\n      if (!headers) {\n        headers = new Headers();\n      }\n      const authToken = getTWAuthToken();\n      // if we have an auth token set, use that (thirdweb.com/dashboard sets this for the user)\n      if (authToken) {\n        headers.set(\"authorization\", `Bearer ${authToken}`);\n      } else if (client.secretKey) {\n        headers.set(\"x-secret-key\", client.secretKey);\n      } else if (client.clientId) {\n        headers.set(\"x-client-id\", client.clientId);\n      }\n      // this already internally caches\n      for (const [key, value] of getPlatformHeaders()) {\n        (headers as Headers).set(key, value);\n      }\n    }\n\n    let controller: AbortController | undefined;\n    let abortTimeout: ReturnType<typeof setTimeout> | undefined;\n    if (requestTimeoutMs) {\n      controller = new AbortController();\n      abortTimeout = setTimeout(() => {\n        controller?.abort();\n      }, requestTimeoutMs);\n    }\n\n    return fetch(url, {\n      ...restInit,\n      headers,\n      signal: controller?.signal,\n    }).finally(() => {\n      if (abortTimeout) {\n        clearTimeout(abortTimeout);\n      }\n    });\n  }\n  FETCH_CACHE.set(client, fetchWithHeaders);\n  return fetchWithHeaders;\n}\n\n// NOTE: these all start with \".\" because we want to make sure we don't match (for example) \"otherthirdweb.com\"\nconst THIRDWEB_DOMAINS = [\n  \".thirdweb.com\",\n  \".ipfscdn.io\",\n  // dev domains\n  \".thirdweb.dev\",\n  \".thirdweb-dev.com\",\n] as const;\n\nconst IS_THIRDWEB_URL_CACHE = new LruMap<boolean>(4096);\n\n/**\n * @internal\n */\nexport function isThirdwebUrl(url: string): boolean {\n  if (IS_THIRDWEB_URL_CACHE.has(url)) {\n    // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set\n    return IS_THIRDWEB_URL_CACHE.get(url)!;\n  }\n  try {\n    const { hostname } = new URL(url);\n\n    try {\n      // special case for localhost in development only\n      if (process.env.NODE_ENV === \"development\") {\n        if (hostname === \"localhost\") {\n          IS_THIRDWEB_URL_CACHE.set(url, true);\n          return true;\n        }\n      }\n    } catch {}\n\n    const is = THIRDWEB_DOMAINS.some((domain) => hostname.endsWith(domain));\n    IS_THIRDWEB_URL_CACHE.set(url, is);\n    return is;\n  } catch {\n    IS_THIRDWEB_URL_CACHE.set(url, false);\n    return false;\n  }\n}\n\nconst SDK_NAME = \"unified-sdk\";\n\nlet previousPlatform: [string, string][] | undefined;\n/**\n * @internal\n */\nexport function getPlatformHeaders() {\n  if (previousPlatform) {\n    return previousPlatform;\n  }\n\n  let os: OperatingSystem | null = null;\n  if (typeof navigator !== \"undefined\") {\n    os = detectOS(navigator.userAgent);\n  }\n\n  let bundleId: string | undefined = undefined;\n  if (typeof globalThis !== \"undefined\" && \"Application\" in globalThis) {\n    // shims use wallet connect RN module which injects Application info in globalThis\n    // biome-ignore lint/suspicious/noExplicitAny: get around globalThis typing\n    bundleId = (globalThis as any).Application.applicationId;\n  }\n\n  previousPlatform = Object.entries({\n    \"x-sdk-platform\": detectPlatform(),\n    \"x-sdk-version\": version,\n    \"x-sdk-os\": os ? parseOs(os) : \"unknown\",\n    \"x-sdk-name\": SDK_NAME,\n    ...(bundleId ? { \"x-bundle-id\": bundleId } : {}),\n  });\n\n  return previousPlatform;\n}\n\n/**\n * @internal\n */\nfunction parseOs(os: OperatingSystem | NodeJS.Platform) {\n  const osLowerCased = os.toLowerCase();\n  if (osLowerCased.startsWith(\"win\")) {\n    return \"win\";\n  }\n  // we do NOT use the lowercase here\n  switch (os) {\n    case \"Mac OS\":\n      return \"mac\";\n    case \"iOS\":\n      return \"ios\";\n    case \"Android OS\":\n      return \"android\";\n    default:\n      // if we somehow fall through here, just replace all spaces with underscores and send it\n      return osLowerCased.replace(/\\s/gi, \"_\");\n  }\n}\n\nfunction getTWAuthToken(): string | null {\n  if (\n    typeof globalThis !== \"undefined\" &&\n    \"TW_AUTH_TOKEN\" in globalThis &&\n    // biome-ignore lint/suspicious/noExplicitAny: get around globalThis typing\n    typeof (globalThis as any).TW_AUTH_TOKEN === \"string\"\n  ) {\n    // biome-ignore lint/suspicious/noExplicitAny: get around globalThis typing\n    return (globalThis as any).TW_AUTH_TOKEN as string;\n  }\n  return null;\n}\n", "export const version = \"5.29.6\";\n", "/**\n * Represents a Least Recently Used (LRU) Map.\n * Extends the built-in Map class.\n */\nexport class LruMap<value = unknown> extends Map<string, value> {\n  maxSize: number;\n\n  /**\n   *\n   * @param size\n   * @internal\n   */\n  constructor(size: number) {\n    super();\n    this.maxSize = size;\n  }\n\n  /**\n   *\n   * @param key\n   * @param value\n   * @internal\n   */\n  override set(key: string, value: value) {\n    super.set(key, value);\n    if (this.maxSize && this.size > this.maxSize) {\n      this.delete(this.keys().next().value);\n    }\n    return this;\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_dist", "import_dist", "import_dist", "import_dist"]
}
