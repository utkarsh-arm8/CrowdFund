{
  "version": 3,
  "sources": ["../../@thirdweb-dev/wallets/dist/http-rpc-client-0a079e80.browser.esm.js"],
  "sourcesContent": ["import { utils, BigNumber, providers } from 'ethers';\nimport { i as isTwUrl } from './url-a45219bd.browser.esm.js';\nimport { s as setAnalyticsHeaders } from './headers-733a8199.browser.esm.js';\nimport { e as isZkSyncChain, M as MANAGED_ACCOUNT_GAS_BUFFER } from './utils-f58e7acc.browser.esm.js';\n\nasync function hexlifyUserOp(\n// TODO: types\nop) {\n  const userOp = await utils.resolveProperties(op);\n  return Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {});\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return BigNumber.from(utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\nconst DEBUG = false; // TODO set as public flag\n\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    this.userOpJsonRpcProvider = new providers.StaticJsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    if (await isZkSyncChain(this.chainId)) {\n      return;\n    }\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - The UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    const data = await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n    // adds gas buffer to callGasLimit to account for ManagedAccountFactory delegate calls\n    return {\n      preVerificationGas: BigNumber.from(data.preVerificationGas),\n      verificationGas: BigNumber.from(data.verificationGas),\n      verificationGasLimit: BigNumber.from(data.verificationGasLimit),\n      callGasLimit: BigNumber.from(data.callGasLimit).add(MANAGED_ACCOUNT_GAS_BUFFER)\n    };\n  }\n  async getUserOperationGasPrice() {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"thirdweb_getUserOperationGasPrice\", []);\n  }\n  async getUserOperationReceipt(userOpHash) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"eth_getUserOperationReceipt\", [userOpHash]);\n  }\n  async zkPaymasterData(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_paymasterData\", [await hexlifyUserOp({\n      ...transactionInput,\n      gas: transactionInput.gasLimit\n    })]);\n  }\n  async zkBroadcastTransaction(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_broadcastTransaction\", [transactionInput]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\nexport { DEBUG as D, HttpRpcClient as H, getUserOpHashV06 as g, hexlifyUserOp as h, randomNonce as r };\n"],
  "mappings": "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",
  "names": ["import_dist"]
}
