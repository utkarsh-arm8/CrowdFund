{
  "version": 3,
  "sources": ["../../@thirdweb-dev/wallets/dist/zk-connector-fada2157.browser.esm.js"],
  "sourcesContent": ["import { _ as _defineProperty } from './defineProperty-350fc508.browser.esm.js';\nimport { C as Connector } from './connector-05689d68.browser.esm.js';\nimport { H as HttpRpcClient } from './http-rpc-client-0a079e80.browser.esm.js';\nimport { e as isZkSyncChain, f as ENTRYPOINT_ADDRESS } from './utils-f58e7acc.browser.esm.js';\nimport { Signer, ethers, utils, BigNumber } from 'ethers';\nimport { defineReadOnly } from 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './url-a45219bd.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport './headers-733a8199.browser.esm.js';\nimport '../evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport '@thirdweb-dev/sdk';\nimport '@account-abstraction/contracts';\n\nconst DEFAULT_GAS_PER_PUBDATA_LIMIT = 50000;\nconst EIP712_TX_TYPE = 0x71;\nconst EIP712_TYPES = {\n  Transaction: [{\n    name: \"txType\",\n    type: \"uint256\"\n  }, {\n    name: \"from\",\n    type: \"uint256\"\n  }, {\n    name: \"to\",\n    type: \"uint256\"\n  }, {\n    name: \"gasLimit\",\n    type: \"uint256\"\n  }, {\n    name: \"gasPerPubdataByteLimit\",\n    type: \"uint256\"\n  }, {\n    name: \"maxFeePerGas\",\n    type: \"uint256\"\n  }, {\n    name: \"maxPriorityFeePerGas\",\n    type: \"uint256\"\n  }, {\n    name: \"paymaster\",\n    type: \"uint256\"\n  }, {\n    name: \"nonce\",\n    type: \"uint256\"\n  }, {\n    name: \"value\",\n    type: \"uint256\"\n  }, {\n    name: \"data\",\n    type: \"bytes\"\n  }, {\n    name: \"factoryDeps\",\n    type: \"bytes32[]\"\n  }, {\n    name: \"paymasterInput\",\n    type: \"bytes\"\n  }]\n};\nclass ZkWrappedSigner extends Signer {\n  constructor(signer, httpRpcClient) {\n    super();\n    this.signer = signer;\n    defineReadOnly(this, \"provider\", signer.provider);\n    this.httpRpcClient = httpRpcClient;\n  }\n  async getAddress() {\n    return await this.signer.getAddress();\n  }\n  async signMessage(message) {\n    return await this.signer.signMessage(message);\n  }\n  async signTransaction(transaction) {\n    return await this.signer.signTransaction(transaction);\n  }\n  connect(provider) {\n    return new ZkWrappedSigner(this.signer.connect(provider), this.httpRpcClient);\n  }\n  _signTypedData(domain, types, value) {\n    return this.signer._signTypedData(domain, types, value);\n  }\n  async sendTransaction(transaction) {\n    return await this.sendZkSyncTransaction(transaction);\n  }\n  async sendZkSyncTransaction(_transaction) {\n    let transaction = await this.populateTransaction(_transaction);\n    if (!transaction.chainId) {\n      throw new Error(\"ChainId is required to send a ZkSync transaction\");\n    }\n    if (!this.provider) {\n      throw new Error(\"Provider is required to send a ZkSync transaction\");\n    }\n    const address = await this.getAddress();\n    const gasLimit = ethers.BigNumber.from(transaction.gasLimit || (await this.provider.estimateGas(transaction))).mul(3);\n    const gasPrice = ethers.BigNumber.from(transaction.gasPrice || (await this.provider.getGasPrice())).mul(2);\n    if (!transaction.maxFeePerGas) {\n      transaction.maxFeePerGas = gasPrice;\n    } else {\n      transaction.maxFeePerGas = transaction.maxFeePerGas.mul(2);\n    }\n    if (!transaction.maxPriorityFeePerGas) {\n      transaction.maxPriorityFeePerGas = gasPrice;\n    } else {\n      transaction.maxPriorityFeePerGas = transaction.maxPriorityFeePerGas.mul(2);\n    }\n    transaction = {\n      ...transaction,\n      from: address,\n      gasLimit,\n      gasPrice,\n      chainId: (await this.provider.getNetwork()).chainId,\n      nonce: await this.provider.getTransactionCount(address),\n      type: 113,\n      value: BigInt(0)\n    };\n    const pmDataResult = await this.httpRpcClient?.zkPaymasterData(transaction);\n    transaction.customData = {\n      gasPerPubdata: DEFAULT_GAS_PER_PUBDATA_LIMIT,\n      factoryDeps: [],\n      paymasterParams: {\n        paymaster: pmDataResult.paymaster,\n        paymasterInput: pmDataResult.paymasterInput\n      }\n    };\n    const eip712tx = {\n      txType: EIP712_TX_TYPE,\n      from: BigInt(transaction.from || (await this.getAddress())).toString(),\n      to: BigInt(transaction.to || \"0x0\").toString(),\n      gasLimit: transaction.gasLimit ? Number(transaction.gasLimit) : 0,\n      gasPerPubdataByteLimit: DEFAULT_GAS_PER_PUBDATA_LIMIT,\n      maxFeePerGas: ethers.BigNumber.from(transaction.maxFeePerGas).toNumber(),\n      maxPriorityFeePerGas: ethers.BigNumber.from(transaction.maxPriorityFeePerGas).toNumber(),\n      paymaster: BigInt(pmDataResult.paymaster).toString(),\n      nonce: ethers.BigNumber.from(transaction.nonce).toNumber(),\n      value: ethers.BigNumber.from(transaction.value).toNumber(),\n      data: transaction.data || \"0x\",\n      factoryDeps: [],\n      paymasterInput: ethers.utils.arrayify(pmDataResult.paymasterInput)\n    };\n    const signature = await this._signTypedData({\n      name: \"zkSync\",\n      version: \"2\",\n      chainId: transaction.chainId\n    }, EIP712_TYPES, eip712tx);\n    const serializedTx = this.serialize(transaction, signature);\n    const zkSignedTx = {\n      from: transaction.from?.toString() || (await this.getAddress()),\n      to: transaction.to?.toString() || \"\",\n      gas: transaction.gasLimit?.toString() || \"\",\n      maxFeePerGas: transaction.maxFeePerGas?.toString() || \"0\",\n      maxPriorityFeePerGas: transaction.maxPriorityFeePerGas?.toString() || \"0\",\n      signedTransaction: serializedTx,\n      paymaster: pmDataResult.paymaster\n    };\n    const broadcastResult = await this.httpRpcClient?.zkBroadcastTransaction(zkSignedTx);\n    const hash = broadcastResult.transactionHash;\n    return await this.provider?.getTransaction(hash);\n  }\n  serialize(transaction, signature) {\n    if (!transaction.customData && transaction.type !== EIP712_TX_TYPE) {\n      return utils.serializeTransaction(transaction, signature);\n    }\n    if (!transaction.chainId) {\n      throw Error(\"Transaction chainId isn't set!\");\n    }\n    function formatNumber(value, name) {\n      const result = utils.stripZeros(BigNumber.from(value).toHexString());\n      if (result.length > 32) {\n        throw new Error(`Invalid length for ${name}!`);\n      }\n      return result;\n    }\n    if (!transaction.from) {\n      throw new Error(\"Explicitly providing `from` field is required for EIP712 transactions!\");\n    }\n    const from = transaction.from;\n    const meta = transaction.customData ?? {};\n    const maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice || 0;\n    const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;\n    const fields = [formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(maxPriorityFeePerGas, \"maxPriorityFeePerGas\"), formatNumber(maxFeePerGas, \"maxFeePerGas\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to ? utils.getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\"];\n    if (signature) {\n      const sig = utils.splitSignature(signature);\n      fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n      fields.push(utils.stripZeros(sig.r));\n      fields.push(utils.stripZeros(sig.s));\n    } else {\n      fields.push(formatNumber(transaction.chainId, \"chainId\"));\n      fields.push(\"0x\");\n      fields.push(\"0x\");\n    }\n    fields.push(formatNumber(transaction.chainId, \"chainId\"));\n    fields.push(utils.getAddress(from));\n\n    // Add meta\n    fields.push(formatNumber(meta.gasPerPubdata || DEFAULT_GAS_PER_PUBDATA_LIMIT, \"gasPerPubdata\"));\n    fields.push((meta.factoryDeps ?? []).map(dep => utils.hexlify(dep)));\n    if (meta.customSignature && ethers.utils.arrayify(meta.customSignature).length === 0) {\n      throw new Error(\"Empty signatures are not supported!\");\n    }\n    fields.push(meta.customSignature || \"0x\");\n    if (meta.paymasterParams) {\n      fields.push([meta.paymasterParams.paymaster, ethers.utils.hexlify(meta.paymasterParams.paymasterInput)]);\n    } else {\n      fields.push([]);\n    }\n    return utils.hexConcat([[EIP712_TX_TYPE], utils.RLP.encode(fields)]);\n  }\n}\n\nclass ZkSyncConnector extends Connector {\n  constructor(config) {\n    super();\n    _defineProperty(this, \"chainId\", 1);\n    this.config = config;\n  }\n  async connect(args) {\n    this.personalWallet = args.personalWallet;\n    this.chainId = await (await this.personalWallet.getSigner()).getChainId();\n    if (!(await isZkSyncChain(this.chainId))) {\n      throw new Error(\"Invalid zksync chain id\");\n    }\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = this.config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    this.httpRpcClient = new HttpRpcClient(bundlerUrl, entryPointAddress, this.chainId, this.config.clientId, this.config.secretKey);\n    return this.getAddress();\n  }\n  disconnect() {\n    throw new Error(\"Method not implemented.\");\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async getSigner() {\n    if (!this.personalWallet) {\n      throw new Error(\"Wallet not connected\");\n    }\n    return new ZkWrappedSigner(await this.personalWallet.getSigner(), this.httpRpcClient);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  switchChain(chainId) {\n    throw new Error(\"Method not implemented.\");\n  }\n  isConnected() {\n    return Promise.resolve(!!this.personalWallet);\n  }\n  setupListeners() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async getProvider() {\n    if (!this.getSigner()) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n}\n\nexport { ZkSyncConnector };\n"],
  "mappings": "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",
  "names": ["import_dist"]
}
