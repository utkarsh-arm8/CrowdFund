import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  RawDateSchema
} from "./chunk-H6LS4AKV.js";
import {
  NFTInputOrUriSchema
} from "./chunk-5TF2ZDVM.js";
import {
  AddressOrEnsSchema,
  AmountSchema,
  BigNumberishSchema,
  z
} from "./chunk-YPNI3TBW.js";
import {
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-IIQ5PWPH.js";
import {
  __toESM
} from "./chunk-ZDA3XXE2.js";

// node_modules/@thirdweb-dev/sdk/dist/pack-29c3a58f.browser.esm.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var CommonWrappableSchema = (() => z.object({
  contractAddress: AddressOrEnsSchema
}))();
var ERC20WrappableSchema = (() => CommonWrappableSchema.extend({
  quantity: AmountSchema
}))();
var ERC721WrappableSchema = (() => CommonWrappableSchema.extend({
  tokenId: BigNumberishSchema
}))();
var ERC1155WrappableSchema = (() => CommonWrappableSchema.extend({
  tokenId: BigNumberishSchema,
  quantity: BigNumberishSchema
}))();
var ERC20RewardSchema = (() => ERC20WrappableSchema.omit({
  quantity: true
}).extend({
  quantityPerReward: AmountSchema
}))();
var ERC721RewardSchema = ERC721WrappableSchema;
var ERC1155RewardSchema = (() => ERC1155WrappableSchema.omit({
  quantity: true
}).extend({
  quantityPerReward: BigNumberishSchema
}))();
var ERC20RewardContentsSchema = (() => ERC20RewardSchema.extend({
  totalRewards: BigNumberishSchema.default("1")
}))();
var ERC721RewardContentsSchema = ERC721RewardSchema;
var ERC1155RewardContentsSchema = (() => ERC1155RewardSchema.extend({
  totalRewards: BigNumberishSchema.default("1")
}))();
var PackRewardsSchema = (() => z.object({
  erc20Rewards: z.array(ERC20RewardSchema).default([]),
  erc721Rewards: z.array(ERC721RewardSchema).default([]),
  erc1155Rewards: z.array(ERC1155RewardSchema).default([])
}))();
var PackRewardsOutputSchema = (() => z.object({
  erc20Rewards: z.array(ERC20RewardContentsSchema).default([]),
  erc721Rewards: z.array(ERC721RewardContentsSchema).default([]),
  erc1155Rewards: z.array(ERC1155RewardContentsSchema).default([])
}))();
var PackMetadataInputSchema = (() => PackRewardsOutputSchema.extend({
  packMetadata: NFTInputOrUriSchema,
  rewardsPerPack: BigNumberishSchema.default("1"),
  openStartTime: RawDateSchema.default(/* @__PURE__ */ new Date())
}))();

export {
  ERC20WrappableSchema,
  ERC721WrappableSchema,
  ERC1155WrappableSchema,
  PackRewardsSchema,
  PackRewardsOutputSchema,
  PackMetadataInputSchema
};
//# sourceMappingURL=chunk-YRREQA3W.js.map
